import { useState, useMemo } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { ChevronRight, MapPin, Search, X } from "lucide-react";
import { useQuery } from "@tanstack/react-query";
import { fetchProducts } from "@/lib/shopify";
import { getAllDistricts, getDistrictNameRu } from "@/config/districts";
import heroImage from "@/assets/beaches-hero.jpg";

// Beach Card Component - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (—Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞–π–æ–Ω!)
const BeachCard = ({ beach }: { beach: any }) => {
  const image = beach.node.images.edges[0]?.node;
  const tags = beach.node.tags || [];
  
  // Extract district from tags - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ!
  const districtTag = tags.find((tag: string) => tag.startsWith('district:'));
  const districtId = districtTag ? districtTag.replace('district:', '') : '';
  const districtName = districtId ? getDistrictNameRu(districtId) : '';

  return (
    <Link
      to={`/place/${beach.node.handle}`}
      className="group block"
    >
      <div className="rounded-2xl overflow-hidden border border-gray-200/60 bg-white/90 backdrop-blur-xl transition-all hover:shadow-lg hover:scale-[1.02]">
        {/* Image */}
        <div className="aspect-[16/9] bg-gradient-to-br from-blue-100 to-cyan-100 overflow-hidden relative">
          {image ? (
            <>
              <img
                src={image.url}
                alt={beach.node.title}
                className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent" />
            </>
          ) : (
            <div className="w-full h-full flex items-center justify-center text-6xl bg-gradient-to-br from-blue-100 to-cyan-100">
              üèñÔ∏è
            </div>
          )}
          
          {/* –†–∞–π–æ–Ω - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ! */}
          {districtName && (
            <div className="absolute bottom-3 left-3 right-3">
              <Badge className="bg-white/95 backdrop-blur-sm text-gray-900 font-semibold px-2.5 py-1 text-xs shadow-md border border-gray-200/50">
                <MapPin className="w-3 h-3 mr-1" />
                {districtName}
              </Badge>
            </div>
          )}
        </div>

        {/* Content - —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ! */}
        <div className="p-4">
          <h3 className="text-base font-bold text-gray-900 line-clamp-2 group-hover:text-[#007AFF] transition-colors leading-tight">
            {beach.node.title}
          </h3>
        </div>
      </div>
    </Link>
  );
};

const Beaches = () => {
  const [districtFilter, setDistrictFilter] = useState("all");
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedBeachHandle, setSelectedBeachHandle] = useState<string | null>(null);
  const navigate = useNavigate();

  const { data: products, isLoading } = useQuery({
    queryKey: ["beaches"],
    queryFn: () => fetchProducts(250), // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –ø–ª—è–∂–µ–π
  });

  // –í—Å–µ —Ä–∞–π–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  const allDistricts = getAllDistricts();

  // Filter products for beaches only
  const allBeaches = useMemo(() => {
    return (products || []).filter(
      (product) => 
        product.node.tags?.some(tag => 
          tag.toLowerCase().includes('category:beaches') ||
          tag.toLowerCase() === 'beach' ||
          (tag.includes('info') && tag.includes('beach'))
        )
    );
  }, [products]);

  // –§–∏–ª—å—Ç—Ä—ã: —Ä–∞–π–æ–Ω, –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª—è–∂
  const filteredBeaches = useMemo(() => {
    let filtered = allBeaches;

    // –§–∏–ª—å—Ç—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–ª—è–∂—É
    if (selectedBeachHandle) {
      filtered = filtered.filter(beach => beach.node.handle === selectedBeachHandle);
      return filtered;
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω—É
    if (districtFilter !== "all") {
      filtered = filtered.filter(beach => 
        beach.node.tags?.some(tag => 
          tag.toLowerCase() === `district:${districtFilter.toLowerCase()}` ||
          tag.toLowerCase().includes(`district:${districtFilter.toLowerCase()}`)
        )
      );
    }

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase().trim();
      filtered = filtered.filter(beach => 
        beach.node.title.toLowerCase().includes(query)
      );
    }

    return filtered;
  }, [allBeaches, districtFilter, searchQuery, selectedBeachHandle]);

  return (
    <div className="min-h-screen bg-background">
      {/* Hero Section */}
      <div className="relative h-[500px] overflow-hidden">
        <div className="absolute inset-0">
          <img
            src={heroImage}
            alt="–ü–ª—è–∂–∏ –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ"
            className="w-full h-full object-cover scale-105 animate-[scale-in_0.6s_ease-out]"
          />
          <div className="absolute inset-0 bg-gradient-to-b from-black/60 via-black/40 to-background" />
        </div>
        
        <div className="relative h-full flex items-center justify-center">
          <div className="container mx-auto px-4">
            <div className="glass-card max-w-4xl mx-auto p-10 text-center animate-fade-in backdrop-blur-xl bg-background/20 border border-white/20">
              <h1 className="text-6xl font-bold mb-6 bg-gradient-to-r from-white via-white/90 to-white/80 bg-clip-text text-transparent">
                –ü–ª—è–∂–∏ –ü—Ö—É–∫–µ—Ç–∞
              </h1>
              <p className="text-xl text-white/90 max-w-2xl mx-auto">
                –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è –ª—É—á—à–∏–µ –ø–ª—è–∂–∏ –æ—Å—Ç—Ä–æ–≤–∞ ‚Äî –æ—Ç –¥–∏–∫–∏—Ö –∏ –±–µ–∑–ª—é–¥–Ω—ã—Ö –¥–æ —Ç—É—Å–æ–≤–æ—á–Ω—ã—Ö —Å –≤–µ—á–µ—Ä–∏–Ω–∫–∞–º–∏
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="container mx-auto px-4 py-12">
        {/* Breadcrumbs */}
        <div className="flex items-center gap-2 text-sm text-muted-foreground mb-8">
          <Link to="/" className="hover:text-primary transition-colors">
            –ì–ª–∞–≤–Ω–∞—è
          </Link>
          <ChevronRight className="w-4 h-4" />
          <Link to="/phuket" className="hover:text-primary transition-colors">
            –ß—Ç–æ –ø–æ—Å–µ—Ç–∏—Ç—å
          </Link>
          <ChevronRight className="w-4 h-4" />
          <span className="text-foreground font-medium">–ü–ª—è–∂–∏ –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ</span>
        </div>

        {/* Description */}
        <div className="max-w-4xl mb-12 animate-fade-in">
          <div className="glass-card p-8 border-l-4 border-primary">
            <p className="text-lg text-foreground leading-relaxed">
              –ú–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–µ –ø–ª—è–∂–µ–π –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞: –æ—Ç –¥–∏–∫–∏—Ö –∏ –±–µ–∑–ª—é–¥–Ω—ã—Ö –¥–æ —Ç—É—Å–æ–≤–æ—á–Ω—ã—Ö, —Å —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º–∏ –∏ –≤–µ—á–µ—Ä–∏–Ω–∫–∞–º–∏. –ö–∞–∂–¥—ã–π –ø–ª—è–∂ –ü—Ö—É–∫–µ—Ç–∞ —É–Ω–∏–∫–∞–ª–µ–Ω: –ø—Ä–∏—Ä–æ–¥–∞ –Ω–∞–≥—Ä–∞–¥–∏–ª–∞ –æ—Å—Ç—Ä–æ–≤ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–º–∏ –ø–µ–π–∑–∞–∂–∞–º–∏ –∏ –≥–æ—Ä–Ω—ã–º–∏ —Ä–µ–ª—å–µ—Ñ–∞–º–∏, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–µ—Å—Ç–∞ —É–∫—Ä–∞—Å–∏–ª —á–µ–ª–æ–≤–µ–∫, —Å–¥–µ–ª–∞–≤ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏. 
            </p>
            <p className="text-lg font-bold mt-4 text-primary">
              üî• –õ—É—á—à–∏–µ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏ üëáüèº
            </p>
          </div>
        </div>

        {/* –§–∏–ª—å—Ç—Ä—ã: –ù–∞–∑–≤–∞–Ω–∏—è –ø–ª—è–∂–µ–π + –†–∞–π–æ–Ω + –ü–æ–∏—Å–∫ */}
        <div className="mb-8 space-y-4">
          {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–ª—è–∂–µ–π - –í–ú–ï–°–¢–û —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏! */}
          <div className="flex items-center gap-2 overflow-x-auto pb-1" style={{ scrollbarWidth: 'none', msOverflowStyle: 'none', WebkitOverflowScrolling: 'touch' }}>
            <button
              onClick={() => {
                setSelectedBeachHandle(null);
                setSearchQuery('');
              }}
              className={`px-3 py-1.5 rounded-full text-xs font-semibold whitespace-nowrap transition-all min-h-[32px] flex-shrink-0 ${
                selectedBeachHandle === null && !searchQuery.trim()
                  ? 'bg-[#007AFF] text-white shadow-md'
                  : 'bg-white/90 text-gray-700 hover:bg-gray-50 border border-gray-200/60'
              }`}
            >
              –í—Å–µ
            </button>
            {allBeaches.map(beach => {
              const beachDistrictTag = beach.node.tags?.find((tag: string) => tag.startsWith('district:'));
              const beachDistrictId = beachDistrictTag ? beachDistrictTag.replace('district:', '') : '';
              const beachDistrictName = beachDistrictId ? getDistrictNameRu(beachDistrictId) : '';
              
              return (
                <button
                  key={beach.node.handle}
                  onClick={() => {
                    setSelectedBeachHandle(beach.node.handle);
                    setSearchQuery('');
                  }}
                  className={`px-3 py-1.5 rounded-full text-xs font-semibold whitespace-nowrap transition-all min-h-[32px] flex-shrink-0 ${
                    selectedBeachHandle === beach.node.handle
                      ? 'bg-[#007AFF] text-white shadow-md'
                      : 'bg-white/90 text-gray-700 hover:bg-gray-50 border border-gray-200/60'
                  }`}
                  title={beachDistrictName ? `${beach.node.title} (${beachDistrictName})` : beach.node.title}
                >
                  {beach.node.title}
                </button>
              );
            })}
          </div>

          {/* –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ) */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => {
                setSearchQuery(e.target.value);
                setSelectedBeachHandle(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
              }}
              placeholder="–ü–æ–∏—Å–∫ –ø–ª—è–∂–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é..."
              className="w-full pl-10 pr-10 py-3 rounded-xl border border-gray-200/60 bg-white/90 backdrop-blur-xl text-sm focus:outline-none focus:ring-2 focus:ring-[#007AFF] focus:border-[#007AFF]"
            />
            {searchQuery.trim() && (
              <button
                onClick={() => {
                  setSearchQuery('');
                  setSelectedBeachHandle(null);
                }}
                className="absolute right-3 top-1/2 -translate-y-1/2 p-1 rounded hover:bg-gray-100 transition-colors"
              >
                <X className="w-4 h-4 text-gray-400" />
              </button>
            )}
          </div>

          {/* –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω–∞–º - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª */}
          <div className="flex items-center gap-2 overflow-x-auto pb-1" style={{ scrollbarWidth: 'none', msOverflowStyle: 'none', WebkitOverflowScrolling: 'touch' }}>
            <div className="flex items-center gap-1 flex-shrink-0">
              <MapPin className="w-4 h-4 text-gray-400" />
              <span className="text-xs text-gray-500 font-medium">–†–∞–π–æ–Ω:</span>
            </div>
            <button
              onClick={() => {
                setDistrictFilter('all');
                setSelectedBeachHandle(null);
              }}
              className={`px-3 py-1.5 rounded-full text-xs font-semibold whitespace-nowrap transition-all min-h-[32px] flex-shrink-0 ${
                districtFilter === 'all'
                  ? 'bg-[#007AFF] text-white shadow-md'
                  : 'bg-white/90 text-gray-700 hover:bg-gray-50 border border-gray-200/60'
              }`}
            >
              –í—Å–µ
            </button>
            {allDistricts.map(dist => (
              <button
                key={dist.id}
                onClick={() => {
                  setDistrictFilter(dist.id);
                  setSelectedBeachHandle(null);
                }}
                className={`px-3 py-1.5 rounded-full text-xs font-semibold whitespace-nowrap transition-all min-h-[32px] flex-shrink-0 ${
                  districtFilter === dist.id
                    ? 'bg-[#007AFF] text-white shadow-md'
                    : 'bg-white/90 text-gray-700 hover:bg-gray-50 border border-gray-200/60'
                }`}
              >
                {dist.nameRu}
              </button>
            ))}
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –∫–∞—Ä—Ç—ã */}
          <div className="flex justify-end">
            <Button
              onClick={() => navigate('/map?category=beaches')}
              className="gap-2 bg-gradient-to-r from-[#4CAF50] to-[#45a049] hover:from-[#45a049] hover:to-[#4CAF50] text-white border-0 rounded-full shadow-lg transition-all"
            >
              <MapPin className="w-4 h-4" />
              –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
            </Button>
          </div>
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
        <div className="mb-4 text-sm text-gray-600">
          –ù–∞–π–¥–µ–Ω–æ: <span className="font-bold text-gray-900">{filteredBeaches.length}</span> {filteredBeaches.length === 1 ? '–ø–ª—è–∂' : filteredBeaches.length < 5 ? '–ø–ª—è–∂–∞' : '–ø–ª—è–∂–µ–π'}
        </div>

        {/* Beach Cards Grid - –ø—Ä–æ—Å—Ç—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ —Ä–∞–π–æ–Ω–æ–º */}
        {isLoading ? (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {[...Array(8)].map((_, i) => (
              <div key={i} className="h-[200px] animate-pulse rounded-2xl bg-gray-100" />
            ))}
          </div>
        ) : filteredBeaches.length > 0 ? (
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {filteredBeaches.map((beach) => (
              <BeachCard key={beach.node.id} beach={beach} />
            ))}
          </div>
        ) : (
          <div className="text-center py-20">
            <div className="p-12 max-w-2xl mx-auto rounded-2xl bg-white/90 backdrop-blur-xl border border-gray-200">
              <div className="text-6xl mb-6">üèùÔ∏è</div>
              <p className="text-xl font-bold mb-4 text-gray-900">
                –ü–ª—è–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
              </p>
              <p className="text-gray-600 mb-6">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω
              </p>
              <Button
                onClick={() => {
                  setDistrictFilter("all");
                  setSearchQuery("");
                }}
                className="rounded-full bg-[#007AFF] hover:bg-[#0056CC] text-white"
              >
                –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Beaches;
