#!/usr/bin/env node

/**
 * üì∏ –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û –î–õ–Ø –¢–£–†–ê "FIVE PEARLS 2 DAYS"
 * 
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è island-travel-echo-clone
 * –Ω–∞–ø—Ä—è–º—É—é –≤ Shopify –¥–ª—è —Ç—É—Ä–∞ "Five Pearls 2 Days"
 */

const https = require('https');
const fs = require('fs');
const path = require('path');

// Shopify credentials
const SHOPIFY_STORE = 'phuket-telegram-shop-117ck.myshopify.com';
const ADMIN_TOKEN = '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';
const API_VERSION = '2025-07';

// –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
const REPO_PATH = path.join(__dirname, '..', '..', 'island-travel-echo-clone', 'island-travel-echo-clone');
const TOUR_HANDLE = 'five-pearls-2-days';
const APPLY = process.argv.includes('--apply');

console.log('üì∏ –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û –î–õ–Ø –¢–£–†–ê "FIVE PEARLS 2 DAYS"');
console.log('='.repeat(70));
console.log(`üìç –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${REPO_PATH}`);
console.log(`üÜî Handle: ${TOUR_HANDLE}`);
console.log(`‚öôÔ∏è  –†–µ–∂–∏–º: ${APPLY ? 'APPLY (—Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å)' : 'DRY-RUN (—Ç–µ—Å—Ç)'}\n`);

// ============================================================================
// –°–ü–ò–°–û–ö –§–û–¢–û–ì–†–ê–§–ò–ô –ò–ó –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø
// ============================================================================

const PHOTOS = [
  {
    name: 'gallery-01-railay-main.jpg',
    path: 'pearls-andaman-sea/gallery-01-railay-main.jpg',
    alt: 'Railay Beach - –æ–¥–∏–Ω –∏–∑ –∫—Ä–∞—Å–∏–≤–µ–π—à–∏—Ö –ø–ª—è–∂–µ–π –º–∏—Ä–∞'
  },
  {
    name: 'gallery-02-railay-beach.jpg',
    path: 'pearls-andaman-sea/gallery-02-railay-beach.jpg',
    alt: 'Railay Beach - –±–µ–ª–æ—Å–Ω–µ–∂–Ω—ã–π –ø–µ—Å–æ–∫ –∏ –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç–∞—è –≤–æ–¥–∞'
  },
  {
    name: 'gallery-03-railay-vertical.jpg',
    path: 'pearls-andaman-sea/gallery-03-railay-vertical.jpg',
    alt: 'Railay Beach - –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—è–∫–æ–≤—ã–µ —Å–∫–∞–ª—ã'
  },
  {
    name: 'gallery-04-railay-boats.jpg',
    path: 'pearls-andaman-sea/gallery-04-railay-boats.jpg',
    alt: 'Railay Beach - –ª–æ–¥–∫–∏ –Ω–∞ –±–µ—Ä–µ–≥—É'
  },
  {
    name: 'gallery-05-railay-cliffs.jpg',
    path: 'pearls-andaman-sea/gallery-05-railay-cliffs.jpg',
    alt: 'Railay Beach - –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–µ —Å–∫–∞–ª—ã –∏ –ø–µ—â–µ—Ä—ã'
  },
  {
    name: 'gallery-06-hong-island.jpg',
    path: 'pearls-andaman-sea/gallery-06-hong-island.jpg',
    alt: '–û—Å—Ç—Ä–æ–≤ –•–æ–Ω–≥ - –∏–∑—É–º—Ä—É–¥–Ω–∞—è –ª–∞–≥—É–Ω–∞'
  },
  {
    name: 'gallery-07-bamboo-island.webp',
    path: 'pearls-andaman-sea/gallery-07-bamboo-island.webp',
    alt: 'Bamboo Island - —Ä–∞–π—Å–∫–∏–π –æ—Å—Ç—Ä–æ–≤'
  }
];

// ============================================================================
// GRAPHQL –ó–ê–ü–†–û–° –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø PRODUCT ID
// ============================================================================

function makeGraphQLRequest(query, variables = {}) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({ query, variables });
    const options = {
      hostname: SHOPIFY_STORE,
      path: `/admin/api/${API_VERSION}/graphql.json`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': ADMIN_TOKEN,
        'Content-Length': Buffer.byteLength(postData),
      },
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          if (jsonData.errors) {
            reject(new Error(`GraphQL Errors: ${JSON.stringify(jsonData.errors)}`));
          } else {
            resolve(jsonData.data);
          }
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', reject);
    req.write(postData);
    req.end();
  });
}

async function getProductByHandle(handle) {
  const query = `
    query getProduct($handle: String!) {
      productByHandle(handle: $handle) {
        id
        title
        handle
      }
    }
  `;
  
  const data = await makeGraphQLRequest(query, { handle });
  return data.productByHandle;
}

// ============================================================================
// –ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –í SHOPIFY (REST API + BASE64)
// ============================================================================

function uploadImageToShopify(productId, imagePath, altText) {
  return new Promise((resolve, reject) => {
    try {
      if (!fs.existsSync(imagePath)) {
        reject(new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imagePath}`));
        return;
      }

      const fileBuffer = fs.readFileSync(imagePath);
      const base64Image = fileBuffer.toString('base64');
      const filename = path.basename(imagePath);
      const fileSizeKB = (fileBuffer.length / 1024).toFixed(2);
      
      const imageData = JSON.stringify({
        image: {
          attachment: base64Image,
          filename: filename,
          alt: altText || filename.replace(/\.[^.]*$/, '')
        }
      });
      
      const options = {
        hostname: SHOPIFY_STORE,
        path: `/admin/api/${API_VERSION}/products/${productId}/images.json`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Access-Token': ADMIN_TOKEN,
          'Content-Length': Buffer.byteLength(imageData),
        },
      };
      
      const req = https.request(options, (res) => {
        let data = '';
        res.on('data', (chunk) => data += chunk);
        res.on('end', () => {
          if (res.statusCode === 200 || res.statusCode === 201) {
            const result = JSON.parse(data).image;
            resolve({ ...result, fileSizeKB });
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${data}`));
          }
        });
      });
      
      req.on('error', reject);
      req.write(imageData);
      req.end();
    } catch (error) {
      reject(error);
    }
  });
}

// ============================================================================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

async function main() {
  try {
    const assetsPath = path.join(REPO_PATH, 'src', 'assets');
    
    if (!fs.existsSync(assetsPath)) {
      throw new Error(`–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: ${REPO_PATH}`);
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º Product ID –∏–∑ Shopify
    console.log(`üîç –ò—â–µ–º —Ç—É—Ä –≤ Shopify: ${TOUR_HANDLE}...`);
    const product = await getProductByHandle(TOUR_HANDLE);
    
    if (!product) {
      throw new Error(`–¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Shopify: ${TOUR_HANDLE}`);
    }
    
    const productIdNumber = product.id.split('/').pop();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω: ${product.title}`);
    console.log(`üÜî Product ID: ${productIdNumber}\n`);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
    console.log(`üì∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...\n`);
    
    const photosToUpload = [];
    for (const photo of PHOTOS) {
      const fullPath = path.join(assetsPath, photo.path);
      if (fs.existsSync(fullPath)) {
        photosToUpload.push({ ...photo, fullPath });
        const stats = fs.statSync(fullPath);
        const sizeKB = (stats.size / 1024).toFixed(2);
        console.log(`   ‚úÖ ${photo.name} (${sizeKB} KB)`);
      } else {
        console.log(`   ‚ö†Ô∏è  ${photo.name} - –ù–ï –ù–ê–ô–î–ï–ù`);
      }
    }

    if (photosToUpload.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!');
    }

    console.log(`\nüìä –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${photosToUpload.length}/${PHOTOS.length}\n`);

    // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
    if (APPLY) {
      console.log(`üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ó–ê–ì–†–£–ó–ö–£ –í SHOPIFY...\n`);
      
      let successCount = 0;
      let errorCount = 0;

      for (let i = 0; i < photosToUpload.length; i++) {
        const photo = photosToUpload[i];
        
        console.log(`üì∑ [${i + 1}/${photosToUpload.length}] ${photo.name}`);
        console.log(`   –ü—É—Ç—å: ${photo.path}`);
        console.log(`   Alt: ${photo.alt}`);
        
        try {
          const result = await uploadImageToShopify(
            productIdNumber,
            photo.fullPath,
            photo.alt
          );
          
          console.log(`   ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ! ID: ${result.id}`);
          console.log(`   üì¶ –†–∞–∑–º–µ—Ä: ${result.fileSizeKB} KB`);
          console.log(`   üîó URL: ${result.src}`);
          
          successCount++;
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
          if (i < photosToUpload.length - 1) {
            console.log(`   ‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫...\n`);
            await new Promise(resolve => setTimeout(resolve, 2000));
          }
        } catch (error) {
          console.error(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n`);
          errorCount++;
        }
      }

      console.log('\n' + '='.repeat(70));
      console.log('üìä –ò–¢–û–ì–ò –ó–ê–ì–†–£–ó–ö–ò:');
      console.log('='.repeat(70));
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${successCount}/${photosToUpload.length}`);
      console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}/${photosToUpload.length}`);
      
      if (successCount > 0) {
        console.log(`\nüéâ –§–û–¢–û–ì–†–ê–§–ò–ò –ó–ê–ì–†–£–ñ–ï–ù–´ –í SHOPIFY!`);
        console.log(`üîó –ü—Ä–æ–≤–µ—Ä—å: https://admin.shopify.com/store/phuket-telegram-shop-117ck/products/${productIdNumber}`);
        console.log(`üåê –ò–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ: http://localhost:8080/product/${TOUR_HANDLE}`);
      }
    } else {
      console.log(`\nüß™ DRY-RUN: –ë—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${photosToUpload.length} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
      console.log(`üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --apply`);
    }
    
  } catch (error) {
    console.error(`\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:`, error.message);
    if (error.stack) {
      console.error(`\nStack trace:`, error.stack);
    }
    process.exit(1);
  }
}

main().catch(console.error);

