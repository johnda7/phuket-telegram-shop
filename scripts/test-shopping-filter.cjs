const https = require('https');

const SHOPIFY_STORE = 'phuket-telegram-shop-117ck.myshopify.com';
const SHOPIFY_ACCESS_TOKEN = '89e6c827e100c3d0b35e5957424b3cc7';
const SHOPIFY_API_VERSION = '2025-07';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤
function makeGraphQLRequest(query, variables = {}) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({ query, variables });
    
    const options = {
      hostname: SHOPIFY_STORE,
      port: 443,
      path: `/api/${SHOPIFY_API_VERSION}/graphql.json`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Storefront-Access-Token': SHOPIFY_ACCESS_TOKEN,
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => { data += chunk; });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          if (jsonData.errors) {
            reject(new Error(`GraphQL Errors: ${JSON.stringify(jsonData.errors)}`));
          } else {
            resolve(jsonData);
          }
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', reject);
    req.write(postData);
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîç –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–ò SHOPPING');
  console.log('='.repeat(50));

  try {
    // 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const query = `
      query GetProducts($first: Int!) {
        products(first: $first) {
          edges {
            node {
              id
              title
              handle
              productType
              tags
            }
          }
        }
      }
    `;
    
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã...');
    const data = await makeGraphQLRequest(query, { first: 50 });
    const products = data.data.products.edges;
    
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`);
    
    // 2. –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ shopping
    const categoryTag = 'category:shopping';
    const shoppingProducts = products.filter(product => 
      product.node.tags.includes(categoryTag)
    );
    
    console.log(`üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ç–µ–≥–æ–º "${categoryTag}": ${shoppingProducts.length}`);
    
    // 3. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
    shoppingProducts.forEach((product, index) => {
      console.log(`\nüìù [${index + 1}] ${product.node.title}`);
      console.log(`   Handle: ${product.node.handle}`);
      console.log(`   Product Type: ${product.node.productType}`);
      console.log(`   Tags: ${product.node.tags.join(', ')}`);
    });
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ fetchProductsByCategory
    console.log('\nüîç –°–∏–º—É–ª—è—Ü–∏—è fetchProductsByCategory:');
    console.log(`   –ò—â–µ–º —Ç–µ–≥: "${categoryTag}"`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ: ${shoppingProducts.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤`);
    
    if (shoppingProducts.length === 0) {
      console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ç–µ–≥–æ–º category:shopping!');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   1. –¢–µ–≥–∏ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å Storefront API');
      console.log('   2. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ Storefront API');
      console.log('   3. –ü—Ä–æ–±–ª–µ–º–∞ —Å trial –∞–∫–∫–∞—É–Ω—Ç–æ–º');
    } else {
      console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ.');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

main().catch(console.error);
