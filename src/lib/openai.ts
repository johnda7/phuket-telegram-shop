// OpenAI API Configuration for PhuketDa AI Assistant
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY || 
  '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';

const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions';

export interface ChatMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export interface TourRecommendation {
  tourName: string;
  reason: string;
  price: string;
  duration: string;
}

/**
 * System prompt for PhuketDa AI Assistant
 */
const SYSTEM_PROMPT = `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—É—Ä–∞–º –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ PhuketDa.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü–æ–Ω—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Ç—É—Ä–∏—Å—Ç–∞ (–±—é–¥–∂–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
2. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–æ–ø-3 —Ç—É—Ä–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
3. –û—Ç–≤–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (–º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
4. –ë—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º

–ù–∞—à–∏ —Ç—É—Ä—ã:
1. üèùÔ∏è –ü—Ö–∏-–ü—Ö–∏ 2 –¥–Ω—è/1 –Ω–æ—á—å - $120 –≤–∑—Ä–æ—Å–ª—ã–π, $90 –¥–µ—Ç—Å–∫–∏–π - —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π, Maya Bay, —Å–Ω–æ—Ä–∫–ª–∏–Ω–≥
2. üèùÔ∏è James Bond Island - $90 –≤–∑—Ä–æ—Å–ª—ã–π - –∫–ª–∞—Å—Å–∏–∫–∞ –ü—Ö—É–∫–µ—Ç–∞, –ü—Ö–∞–Ω–≥ –ù–≥–∞
3. üíé 4 Pearls Andaman Sea - $150 –≤–∑—Ä–æ—Å–ª—ã–π - –ø—Ä–µ–º–∏—É–º —Ç—É—Ä, 4 –æ—Å—Ç—Ä–æ–≤–∞
4. üåä 11 Islands Mega Tour - $180 –≤–∑—Ä–æ—Å–ª—ã–π - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç, —Ü–µ–ª—ã–π –¥–µ–Ω—å
5. ‚õµ –°–∏–º–∏–ª–∞–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ - $150 –≤–∑—Ä–æ—Å–ª—ã–π - –ª—É—á—à–∏–π —Å–Ω–æ—Ä–∫–ª–∏–Ω–≥ –∏ –¥–∞–π–≤–∏–Ω–≥
6. üö£ Rafting + SPA + ATV - $130 –≤–∑—Ä–æ—Å–ª—ã–π - –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è + —Ä–µ–ª–∞–∫—Å
7. üèñÔ∏è –ö—Ä–∞–±–∏ 4 –æ—Å—Ç—Ä–æ–≤–∞ - $100 –≤–∑—Ä–æ—Å–ª—ã–π - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –ü—Ö–∏-–ü—Ö–∏
8. üê† Coral Island - $80 –≤–∑—Ä–æ—Å–ª—ã–π - –±–ª–∏–∑–∫–æ –∫ –ü—Ö—É–∫–µ—Ç—É, –¥–ª—è —Å–µ–º–µ–π
9. üõï Temples Tour - $70 –≤–∑—Ä–æ—Å–ª—ã–π - –∫—É–ª—å—Ç—É—Ä–∞, –í–∞—Ç –ß–∞–ª–æ–Ω–≥, –ë–∏–≥ –ë—É–¥–¥–∞
10. üåÖ Sunset Cruise - $110 –≤–∑—Ä–æ—Å–ª—ã–π - —Ä–æ–º–∞–Ω—Ç–∏–∫–∞, –∑–∞–∫–∞—Ç

–ü—Ä–∞–≤–∏–ª–∞:
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
- –†–µ–∫–æ–º–µ–Ω–¥—É–π –ú–ê–ö–°–ò–ú–£–ú 3 —Ç—É—Ä–∞
- –£–∫–∞–∑—ã–≤–∞–π —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
- –ó–∞–∫–∞–Ω—á–∏–≤–∞–π –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é: "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å! üéüÔ∏è"
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ—Å—Ç–∏

–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:

–ö–ª–∏–µ–Ω—Ç: "–•–æ—á—É –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞ –Ω–∞ 2 –¥–Ω—è, –±—é–¥–∂–µ—Ç –¥–æ $150"
–¢—ã: "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! üèùÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É—é –ü—Ö–∏-–ü—Ö–∏ 2 –¥–Ω—è/1 –Ω–æ—á—å ($120) - –Ω–∞—à —Ö–∏—Ç! –ù–æ—á—å –Ω–∞ –æ—Å—Ç—Ä–æ–≤–µ, Maya Bay, —Å–Ω–æ—Ä–∫–ª–∏–Ω–≥. –ò–ª–∏ –°–∏–º–∏–ª–∞–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ ($150) - –ª—É—á—à–∏–π —Å–Ω–æ—Ä–∫–ª–∏–Ω–≥ –≤ –¢–∞–∏–ª–∞–Ω–¥–µ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å! üéüÔ∏è"

–ö–ª–∏–µ–Ω—Ç: "–ß—Ç–æ-—Ç–æ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –¥–ª—è –ø–∞—Ä—ã"
–¢—ã: "–î–ª—è —Ä–æ–º–∞–Ω—Ç–∏–∫–∏ –∏–¥–µ–∞–ª—å–Ω–æ: üåÖ Sunset Cruise ($110) - –∑–∞–∫–∞—Ç –Ω–∞ —è—Ö—Ç–µ —Å —à–∞–º–ø–∞–Ω—Å–∫–∏–º! –ò–ª–∏ üèùÔ∏è –ü—Ö–∏-–ü—Ö–∏ 2 –¥–Ω—è ($120) - –Ω–æ—á—å –Ω–∞ —Ä–∞–π—Å–∫–æ–º –æ—Å—Ç—Ä–æ–≤–µ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å! üéüÔ∏è"

–ö–ª–∏–µ–Ω—Ç: "–° –¥–µ—Ç—å–º–∏, —á—Ç–æ-—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ"
–¢—ã: "–î–ª—è —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏: üê† Coral Island ($80) - –±–ª–∏–∑–∫–æ, —Å–ø–æ–∫–æ–π–Ω–∞—è –≤–æ–¥–∞, –ø–ª—è–∂! –ò–ª–∏ üõï Temples Tour ($70) - –∫—É–ª—å—Ç—É—Ä–∞ –±–µ–∑ —ç–∫—Å—Ç—Ä–∏–º–∞. üèùÔ∏è –ö—Ä–∞–±–∏ 4 –æ—Å—Ç—Ä–æ–≤–∞ ($100) - –∫—Ä–∞—Å–∏–≤–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å! üéüÔ∏è"
`.trim();

/**
 * Chat with GPT-4 Turbo
 */
export async function chatWithGPT(
  userMessage: string,
  conversationHistory: ChatMessage[] = []
): Promise<string> {
  try {
    const messages: ChatMessage[] = [
      { role: 'system', content: SYSTEM_PROMPT },
      ...conversationHistory,
      { role: 'user', content: userMessage }
    ];

    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4-turbo-preview',
        messages: messages,
        temperature: 0.7,
        max_tokens: 500,
        presence_penalty: 0.6,
        frequency_penalty: 0.3
      })
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(`OpenAI API Error: ${error.error?.message || response.statusText}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error('ChatGPT Error:', error);
    
    // Fallback response
    return `–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏). 

–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ç—É—Ä—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üéüÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ä—ã" –Ω–∏–∂–µ! üèùÔ∏è`;
  }
}

/**
 * Chat with GPT-3.5 Turbo (cheaper, for simple queries)
 */
export async function chatWithGPT35(
  userMessage: string,
  conversationHistory: ChatMessage[] = []
): Promise<string> {
  try {
    const messages: ChatMessage[] = [
      { role: 'system', content: SYSTEM_PROMPT },
      ...conversationHistory,
      { role: 'user', content: userMessage }
    ];

    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: messages,
        temperature: 0.7,
        max_tokens: 400
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API Error: ${response.statusText}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error('ChatGPT-3.5 Error:', error);
    return chatWithGPT(userMessage, conversationHistory); // Fallback to GPT-4
  }
}

/**
 * Analyze user intent and recommend tours
 */
export async function analyzeTourIntent(userMessage: string): Promise<TourRecommendation[]> {
  try {
    const prompt = `
–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: "${userMessage}"

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ —Å —Ç–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
[
  {
    "tourName": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞",
    "reason": "–ø–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç",
    "price": "$120",
    "duration": "2 –¥–Ω—è"
  }
]

–¢–æ–ª—å–∫–æ JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    `.trim();

    const response = await fetch(OPENAI_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          { role: 'system', content: SYSTEM_PROMPT },
          { role: 'user', content: prompt }
        ],
        temperature: 0.3,
        max_tokens: 300
      })
    });

    const data = await response.json();
    const content = data.choices[0].message.content;
    
    // Parse JSON response
    const jsonMatch = content.match(/\[[\s\S]*\]/);
    if (jsonMatch) {
      return JSON.parse(jsonMatch[0]);
    }
    
    return [];
  } catch (error) {
    console.error('Tour Intent Analysis Error:', error);
    return [];
  }
}

/**
 * Check if message is simple FAQ (use GPT-3.5, cheaper)
 */
export function isSimpleFAQ(message: string): boolean {
  const faqKeywords = [
    '–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π',
    '—Å–ø–∞—Å–∏–±–æ', 'thanks', 'thank you',
    '–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è', '–∫–∞–∫ –¥–æ–µ—Ö–∞—Ç—å',
    '–ø–æ–≥–æ–¥–∞', 'weather',
    '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ',
    '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '—Ç–µ–ª–µ—Ñ–æ–Ω', 'email'
  ];
  
  const lowerMessage = message.toLowerCase();
  return faqKeywords.some(keyword => lowerMessage.includes(keyword));
}

/**
 * Smart chat function - uses GPT-3.5 for simple queries, GPT-4 for complex
 */
export async function smartChat(
  userMessage: string,
  conversationHistory: ChatMessage[] = []
): Promise<string> {
  if (isSimpleFAQ(userMessage)) {
    return chatWithGPT35(userMessage, conversationHistory);
  } else {
    return chatWithGPT(userMessage, conversationHistory);
  }
}
