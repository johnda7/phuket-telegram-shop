// –°–æ–∑–¥–∞–µ–º PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Robinson Lifestyle Phuket
// –ò—Å–ø–æ–ª—å–∑—É–µ–º canvas –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
const photosDir = path.join(__dirname, '..', 'photos', 'robinson');
if (!fs.existsSync(photosDir)) {
  fs.mkdirSync(photosDir, { recursive: true });
  console.log('‚úÖ –ü–∞–ø–∫–∞ photos/robinson/ —Å–æ–∑–¥–∞–Ω–∞');
}

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é base64
const createPNGImage = (width, height, backgroundColor, text, textColor = '#ffffff') => {
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π PNG –≤ base64
  const canvas = `
    <svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg">
      <rect width="100%" height="100%" fill="${backgroundColor}"/>
      <text x="50%" y="50%" font-family="Arial, sans-serif" font-size="24" 
            fill="${textColor}" text-anchor="middle" dominant-baseline="middle">
        ${text}
      </text>
    </svg>
  `;
  
  return Buffer.from(canvas).toString('base64');
};

// –°–æ–∑–¥–∞–µ–º 6 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Robinson
const images = [
  {
    filename: 'robinson-exterior.jpg',
    width: 1200,
    height: 800,
    backgroundColor: '#2E8B57',
    text: 'Robinson Lifestyle Phuket\nExterior View',
    textColor: '#ffffff'
  },
  {
    filename: 'robinson-interior.jpg',
    width: 1200,
    height: 800,
    backgroundColor: '#4682B4',
    text: 'Robinson Lifestyle Phuket\nInterior Shopping',
    textColor: '#ffffff'
  },
  {
    filename: 'robinson-food-court.jpg',
    width: 1200,
    height: 800,
    backgroundColor: '#CD853F',
    text: 'Robinson Lifestyle Phuket\nFood Court',
    textColor: '#ffffff'
  },
  {
    filename: 'robinson-cinema.jpg',
    width: 1200,
    height: 800,
    backgroundColor: '#8B4513',
    text: 'Robinson Lifestyle Phuket\nCinema Hall',
    textColor: '#ffffff'
  },
  {
    filename: 'robinson-stores.jpg',
    width: 1200,
    height: 800,
    backgroundColor: '#708090',
    text: 'Robinson Lifestyle Phuket\nRetail Stores',
    textColor: '#ffffff'
  },
  {
    filename: 'robinson-parking.jpg',
    width: 1200,
    height: 800,
    backgroundColor: '#696969',
    text: 'Robinson Lifestyle Phuket\nParking Area',
    textColor: '#ffffff'
  }
];

async function createRobinsonPhotos() {
  console.log('üé® –°–û–ó–î–ê–ï–ú PNG –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–õ–Ø ROBINSON LIFESTYLE PHUKET\n');
  
  let successCount = 0;
  let errorCount = 0;
  
  for (let i = 0; i < images.length; i++) {
    const image = images[i];
    const filepath = path.join(photosDir, image.filename);
    
    console.log(`üñºÔ∏è  [${i + 1}/${images.length}] ${image.filename}`);
    console.log(`   –†–∞–∑–º–µ—Ä: ${image.width}x${image.height}`);
    console.log(`   –¶–≤–µ—Ç: ${image.backgroundColor}`);
    
    try {
      const base64Image = createPNGImage(
        image.width,
        image.height,
        image.backgroundColor,
        image.text,
        image.textColor
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ SVG (–±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ PNG)
      const svgContent = `
        <svg width="${image.width}" height="${image.height}" xmlns="http://www.w3.org/2000/svg">
          <rect width="100%" height="100%" fill="${image.backgroundColor}"/>
          <text x="50%" y="50%" font-family="Arial, sans-serif" font-size="24" 
                fill="${image.textColor}" text-anchor="middle" dominant-baseline="middle">
            ${image.text}
          </text>
        </svg>
      `;
      
      fs.writeFileSync(filepath.replace('.jpg', '.svg'), svgContent);
      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ: ${image.filename.replace('.jpg', '.svg')}`);
      successCount++;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞:`, error.message);
      errorCount++;
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  }
  
  console.log('='.repeat(60));
  console.log('üìä –ò–¢–û–ì–ò –°–û–ó–î–ê–ù–ò–Ø:');
  console.log('='.repeat(60));
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ: ${successCount}/${images.length}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}/${images.length}`);
  console.log(`üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${photosDir}`);
  
  if (successCount > 0) {
    console.log('\nüéâ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –°–û–ó–î–ê–ù–´!');
    console.log('üìù –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/upload-robinson-photos.cjs');
  }
}

createRobinsonPhotos().catch(console.error);
