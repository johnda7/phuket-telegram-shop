#!/usr/bin/env node

/**
 * üîß –ú–ê–°–¢–ï–†-–°–ö–†–ò–ü–¢: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ü–ò–°–ê–ù–ò–ô –í–°–ï–• –¢–£–†–û–í –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
 * 
 * –ü–∞—Ä—Å–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è island-travel-echo-clone
 * –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ HTML –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–∞
 * 
 * –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
 * node scripts/FIX-ALL-TOURS-REAL-DESCRIPTIONS.cjs --apply
 */

const https = require('https');
const fs = require('fs');
const path = require('path');

// Shopify credentials
const SHOPIFY_STORE = 'phuket-telegram-shop-117ck.myshopify.com';
const ADMIN_TOKEN = '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';
const API_VERSION = '2025-07';

// –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
const REPO_PATH = process.argv.find(a => a.startsWith('--repo-path='))?.split('=')[1]
  || path.join(__dirname, '..', '..', 'island-travel-echo-clone', 'island-travel-echo-clone');
const APPLY = process.argv.includes('--apply');

console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ü–ò–°–ê–ù–ò–ô –í–°–ï–• –¢–£–†–û–í –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò');
console.log('='.repeat(70));
console.log(`üìç –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${REPO_PATH}`);
console.log(`‚öôÔ∏è  –†–µ–∂–∏–º: ${APPLY ? 'APPLY (—Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å)' : 'DRY-RUN (—Ç–µ—Å—Ç)'}\n`);

// ============================================================================
// –ú–ê–ü–ü–ò–ù–ì HANDLE ‚Üí –§–ê–ô–õ –í –†–ï–ü–û–ó–ò–¢–û–†–ò–ò
// ============================================================================

const TOUR_MAPPING = {
  'phi-phi-2-days-1-night': 'phiPhi2DaysTour.ts',
  '4-pearls-andaman-sea': 'pearlsTour.ts',
  'james-bond-island-tour': 'jamesBondIslandTour.ts',
  'similan-islands-tour': null, // –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª
  'eleven-islands-mega-tour': 'elevenIslandsMegaTour.ts',
  '‚≠ê-11-–æ—Å—Ç—Ä–æ–≤–æ–≤-–º–µ–≥–∞-—Ç—É—Ä': 'elevenIslandsMegaTour.ts',
  'racha-coral-islands-tour': 'rachaCoralIslandsTour.ts',
  'rafting-spa-atv-tour': 'raftingSpaAtvTour.ts',
  'rafting-elephant-spa-atv': 'raftingSpaAtvTour.ts',
  'üêò-–∫–∞–æ-–ª–∞–∫-safari': 'kaoLakSafariTour.ts',
  'kao-lak-safari-tour': 'kaoLakSafariTour.ts',
  '–∞–≤–∞—Ç–∞—Ä-–ø–ª—é—Å': 'avatarPlusHangdongTour.ts',
  'avatar-plus-hangdong-tour': 'avatarPlusHangdongTour.ts',
  'dostoprimechatelnosti-phuketa-tour': 'dostoprimechatelnostiPhuketaTour.ts',
};

// ============================================================================
// 1. GRAPHQL REQUEST HELPER
// ============================================================================

function makeGraphQLRequest(query, variables = {}) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({ query, variables });
    const options = {
      hostname: SHOPIFY_STORE,
      path: `/admin/api/${API_VERSION}/graphql.json`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': ADMIN_TOKEN,
        'Content-Length': Buffer.byteLength(postData),
      },
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          if (jsonData.errors) {
            reject(new Error(`GraphQL Errors: ${JSON.stringify(jsonData.errors)}`));
          } else {
            resolve(jsonData.data);
          }
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', reject);
    req.write(postData);
    req.end();
  });
}

// ============================================================================
// 2. –ü–ê–†–°–ò–ù–ì –î–ê–ù–ù–´–• –ò–ó TS –§–ê–ô–õ–ê
// ============================================================================

function parseTourFile(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    const tourData = {};

    // Title
    const titleMatch = content.match(/title:\s*['"]([^'"]+)['"]/);
    if (titleMatch) tourData.title = titleMatch[1];

    // Subtitle
    const subtitleMatch = content.match(/subtitle:\s*['"]([^'"]+)['"]/);
    if (subtitleMatch) tourData.subtitle = subtitleMatch[1];

    // Description (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Å backticks)
    const descMatch = content.match(/description:\s*`([^`]+)`/s);
    if (descMatch) {
      tourData.description = descMatch[1].trim().replace(/\n\s*\n/g, '\n');
    }

    // Prices
    const priceAdultMatch = content.match(/priceAdult:\s*(\d+)/);
    if (priceAdultMatch) tourData.priceAdult = parseInt(priceAdultMatch[1]);

    const priceChildMatch = content.match(/priceChild:\s*(\d+)/);
    if (priceChildMatch) tourData.priceChild = parseInt(priceChildMatch[1]);

    // Duration
    const durationMatch = content.match(/duration:\s*['"]([^'"]+)['"]/);
    if (durationMatch) tourData.duration = durationMatch[1];

    // Group size
    const groupSizeMatch = content.match(/groupSize:\s*['"]([^'"]+)['"]/);
    if (groupSizeMatch) tourData.groupSize = groupSizeMatch[1];

    // Highlights
    const highlightsMatch = content.match(/highlights:\s*\[([^\]]+)\]/s);
    if (highlightsMatch) {
      const highlightsStr = highlightsMatch[1];
      tourData.highlights = highlightsStr.match(/['"]([^'"]+)['"]/g)?.map(h => h.replace(/['"]/g, '')) || [];
    }

    // Included
    const includedMatch = content.match(/included:\s*\[([^\]]+)\]/s);
    if (includedMatch) {
      const includedStr = includedMatch[1];
      tourData.included = includedStr.match(/['"]([^'"]+)['"]/g)?.map(i => i.replace(/['"]/g, '')) || [];
    }

    // Excluded / notIncluded
    const excludedMatch = content.match(/(?:excluded|notIncluded):\s*\[([^\]]+)\]/s);
    if (excludedMatch) {
      const excludedStr = excludedMatch[1];
      tourData.excluded = excludedStr.match(/['"]([^'"]+)['"]/g)?.map(e => e.replace(/['"]/g, '')) || [];
    }

    // Schedule / Itinerary (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥)
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ schedule –∏–ª–∏ itinerary –º–∞—Å—Å–∏–≤—ã
    const scheduleMatch = content.match(/(?:schedule|itinerary):\s*\[([\s\S]*?)\]/);
    if (scheduleMatch) {
      const scheduleStr = scheduleMatch[1];
      const objects = [];
      
      // –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å day, time, title/activity, description
      const objectRegex = /\{\s*day:\s*['"]([^'"]+)['"],\s*time:\s*['"]([^'"]+)['"],\s*(?:title:\s*['"]([^'"]+)['"]|activity:\s*['"]([^'"]+)['"]),\s*(?:description:\s*['"]([^'"]*?)['"])?\s*\}/g;
      let match;
      while ((match = objectRegex.exec(scheduleStr)) !== null) {
        objects.push({
          day: match[1],
          time: match[2],
          title: match[3] || match[4] || '',
          description: match[5] || match[3] || match[4] || ''
        });
      }
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–æ—Å—å —á–µ—Ä–µ–∑ regex —Å title/activity, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ª—å–∫–æ —Å activity
      if (objects.length === 0) {
        const simpleRegex = /\{\s*day:\s*['"]([^'"]+)['"],\s*time:\s*['"]([^'"]+)['"],\s*activity:\s*['"]([^'"]+)['"]\s*\}/g;
        while ((match = simpleRegex.exec(scheduleStr)) !== null) {
          objects.push({
            day: match[1],
            time: match[2],
            title: match[3],
            description: match[3]
          });
        }
      }
      
      tourData.schedule = objects;
    }

    // Important Info
    const importantInfoMatch = content.match(/importantInfo:\s*\[([^\]]+)\]/s);
    if (importantInfoMatch) {
      const importantInfoStr = importantInfoMatch[1];
      tourData.importantInfo = importantInfoStr.match(/['"]([^'"]+)['"]/g)?.map(i => i.replace(/['"]/g, '')) || [];
    }

    // Requirements (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const requirementsMatch = content.match(/requirements:\s*\[([^\]]+)\]/s);
    if (requirementsMatch) {
      const requirementsStr = requirementsMatch[1];
      tourData.requirements = requirementsStr.match(/['"]([^'"]+)['"]/g)?.map(r => r.replace(/['"]/g, '')) || [];
    }

    // Image paths
    const imageImports = content.match(/import\s+\w+\s+from\s+['"]([^'"]+)['"]/g);
    if (imageImports) {
      tourData.imagePaths = imageImports.map(imp => {
        const pathMatch = imp.match(/from\s+['"]([^'"]+)['"]/);
        return pathMatch ? pathMatch[1] : null;
      }).filter(Boolean);
    }

    return tourData;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${filePath}:`, error.message);
    return null;
  }
}

// ============================================================================
// 3. –ì–ï–ù–ï–†–ê–¶–ò–Ø HTML –û–ü–ò–°–ê–ù–ò–Ø (–ö–ê–ö –£ –ü–•–ò-–ü–•–ò)
// ============================================================================

function generateDescriptionHTML(tourData) {
  const isTwoDays = tourData.duration && (tourData.duration.includes('2') || tourData.duration.includes('–Ω–æ—á—å'));
  
  let html = `<h1>${tourData.title || '–¢—É—Ä'}</h1>\n\n`;
  
  if (tourData.subtitle) {
    html += `<p><strong>${tourData.subtitle}</strong></p>\n\n`;
  }
  
  if (tourData.description) {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ: —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    const paragraphs = tourData.description.split(/\n\s*\n/).filter(p => p.trim());
    paragraphs.forEach(paragraph => {
      html += `<p>${paragraph.trim()}</p>\n\n`;
    });
  }
  
  if (tourData.highlights && tourData.highlights.length > 0) {
    html += `<h2>‚ú® –ß—Ç–æ –≤–∞—Å –∂–¥—ë—Ç</h2>\n<ul>\n`;
    tourData.highlights.forEach(highlight => {
      html += `<li>${highlight}</li>\n`;
    });
    html += `</ul>\n\n`;
  }
  
  if (tourData.schedule && tourData.schedule.length > 0) {
    html += `<h2>üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—É—Ä–∞</h2>\n\n`;
    
    if (isTwoDays) {
      // –î–µ–Ω—å 1
      const day1Items = tourData.schedule.filter(item => item.day.includes('1') || item.day.includes('–î–µ–Ω—å 1'));
      if (day1Items.length > 0) {
        html += `<h3>–î–µ–Ω—å 1: –ü—Ö—É–∫–µ—Ç ‚Üí ${tourData.title.includes('–ü—Ö–∏-–ü—Ö–∏') ? '–ü—Ö–∏-–ü—Ö–∏' : tourData.title.includes('–ö—Ä–∞–±–∏') ? '–ö—Ä–∞–±–∏' : '–û—Å—Ç—Ä–æ–≤–∞'}</h3>\n`;
        day1Items.forEach(item => {
          html += `<div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4 rounded-lg mb-4">\n`;
          html += `  <strong>${item.time}</strong> ‚Äî ${item.title || item.description}\n`;
          html += `</div>\n`;
          if (item.description && item.description !== item.title) {
            html += `<p>${item.description}</p>\n\n`;
          }
        });
      }
      
      // –î–µ–Ω—å 2
      const day2Items = tourData.schedule.filter(item => item.day.includes('2') || item.day.includes('–î–µ–Ω—å 2'));
      if (day2Items.length > 0) {
        html += `<h3>–î–µ–Ω—å 2: ${tourData.title.includes('–ü—Ö–∏-–ü—Ö–∏') ? '–ü—Ö–∏-–ü—Ö–∏' : tourData.title.includes('–ö—Ä–∞–±–∏') ? '–ö—Ä–∞–±–∏' : '–û—Å—Ç—Ä–æ–≤–∞'} ‚Üí –ü—Ö—É–∫–µ—Ç</h3>\n`;
        day2Items.forEach(item => {
          html += `<div class="bg-gradient-to-r from-green-500 to-emerald-600 text-white p-4 rounded-lg mb-4">\n`;
          html += `  <strong>${item.time}</strong> ‚Äî ${item.title || item.description}\n`;
          html += `</div>\n`;
          if (item.description && item.description !== item.title) {
            html += `<p>${item.description}</p>\n\n`;
          }
        });
      }
    } else {
      // –û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–π —Ç—É—Ä
      tourData.schedule.forEach(item => {
        html += `<div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-4 rounded-lg mb-4">\n`;
        html += `  <strong>${item.time}</strong> ‚Äî ${item.title || item.description}\n`;
        html += `</div>\n`;
        if (item.description && item.description !== item.title) {
          html += `<p>${item.description}</p>\n\n`;
        }
      });
    }
    html += `\n`;
  }
  
  if (tourData.included && tourData.included.length > 0) {
    html += `<h2>‚úÖ –í–∫–ª—é—á–µ–Ω–æ –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å</h2>\n\n<h3>–í–∫–ª—é—á–µ–Ω–æ</h3>\n<ul>\n`;
    tourData.included.forEach(item => {
      html += `<li>‚úì ${item}</li>\n`;
    });
    html += `</ul>\n\n`;
  }
  
  if (tourData.excluded && tourData.excluded.length > 0) {
    html += `<h3>–ù–µ –≤–∫–ª—é—á–µ–Ω–æ</h3>\n<ul>\n`;
    tourData.excluded.forEach(item => {
      html += `<li>‚úó ${item}</li>\n`;
    });
    html += `</ul>\n\n`;
  }
  
  if (tourData.requirements && tourData.requirements.length > 0) {
    html += `<h2>üéí –ß—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π</h2>\n<ul>\n`;
    tourData.requirements.forEach(item => {
      html += `<li>‚Ä¢ ${item}</li>\n`;
    });
    html += `</ul>\n\n`;
  }
  
  if (tourData.importantInfo && tourData.importantInfo.length > 0) {
    html += `<h2>‚ö†Ô∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>\n<ul>\n`;
    tourData.importantInfo.forEach(info => {
      html += `<li>‚ö† ${info}</li>\n`;
    });
    html += `</ul>\n\n`;
  }
  
  html += `<h2>üéØ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–µ–∑–¥–∫—É?</h2>\n`;
  html += `<div class="flex flex-wrap gap-4 mb-4">\n`;
  html += `  <a href="/phuket" class="bg-blue-500 text-white px-6 py-3 rounded-lg hover:bg-blue-600">üèùÔ∏è –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä —Å –≥–∏–¥–æ–º</a>\n`;
  html += `  <a href="/services/car-rental" class="bg-green-500 text-white px-6 py-3 rounded-lg hover:bg-green-600">üöó –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ</a>\n`;
  html += `  <a href="/services/currency-exchange" class="bg-purple-500 text-white px-6 py-3 rounded-lg hover:bg-purple-600">üí± –û–±–º–µ–Ω—è—Ç—å –≤–∞–ª—é—Ç—É</a>\n`;
  html += `</div>\n\n`;
  
  html += `<p><em>${tourData.title} ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç—É—Ä, —ç—Ç–æ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ —Ä–∞–π—Å–∫–∏–π —É–≥–æ–ª–æ–∫ –ê–Ω–¥–∞–º–∞–Ω—Å–∫–æ–≥–æ –º–æ—Ä—è. –ò–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π, –æ—Ç–¥—ã—Ö–∞ –∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ–π –∫—Ä–∞—Å–æ—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –≤—Å—é –∂–∏–∑–Ω—å.</em></p>`;
  
  return html;
}

// ============================================================================
// 4. –ü–û–õ–£–ß–ï–ù–ò–ï –í–°–ï–• –¢–£–†–û–í –ò–ó SHOPIFY
// ============================================================================

async function getAllToursFromShopify() {
  console.log('üîç –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã –∏–∑ Shopify...');
  
  const query = `
    query GetTours($first: Int!, $after: String) {
      products(first: $first, after: $after, query: "product_type:Excursions tag:tour") {
        edges {
          node {
            id
            title
            handle
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  `;
  
  const allTours = [];
  let after = null;
  
  do {
    const data = await makeGraphQLRequest(query, { first: 100, after });
    const { edges, pageInfo } = data.products;
    allTours.push(...edges.map(e => e.node));
    after = pageInfo.hasNextPage ? pageInfo.endCursor : null;
  } while (after);
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤ –≤ Shopify: ${allTours.length}\n`);
  return allTours;
}

// ============================================================================
// 5. –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø –í SHOPIFY
// ============================================================================

async function updateTourDescription(productId, descriptionHtml) {
  const escapedDescription = descriptionHtml
    .replace(/\\/g, '\\\\')
    .replace(/"/g, '\\"')
    .replace(/\n/g, '\\n')
    .replace(/\r/g, '');
  
  const mutation = `
    mutation UpdateProduct($id: ID!) {
      productUpdate(input: {
        id: $id,
        descriptionHtml: "${escapedDescription}"
      }) {
        product { id title }
        userErrors { field message }
      }
    }
  `;
  
  const data = await makeGraphQLRequest(mutation, { id: productId });
  
  if (data.productUpdate.userErrors?.length > 0) {
    throw new Error(JSON.stringify(data.productUpdate.userErrors));
  }
  
  return data.productUpdate.product;
}

// ============================================================================
// 6. –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

async function main() {
  try {
    const dataPath = path.join(REPO_PATH, 'src', 'data');
    
    if (!fs.existsSync(dataPath)) {
      throw new Error(`–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: ${dataPath}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã –∏–∑ Shopify
    const shopifyTours = await getAllToursFromShopify();
    
    let successCount = 0;
    let skipCount = 0;
    
    for (const tour of shopifyTours) {
      console.log(`\n${'='.repeat(70)}`);
      console.log(`üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${tour.title}`);
      console.log(`üÜî Handle: ${tour.handle}`);
      
      // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞
      let fileName = TOUR_MAPPING[tour.handle];
      let filePath = null;
      
      if (fileName) {
        filePath = path.join(dataPath, fileName);
        if (!fs.existsSync(filePath)) {
          fileName = null;
          filePath = null;
        }
      }
      
      if (!fileName || !filePath) {
        // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        const files = fs.readdirSync(dataPath);
        const cleanHandle = tour.handle.replace(/[üéØüèùÔ∏è‚≠êüêòü¶Öüö£]/g, '').replace(/-/g, '').toLowerCase();
        const cleanTitle = tour.title.replace(/[üéØüèùÔ∏è‚≠êüêòü¶Öüö£]/g, '').replace(/\s+/g, '').toLowerCase();
        
        const possibleFile = files.find(f => {
          if (!f.endsWith('.ts') || f === 'toursRegistry.ts') return false;
          const cleanFileName = f.replace(/Tour\.ts$/, '').replace(/([A-Z])/g, '-$1').toLowerCase();
          return cleanFileName.includes(cleanHandle) || 
                 cleanHandle.includes(cleanFileName.replace(/-/g, '')) ||
                 cleanFileName.includes(cleanTitle.substring(0, 10)) ||
                 cleanTitle.includes(cleanFileName.replace(/-/g, ''));
        });
        
        if (!possibleFile) {
          console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è "${tour.handle}", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
          skipCount++;
          continue;
        }
        
        filePath = path.join(dataPath, possibleFile);
        fileName = possibleFile;
        console.log(`üìÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${possibleFile}`);
      }
      
      if (!fs.existsSync(filePath)) {
        console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
        skipCount++;
        continue;
      }
      
      console.log(`üìÑ –§–∞–π–ª: ${fileName}`);
      
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
      const tourData = parseTourFile(filePath);
      
      if (!tourData || !tourData.title) {
        console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ`);
        skipCount++;
        continue;
      }
      
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:`);
      console.log(`   Title: ${tourData.title}`);
      console.log(`   Duration: ${tourData.duration || 'N/A'}`);
      console.log(`   Highlights: ${tourData.highlights?.length || 0}`);
      console.log(`   Schedule items: ${tourData.schedule?.length || 0}`);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML
      const descriptionHtml = generateDescriptionHTML(tourData);
      
      if (APPLY) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        console.log(`üìù –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ Shopify...`);
        await updateTourDescription(tour.id, descriptionHtml);
        console.log(`‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`);
        successCount++;
      } else {
        console.log(`üß™ DRY-RUN: –û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ`);
        console.log(`   –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤:\n${descriptionHtml.substring(0, 300)}...`);
      }
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1500));
    }
    
    console.log(`\n${'='.repeat(70)}`);
    console.log(`‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!`);
    console.log(`üìä –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}`);
    console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipCount}`);
    console.log(`üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${shopifyTours.length}`);
    
    if (!APPLY) {
      console.log(`\nüí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --apply`);
    }
    
  } catch (error) {
    console.error(`\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:`, error.message);
    if (error.stack) {
      console.error(`\nStack trace:`, error.stack);
    }
    process.exit(1);
  }
}

main().catch(console.error);

