// –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ live coding (–≤–∞–π–±–∫–æ–¥–∏–Ω–≥)!
// –ê–≥–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ —Å–∞–º –∏—â–µ—Ç –∏ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫–∏, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ—Ç–∞–ª—è—Ö, –Ω–µ –ø—Ä–æ—Å–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –ª–æ–≥–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∞–≤—Ç–æ—Ñ–∏–∫—Å—ã.
// –õ—é–±—ã–µ –±–∞–≥–∏, –±–µ–ª—ã–π —ç–∫—Ä–∞–Ω, –æ—à–∏–±–∫–∏ ‚Äî –∞–≥–µ–Ω—Ç –æ–±—è–∑–∞–Ω —Å–∞–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –Ω–µ –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –í—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ vibe/live coding, –±–µ–∑ —Ä—É—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
import { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Loader2, ArrowRight } from "lucide-react";
import { fetchProductsByCategory, type ShopifyProduct } from "@/lib/shopify";
import DaBot from "@/components/DaBot";

interface CategoryConfig {
  title: string;
  description: string;
  heroImage: string;
  breadcrumbs: Array<{ label: string; path?: string }>;
}

const categoryConfigs: Record<string, CategoryConfig> = {
  shopping: {
    title: "–¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ",
    heroImage: "https://images.unsplash.com/photo-1519567241046-7f570eee3ce6?w=1600&h=400&fit=crop",
    description: "–¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–∞–π—Å–∫–æ–≥–æ –∫–æ–ª–æ—Ä–∏—Ç–∞ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–∏—Ä–æ–≤—ã—Ö –±—Ä–µ–Ω–¥–æ–≤. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å—ë: –æ—Ç –º–æ–¥–Ω—ã—Ö –±—É—Ç–∏–∫–æ–≤ –∏ —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏—Ö —Å—É–≤–µ–Ω–∏—Ä–æ–≤ –¥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π –∫—É—Ö–Ω–µ–π –∏ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–æ–Ω –¥–ª—è –≤—Å–µ–π —Å–µ–º—å–∏. –¢–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ ‚Äî —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–∫—É–ø–æ–∫, –Ω–æ –∏ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –≤ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ, –Ω–∞—Å–ª–∞–∂–¥–∞—è—Å—å –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π —Ç—Ä–æ–ø–∏—á–µ—Å–∫–æ–≥–æ –æ—Å—Ç—Ä–æ–≤–∞. –ë–æ–ª—å—à–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã —Å –±—Ä–µ–Ω–¥–∞–º–∏ –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤.",
    breadcrumbs: [
      { label: "–ì–ª–∞–≤–Ω–∞—è", path: "/" },
      { label: "–ß—Ç–æ –ø–æ—Å–µ—Ç–∏—Ç—å?", path: "/categories" },
      { label: "–ü–æ–ª–µ–∑–Ω–æ–µ", path: "/categories" },
      { label: "–°—É–≤–µ–Ω–∏—Ä—ã –∏ —à–æ–ø–∏–Ω–≥", path: "/categories" },
      { label: "–¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ" }
    ]
  }
};

const CategoryPageDynamic = () => {
  const { categoryId } = useParams<{ categoryId: string }>();
  const [products, setProducts] = useState<ShopifyProduct[]>([]);
  const [loading, setLoading] = useState(true);
  const [activeFilter, setActiveFilter] = useState<"all" | "open">("all");
  
  const config = categoryId ? categoryConfigs[categoryId] : null;

  useEffect(() => {
    const loadProducts = async () => {
      if (!categoryId) return;
      
      try {
        setLoading(true);
        const data = await fetchProductsByCategory(categoryId);
        setProducts(data);
      } catch (err) {
        console.error('Failed to load products:', err);
      } finally {
        setLoading(false);
      }
    };

    loadProducts();
  }, [categoryId]);

  if (!config) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <p className="text-xl">–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader2 className="w-8 h-8 animate-spin text-primary" />
      </div>
    );
  }

  return (
    <>
      <div className="min-h-screen bg-background pb-24">
        {/* –î–ê –ë–û–¢ - AI –∫–æ–Ω—Å—å–µ—Ä–∂ –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ–∑–¥–µ! */}
        <DaBot />
        {/* Hero Image */}
        <div className="relative h-[300px] w-full overflow-hidden">
          <img
            src={config.heroImage}
            alt={config.title}
            className="w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-gradient-to-b from-black/40 via-black/20 to-transparent" />
          <h1 className="absolute bottom-8 left-1/2 -translate-x-1/2 text-4xl md:text-5xl font-bold text-white text-center whitespace-nowrap">
            {config.title}
          </h1>
        </div>
        <div className="container mx-auto px-4">
          {/* Breadcrumbs */}
          <nav className="flex items-center gap-2 text-sm py-6 flex-wrap">
            {config.breadcrumbs.map((item, index) => (
              <div key={index} className="flex items-center gap-2">
                {item.path ? (
                  <Link to={item.path} className="text-muted-foreground hover:text-primary">
                    {item.label}
                  </Link>
                ) : (
                  <span className="font-medium">{item.label}</span>
                )}
                {index < config.breadcrumbs.length - 1 && (
                  <span className="text-muted-foreground">‚Ä¢</span>
                )}
              </div>
            ))}
          </nav>
          {/* Description */}
          <div className="mb-8 max-w-5xl">
            <p className="text-base leading-relaxed text-muted-foreground">
              {config.description}
            </p>
          </div>
          {/* Filters & Map Button */}
          <div className="mb-8">
            {/* Filter Buttons Row */}
            <div className="flex flex-wrap gap-3 mb-4">
              {/* All/Open Filter - iOS Style */}
              <div className="inline-flex gap-1 bg-secondary/50 rounded-full p-1 shadow-sm">
                <button
                  onClick={() => setActiveFilter("all")}
                  className={`px-6 py-2.5 rounded-full text-sm font-semibold transition-all duration-200 ${
                    activeFilter === "all"
                      ? "bg-white text-foreground shadow-md"
                      : "text-muted-foreground hover:text-foreground"
                  }`}
                >
                  –í—Å–µ
                </button>
                <button
                  onClick={() => setActiveFilter("open")}
                  className={`px-6 py-2.5 rounded-full text-sm font-semibold transition-all duration-200 ${
                    activeFilter === "open"
                      ? "bg-white text-foreground shadow-md"
                      : "text-muted-foreground hover:text-foreground"
                  }`}
                >
                  –û—Ç–∫—Ä—ã—Ç—ã–µ
                </button>
              </div>
              {/* Category Dropdown - iOS Style */}
              <select className="px-5 py-2.5 rounded-full border-2 border-border bg-white text-sm font-medium hover:border-primary/50 transition-colors cursor-pointer shadow-sm">
                <option>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã</option>
                <option>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: –í—Å–µ –º–µ—Å—Ç–∞</option>
              </select>
              {/* District Dropdown - iOS Style */}
              <select className="px-5 py-2.5 rounded-full border-2 border-border bg-white text-sm font-medium hover:border-primary/50 transition-colors cursor-pointer shadow-sm">
                <option>–†–∞–π–æ–Ω: –í—Å–µ</option>
                <option>–†–∞–π–æ–Ω: –ü–∞—Ç–æ–Ω–≥</option>
                <option>–†–∞–π–æ–Ω: –ü—Ö—É–∫–µ—Ç –¢–∞—É–Ω</option>
                <option>–†–∞–π–æ–Ω: –ß–∞–ª–æ–Ω–≥</option>
                <option>–†–∞–π–æ–Ω: –ë–∞–Ω–≥ –¢–∞–æ</option>
              </select>
            </div>
            {/* Map Preview Card - Interactive */}
            <div className="bg-gradient-to-br from-blue-50 to-blue-100/50 rounded-2xl p-6 border-2 border-blue-200/50 hover:border-blue-300 transition-all duration-300 cursor-pointer group shadow-md hover:shadow-xl">
              <div className="flex items-center justify-between gap-4">
                <div className="flex-1">
                  <h3 className="text-lg font-bold text-blue-900 mb-1 flex items-center gap-2">
                    üó∫Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
                    <span className="text-sm font-normal text-blue-600">({products.length} –º–µ—Å—Ç)</span>
                  </h3>
                  <p className="text-sm text-blue-700">
                    –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ä—Ç–µ
                  </p>
                </div>
                <Button 
                  size="lg"
                  className="bg-[#007AFF] hover:bg-[#0063cc] text-white font-semibold px-8 shadow-lg"
                  style={{ boxShadow: '0 2px 8px #007AFF33' }}
                >
                  –ü–û–ö–ê–ó–ê–¢–¨ –ù–ê –ö–ê–†–¢–ï
                </Button>
              </div>
            </div>
          </div>
          {/* Products Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
            {products.map((product) => {
              const image = product.node.images.edges[0]?.node.url || "https://images.unsplash.com/photo-1555529669-e69e7aa0ba9a?w=600";
              // Extract district from tags (district:xxx)
              const districtTag = product.node.tags.find((tag: string) => tag.startsWith('district:'));
              const district = districtTag ? districtTag.replace('district:', '').split('-').map((w: string) => w.charAt(0).toUpperCase() + w.slice(1)).join(' ') : '';
              // Mock rating (–≤ –±—É–¥—É—â–µ–º –∏–∑ metafields)
              const rating = 4.5;
              return (
                <Link
                  key={product.node.id}
                  to={`/place/${product.node.handle}`}
                  className="group block overflow-hidden rounded-xl bg-card shadow-md hover:shadow-xl transition-all duration-300"
                >
                  {/* Image */}
                  <div className="relative aspect-[4/3] overflow-hidden">
                    <img
                      src={image}
                      alt={product.node.title}
                      className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                    />
                    {/* Blue Arrow Button */}
                    <div className="absolute bottom-4 right-4 bg-[#007AFF] text-white p-3 rounded-full shadow-lg group-hover:scale-110 transition-transform">
                      <ArrowRight className="w-5 h-5" />
                    </div>
                  </div>
                  {/* Content */}
                  <div className="p-5">
                    <h3 className="font-bold text-lg mb-2 group-hover:text-primary transition-colors leading-tight">
                      {product.node.title}
                    </h3>
                    <p className="text-sm text-muted-foreground line-clamp-3 mb-3 leading-relaxed">
                      {product.node.description}
                    </p>
                  </div>
                </Link>
              );
            })}
          </div>
          {/* Empty State */}
          {products.length === 0 && (
            <div className="text-center py-16">
              <p className="text-muted-foreground text-lg">
                –ú–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è
              </p>
            </div>
          )}
        </div>
      </div>
    </>
  );
}

export default CategoryPageDynamic;
