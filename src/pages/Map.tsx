/**
 * üó∫Ô∏è –ö–ê–†–¢–ê –ü–£–¢–ï–®–ï–°–¢–í–ï–ù–ù–ò–ö–ê –ü–•–£–ö–ï–¢–ê
 * 
 * –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–∞ - –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –∫–∞—Ä—Ç–∞ –≤—Å–µ—Ö –º–µ—Å—Ç
 * –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –ø—Ä–æ–¥–∞—é—Ç –∫–∞—Ä—Ç—ã, –º—ã –¥–µ–ª–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω–æ!
 * 
 * –§–∏–ª–æ—Å–æ—Ñ–∏—è:
 * - –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –º–µ—Å—Ç–∞ –∏–∑ Shopify —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
 * - –ü–∞—Ä—Ç–Ω–µ—Ä—ã –≤—ã–¥–µ–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
 * - –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–µ—Å—Ç–∞
 * - iOS 26 –¥–∏–∑–∞–π–Ω + Telegram Wallet –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å
 */

import { useEffect, useState, useMemo } from "react";
import { useNavigate, useSearchParams, Link } from "react-router-dom";
import { Loader2, MapPin, Star, ChevronDown, X, Search, Filter } from "lucide-react";
import { fetchProducts } from "@/lib/shopify";
import { getAllPartners } from "@/config/partners";
import { getAllCategories, type CategoryConfig } from "@/config/categories";
import { getPlaceMetafields } from "@/data/placeMetafields";
import { getFiltersForCategory, hasCategorySpecificFilters, type CategoryFilter } from "@/config/categoryFilters";
import { getAllDistricts, getPopularDistricts, getDistrictNameRu, type DistrictConfig } from "@/config/districts";
import LeafletMap from "@/components/LeafletMap";

interface PlaceMarker {
  handle: string;
  title: string;
  lat: number;
  lng: number;
  category: string;
  rating?: string;
  district?: string;
  isPartner: boolean;
  emoji: string;
  tags: string[];
}

const Map = () => {
  const [places, setPlaces] = useState<PlaceMarker[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedCategory, setSelectedCategory] = useState<string>("all");
  const [selectedPlaceHandle, setSelectedPlaceHandle] = useState<string | null>(null); // –í—ã–±—Ä–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ (–¥–ª—è –ø–ª—è–∂–µ–π - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª—è–∂–∞)
  // –£–ë–†–ê–ù–û: showTopPlaces –∏ topPlacesMode (–ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤, –Ω–µ –Ω—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å "–¢–æ–ø")
  const [isListExpanded, setIsListExpanded] = useState(false);
  const [isCategoryMenuOpen, setIsCategoryMenuOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [ratingFilter, setRatingFilter] = useState<'all' | '4.0' | '4.5' | '4.7' | '5.0'>('all');
  const [districtFilter, setDistrictFilter] = useState<string>('all');
  // –£–ë–†–ê–ù–û: showMixedBest (—Å–≤—è–∑–∞–Ω–æ —Å "–¢–æ–ø")
  const [categorySpecificFilter, setCategorySpecificFilter] = useState<string>('all'); // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤–∏–¥–æ–≤—ã–µ, –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–Ω—ã–µ –∏ —Ç.–¥.)
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL (place –∏ category)
  useEffect(() => {
    const placeParam = searchParams.get('place');
    const categoryParam = searchParams.get('category');
    
    if (placeParam) {
      setSelectedPlaceHandle(placeParam);
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ URL - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –µ—ë
    if (categoryParam) {
      setSelectedCategory(categoryParam);
    }
  }, [searchParams]);

  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ
  const partners = getAllPartners();
  const partnerHandles = new Set(partners.map(p => p.id));

  useEffect(() => {
    const loadPlaces = async () => {
      try {
        setLoading(true);
        const products = await fetchProducts(250); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç Shopify Storefront API
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Å—Ç–∞ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ (info products)
        const placesWithCoordinates: PlaceMarker[] = products
          .filter(p => {
            // –¢–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–Ω–µ —Ç—É—Ä—ã)
            const tags = p.node.tags || [];
            return tags.includes('info') || tags.includes('insider');
          })
          .map(p => {
            // –ò—â–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ metafields (Storefront API)
            // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–ë–ê namespace (place_info –∏ custom) –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            let coordinatesField = p.node.metafields?.find(m => 
              m && m.key === 'coordinates' && 
              (m.namespace === 'place_info' || m.namespace === 'custom' || m.namespace === undefined)
            );
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤ Storefront API - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–∞–Ω–Ω—ã–µ
            if (!coordinatesField?.value) {
              const fallbackData = getPlaceMetafields(p.node.handle);
              if (fallbackData.coordinates) {
                coordinatesField = { value: fallbackData.coordinates } as any;
              }
            }
            
            if (!coordinatesField?.value) return null;
            
            const [lat, lng] = coordinatesField.value.split(',').map(Number);
            if (!lat || !lng || isNaN(lat) || isNaN(lng)) return null;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Ç–µ–≥–æ–≤ (category:shopping, category:beaches –∏ —Ç.–¥.)
            const tags = p.node.tags || [];
            let category = 'place';
            let emoji = 'üìç';
            
            // –ò—â–µ–º —Ç–µ–≥ category:*
            const categoryTag = tags.find(t => t.startsWith('category:'));
            if (categoryTag) {
              category = categoryTag.replace('category:', '');
              
              // –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —ç–º–æ–¥–∑–∏
              const categoryEmojiMap: Record<string, string> = {
                shopping: 'üõçÔ∏è',
                beaches: 'üèñÔ∏è',
                temples: 'üõï',
                restaurants: 'üçΩÔ∏è',
                spa: 'üíÜ',
                viewpoints: '‚õ∞Ô∏è',
                massage: 'üíÜ‚Äç‚ôÄÔ∏è',
                coffee: '‚òï',
                nightmarkets: 'üåÉ',
                attractions: 'üéØ',
                nightlife: 'üåô',
                museums: 'üèõÔ∏è',
                waterfalls: 'üíß',
                aquaparks: 'üí¶'
              };
              emoji = categoryEmojiMap[category] || 'üìç';
            }

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä–∞
            const isPartner = partnerHandles.has(p.node.handle) || 
                            tags.some(t => t.includes('partner'));

            // –†–µ–π—Ç–∏–Ω–≥ - —Å–Ω–∞—á–∞–ª–∞ –∏–∑ Storefront API, –ø–æ—Ç–æ–º fallback
            let ratingField = p.node.metafields?.find(m => m && m.key === 'rating');
            let rating = ratingField?.value;
            if (!rating) {
              const fallbackData = getPlaceMetafields(p.node.handle);
              rating = fallbackData.rating?.toString();
            }

            // –†–∞–π–æ–Ω - —Å–Ω–∞—á–∞–ª–∞ –∏–∑ Storefront API, –ø–æ—Ç–æ–º fallback
            let districtField = p.node.metafields?.find(m => m && m.key === 'district');
            let district = districtField?.value;
            if (!district) {
              const fallbackData = getPlaceMetafields(p.node.handle);
              district = fallbackData.district;
            }

            return {
              handle: p.node.handle,
              title: p.node.title,
              lat,
              lng,
              category,
              rating,
              district,
              isPartner,
              emoji,
              tags
            };
          })
          .filter(Boolean) as PlaceMarker[];

        setPlaces(placesWithCoordinates);
      } catch (error) {
        console.error('Error loading map places:', error);
      } finally {
        setLoading(false);
      }
    };

    loadPlaces();
  }, []);

  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã (–¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) - –æ–±—ä—è–≤–ª—è–µ–º –ü–ï–†–ï–î filteredPlaces!
  const categoryFilters = useMemo(() => {
    if (selectedCategory === 'all') return [];
    return getFiltersForCategory(selectedCategory);
  }, [selectedCategory]);
  
  const hasSpecificFilters = useMemo(() => {
    if (selectedCategory === 'all') return false;
    // –î–ª—è –ø–ª—è–∂–µ–π –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã - –ø–æ–∫–∞–∂–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª—è–∂–µ–π
    if (selectedCategory === 'beaches') return false;
    return hasCategorySpecificFilters(selectedCategory);
  }, [selectedCategory]);

  // –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–ª—è–∂–µ–π - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–ª—è–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤)
  const beachesForFilter = useMemo(() => {
    if (selectedCategory !== 'beaches') return [];
    return places.filter(p => p.category === 'beaches');
  }, [places, selectedCategory]);
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Å—Ç - –í–ê–ñ–ù–û: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–±–µ–∑ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏!)
  const filteredPlaces = useMemo(() => {
    let filtered = selectedCategory === "all" 
      ? places 
      : places.filter(p => p.category === selectedCategory);
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—Ç—É (–¥–ª—è –ø–ª—è–∂–µ–π - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª—è–∂–∞)
    if (selectedPlaceHandle) {
      filtered = filtered.filter(p => p.handle === selectedPlaceHandle);
      return filtered;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    if (ratingFilter !== 'all') {
      const minRating = parseFloat(ratingFilter);
      filtered = filtered.filter(p => {
        // –ü–∞—Ä—Å–∏–º —Ä–µ–π—Ç–∏–Ω–≥: –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞ "4.5" –∏–ª–∏ undefined
        const ratingStr = p.rating || "0";
        const rating = parseFloat(ratingStr);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤–∞–ª–∏–¥–Ω—ã–π –∏ >= –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
        if (isNaN(rating) || rating === 0) {
          // –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–µ—Ç, –∏—Å–∫–ª—é—á–∞–µ–º –º–µ—Å—Ç–æ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞)
          return false;
        }
        return rating >= minRating;
      });
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω—É
    if (districtFilter !== 'all') {
      filtered = filtered.filter(p => {
        const placeDistrict = p.tags.find(t => t.startsWith('district:'))?.replace('district:', '') || p.district;
        return placeDistrict === districtFilter || placeDistrict?.includes(districtFilter);
      });
    }
    
    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase().trim();
      filtered = filtered.filter(p => 
        p.title.toLowerCase().includes(query) ||
        p.district?.toLowerCase().includes(query)
      );
    }
    
    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä (–≤–∏–¥–æ–≤—ã–µ, –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–Ω—ã–µ –∏ —Ç.–¥.) - –ù–ï –¥–ª—è –ø–ª—è–∂–µ–π!
    if (categorySpecificFilter !== 'all' && hasSpecificFilters && selectedCategory !== 'all' && selectedCategory !== 'beaches') {
      const filterConfig = categoryFilters.find(f => f.id === categorySpecificFilter);
      if (filterConfig && filterConfig.tags.length > 0) {
        filtered = filtered.filter(p => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —Ç–µ–≥–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ —Ç–µ–≥–∞—Ö –º–µ—Å—Ç–∞
          return filterConfig.tags.some(tag => 
            p.tags.some(placeTag => 
              placeTag.toLowerCase().includes(tag.toLowerCase().replace('tag:', ''))
            )
          );
        });
      }
    }
    
    return filtered;
  }, [places, selectedCategory, ratingFilter, districtFilter, searchQuery, categorySpecificFilter, categoryFilters, hasSpecificFilters, selectedPlaceHandle]);
  
  // –í–°–ï —Ä–∞–π–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é) - –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï
  const allDistrictsConfig = getAllDistricts();
  
  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ –º–µ—Å—Ç + –≤—Å–µ —Ä–∞–π–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)
  const availableDistricts = useMemo(() => {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞–µ–º —Ä–∞–π–æ–Ω—ã –∏–∑ –º–µ—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–µ
    const districtsFromPlaces = new Set<string>();
    filteredPlaces.forEach(place => {
      const district = place.tags.find(t => t.startsWith('district:'))?.replace('district:', '') || place.district;
      if (district) districtsFromPlaces.add(district);
    });
    
    // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï —Ä–∞–π–æ–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –º–µ—Å—Ç –Ω–∞ –∫–∞—Ä—Ç–µ)
    const result = allDistrictsConfig.map(dist => dist.id);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–π–æ–Ω—ã –∏–∑ –º–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    districtsFromPlaces.forEach(district => {
      if (!result.includes(district)) {
        result.push(district);
      }
    });
    
    return result;
  }, [filteredPlaces, allDistrictsConfig]);

  // –£–ë–†–ê–ù–û: getTopPlaces –∏ mixedBestPlaces (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å "–¢–æ–ø" –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞)

  // –ü–∞—Ä—Ç–Ω–µ—Ä—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏
  // –ï—Å–ª–∏ –µ—Å—Ç—å selectedPlaceHandle, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
  const sortedPlaces = [...filteredPlaces].sort((a, b) => {
    // –í—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤–æ–µ
    if (selectedPlaceHandle && a.handle === selectedPlaceHandle) return -1;
    if (selectedPlaceHandle && b.handle === selectedPlaceHandle) return 1;
    // –ü–∞—Ä—Ç–Ω–µ—Ä—ã –ø–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞
    if (a.isPartner && !b.isPartner) return -1;
    if (!a.isPartner && b.isPartner) return 1;
    return 0;
  });

  // –ù–∞–π—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
  const highlightedPlace = selectedPlaceHandle 
    ? sortedPlaces.find(p => p.handle === selectedPlaceHandle)
    : null;

  // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã (–ü—Ö—É–∫–µ—Ç)
  const centerLat = 7.8804;
  const centerLng = 98.3923;

  // –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ (–¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞ –∏ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é)
  // ‚ö° –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º getAllCategories() - –≤—Å–µ 26 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
  const allCategories = useMemo(() => {
    // –ü–æ–ª–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ —ç–º–æ–¥–∑–∏ –¥–ª—è –í–°–ï–• –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π!)
    const categoryEmojiMap: Record<string, string> = {
      beaches: 'üèñÔ∏è', temples: 'üõï', viewpoints: '‚õ∞Ô∏è',
      restaurants: 'üçΩÔ∏è', nightlife: 'üåô', spa: 'üíÜ', elephants: 'üêò',
      shopping: 'üõçÔ∏è', aquaparks: 'üí¶', museums: 'üèõÔ∏è', nightmarkets: 'üåÉ',
      waterfalls: 'üíß', districts: 'üìç', excursions: 'üö§', attractions: 'üéØ',
      amusement: 'üé™', diving: 'ü§ø', fishing: 'üé£', yachts: '‚õµ',
      zoos: 'ü¶Å', clubs: 'üéâ', bars: 'üçª', events: 'üìÖ',
      massage: 'üíÜ‚Äç‚ôÄÔ∏è', sauna: 'üßñ', coffee: '‚òï'
    };
    
    // ‚ö° –ë–µ—Ä–µ–º –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ (26 –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
    return [
      { id: "all", label: "–í—Å–µ –º–µ—Å—Ç–∞", emoji: "üó∫Ô∏è" },
      ...getAllCategories().map((cat: CategoryConfig) => ({
        id: cat.id,
        label: cat.title.replace('–ü—Ö—É–∫–µ—Ç–∞', '').replace('–Ω–∞ –ü—Ö—É–∫–µ—Ç–µ', '').replace('–ü—Ö—É–∫–µ—Ç', '').trim(),
        emoji: categoryEmojiMap[cat.id] || 'üìç'
      }))
    ];
  }, []);

  // –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã)
  const popularCategories = useMemo(() => {
    const popularIds = ['all', 'shopping', 'beaches', 'temples', 'restaurants'];
    return allCategories.filter(cat => popularIds.includes(cat.id));
  }, [allCategories]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Google Maps URL - –í–ê–ñ–ù–û: —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ
  const generateMapUrl = useMemo(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –Ω–µ–º
    const highlightedPlace = selectedPlaceHandle 
      ? sortedPlaces.find(p => p.handle === selectedPlaceHandle)
      : null;

    if (highlightedPlace) {
      return `https://www.google.com/maps?q=${highlightedPlace.lat},${highlightedPlace.lng}&z=13&hl=ru`;
    }

    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –µ—Å—Ç—å –º–µ—Å—Ç–∞ - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ
    if (sortedPlaces.length > 0) {
      const firstPlace = sortedPlaces[0];
      return `https://www.google.com/maps?q=${firstPlace.lat},${firstPlace.lng}&z=11&hl=ru`;
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ü–µ–Ω—Ç—Ä –ü—Ö—É–∫–µ—Ç–∞
    return `https://www.google.com/maps?q=${centerLat},${centerLng}&z=11&hl=ru`;
  }, [sortedPlaces, selectedPlaceHandle, centerLat, centerLng]);

  // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –º–µ—Å—Ç–æ
  const handlePlaceClick = (place: PlaceMarker) => {
    navigate(`/place/${place.handle}`);
  };

  return (
    <div className="min-h-screen bg-background pb-24">
      {/* Sticky Header - Perplexity Minimalism + Telegram WebApp (iOS 26 Style) */}
      <div 
        className="sticky top-0 z-50 safe-area-inset-top"
        style={{
          background: 'rgba(255, 255, 255, 0.95)',
          backdropFilter: 'blur(40px) saturate(180%)',
          WebkitBackdropFilter: 'blur(40px) saturate(180%)',
          borderBottom: '1px solid rgba(0, 0, 0, 0.08)',
          boxShadow: '0 1px 8px rgba(0, 0, 0, 0.06)'
        }}
      >
        <div className="px-3 py-2">
          {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫ + —Å—á—ë—Ç—á–∏–∫ */}
          <div className="flex items-center justify-between mb-2">
            <h1 className="text-base font-bold text-gray-900">üó∫Ô∏è –ö–∞—Ä—Ç–∞</h1>
            <span className="text-xs text-gray-500 font-medium">
              {sortedPlaces.length} {sortedPlaces.filter(p => p.isPartner).length > 0 && `‚Ä¢ ${sortedPlaces.filter(p => p.isPartner).length} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤`}
            </span>
          </div>

          {/* –ü–æ–∏—Å–∫ –Ω–∞ –∫–∞—Ä—Ç–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω */}
          {searchQuery !== '' && (
            <div className="mb-2">
              <div className="relative">
                <Search className="w-3.5 h-3.5 absolute left-2.5 top-1/2 -translate-y-1/2 text-gray-400" />
                <input
                  type="text"
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  placeholder="–ü–æ–∏—Å–∫ –º–µ—Å—Ç–∞ –∏–ª–∏ —Ä–∞–π–æ–Ω–∞..."
                  autoFocus
                  className="w-full pl-8 pr-8 py-1.5 rounded-lg border border-gray-200 bg-white/90 text-xs min-h-[32px] focus:outline-none focus:ring-1 focus:ring-[#007AFF] focus:border-[#007AFF]"
                  style={{ fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Text", sans-serif' }}
                />
                {searchQuery.trim() && (
                  <button
                    onClick={() => setSearchQuery('')}
                    className="absolute right-2 top-1/2 -translate-y-1/2 p-1 rounded hover:bg-gray-100 transition-colors"
                  >
                    <X className="w-3 h-3 text-gray-400" />
                  </button>
                )}
              </div>
              {searchQuery.trim() && (
                <p className="text-[10px] text-gray-500 mt-1 px-1">
                  –ù–∞–π–¥–µ–Ω–æ: {filteredPlaces.length} {filteredPlaces.length === 1 ? '–º–µ—Å—Ç–æ' : '–º–µ—Å—Ç'}
                </p>
              )}
            </div>
          )}
          
          {/* –§–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Å–∫—Ä–æ–ª–ª–µ + –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é */}
          <div className="flex items-center gap-1.5 pb-1">
            {/* –í–°–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–º —Å–∫—Ä–æ–ª–ª–µ (–º–æ–∂–Ω–æ –ª–∏—Å—Ç–∞—Ç—å –ø–∞–ª—å—Ü–µ–º) */}
            <div className="flex gap-1.5 flex-1 overflow-x-auto" style={{ scrollbarWidth: 'none', msOverflowStyle: 'none', WebkitOverflowScrolling: 'touch' }}>
              {allCategories.map(cat => (
                <button
                  key={cat.id}
                  onClick={() => {
                    setSelectedCategory(cat.id);
                    setCategorySpecificFilter('all'); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    const newSearchParams = new URLSearchParams(searchParams);
                    if (cat.id === 'all') {
                      newSearchParams.delete('category');
                    } else {
                      newSearchParams.set('category', cat.id);
                    }
                    navigate(`/map?${newSearchParams.toString()}`, { replace: true });
                  }}
                  className={`flex items-center gap-1.5 px-3 py-1.5 rounded-full text-xs font-semibold whitespace-nowrap transition-all min-h-[36px] flex-shrink-0 ${
                    selectedCategory === cat.id
                      ? 'bg-[#007AFF] text-white shadow-md shadow-[#007AFF]/20'
                      : 'bg-white/90 text-gray-700 hover:bg-gray-50 active:bg-gray-100 border border-gray-200/60'
                  }`}
                  style={{
                    backdropFilter: selectedCategory === cat.id ? 'none' : 'blur(20px)',
                    WebkitBackdropFilter: selectedCategory === cat.id ? 'none' : 'blur(20px)',
                  }}
                >
                  <span className="text-sm leading-none">{cat.emoji}</span>
                  <span className="leading-tight">{cat.label}</span>
                </button>
              ))}
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ "–ï—â–µ" —Å –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
            <div className="relative flex-shrink-0">
              <button
                onClick={() => setIsCategoryMenuOpen(!isCategoryMenuOpen)}
                className={`flex items-center gap-1 px-3 py-1.5 rounded-full text-xs font-semibold min-h-[36px] transition-all ${
                  isCategoryMenuOpen
                    ? 'bg-[#007AFF] text-white shadow-md shadow-[#007AFF]/20'
                    : 'bg-white/90 text-gray-700 hover:bg-gray-50 active:bg-gray-100 border border-gray-200/60'
                }`}
                style={{
                  backdropFilter: isCategoryMenuOpen ? 'none' : 'blur(20px)',
                  WebkitBackdropFilter: isCategoryMenuOpen ? 'none' : 'blur(20px)',
                }}
              >
                <span>–ï—â–µ</span>
                <ChevronDown className={`w-3 h-3 transition-transform ${isCategoryMenuOpen ? 'rotate-180' : ''}`} />
              </button>

              {/* –í—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
              {isCategoryMenuOpen && (
                <>
                  {/* Overlay –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–µ–Ω—é */}
                  <div
                    className="fixed inset-0 z-40"
                    onClick={() => setIsCategoryMenuOpen(false)}
                  />
                  {/* –ú–µ–Ω—é - –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ, –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É (phuket-insider.com inspiration) */}
                  <div 
                    className="absolute top-full right-0 mt-1 w-[240px] max-h-[50vh] overflow-y-auto bg-white/98 backdrop-blur-xl rounded-xl shadow-lg border border-gray-200 z-50"
                    style={{
                      scrollbarWidth: 'thin',
                      scrollbarColor: '#007AFF transparent'
                    }}
                  >
                    <div className="p-1.5">
                      <div className="flex items-center justify-between px-2 py-1.5 mb-1">
                        <h3 className="text-xs font-bold text-gray-900">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
                        <button
                          onClick={() => setIsCategoryMenuOpen(false)}
                          className="w-5 h-5 rounded-full hover:bg-gray-100 flex items-center justify-center transition-colors"
                        >
                          <X className="w-3.5 h-3.5 text-gray-500" />
                        </button>
                      </div>
                      <div className="space-y-0.5 max-h-[45vh] overflow-y-auto">
                        {allCategories.map(cat => (
                          <button
                            key={cat.id}
                  onClick={() => {
                    setSelectedCategory(cat.id);
                    setCategorySpecificFilter('all'); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    const newSearchParams = new URLSearchParams(searchParams);
                    if (cat.id === 'all') {
                      newSearchParams.delete('category');
                    } else {
                      newSearchParams.set('category', cat.id);
                    }
                    navigate(`/map?${newSearchParams.toString()}`, { replace: true });
                  }}
                            className={`w-full flex items-center gap-1.5 px-2.5 py-2 rounded-lg text-xs font-medium transition-all ${
                              selectedCategory === cat.id
                                ? 'bg-[#007AFF] text-white'
                                : 'text-gray-700 hover:bg-gray-50 active:bg-gray-100'
                            }`}
                          >
                            <span className="text-sm">{cat.emoji}</span>
                            <span className="flex-1 text-left truncate">{cat.label}</span>
                            {selectedCategory === cat.id && (
                              <div className="w-1.5 h-1.5 rounded-full bg-white flex-shrink-0"></div>
                            )}
                          </button>
                        ))}
                      </div>
                    </div>
                  </div>
                </>
              )}
            </div>
          </div>
          
          {/* –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü–õ–Ø–ñ–ò: –Ω–∞–∑–≤–∞–Ω–∏—è –ø–ª—è–∂–µ–π –≤–º–µ—Å—Ç–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
          {selectedCategory === 'beaches' && beachesForFilter.length > 0 && (
            <div className="flex items-center gap-1.5 mt-2 overflow-x-auto pb-1" style={{ scrollbarWidth: 'none', msOverflowStyle: 'none', WebkitOverflowScrolling: 'touch' }}>
              <button
                onClick={() => {
                  setSelectedPlaceHandle(null);
                  setCategorySpecificFilter('all');
                }}
                className={`px-2.5 py-1 rounded-full text-[10px] font-semibold whitespace-nowrap transition-all min-h-[28px] flex-shrink-0 ${
                  selectedPlaceHandle === null
                    ? 'bg-[#007AFF] text-white shadow-sm'
                    : 'bg-white/90 text-gray-600 hover:bg-gray-50 border border-gray-200'
                }`}
              >
                –í—Å–µ
              </button>
              {beachesForFilter.map(beach => (
                <button
                  key={beach.handle}
                  onClick={() => {
                    setSelectedPlaceHandle(beach.handle);
                    setCategorySpecificFilter('all');
                  }}
                  className={`px-2.5 py-1 rounded-full text-[10px] font-semibold whitespace-nowrap transition-all min-h-[28px] flex-shrink-0 ${
                    selectedPlaceHandle === beach.handle
                      ? 'bg-[#007AFF] text-white shadow-sm'
                      : 'bg-white/90 text-gray-600 hover:bg-gray-50 border border-gray-200'
                  }`}
                  title={beach.district ? `${beach.title} (${beach.district})` : beach.title}
                >
                  {beach.title}
                </button>
              ))}
            </div>
          )}

          {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ù–ï –ø–ª—è–∂–∏) */}
          {hasSpecificFilters && categoryFilters.length > 0 && selectedCategory !== 'all' && selectedCategory !== 'beaches' && (
            <div className="flex items-center gap-1.5 mt-2 overflow-x-auto pb-1" style={{ scrollbarWidth: 'none', msOverflowStyle: 'none', WebkitOverflowScrolling: 'touch' }}>
              <div className="flex items-center gap-1 flex-shrink-0">
                <Filter className="w-3 h-3 text-gray-400" />
                <span className="text-[10px] text-gray-500 font-medium">
                  {allCategories.find(c => c.id === selectedCategory)?.label || '–§–∏–ª—å—Ç—Ä—ã'}:
                </span>
              </div>
              {categoryFilters.map(filter => (
                <button
                  key={filter.id}
                  onClick={() => setCategorySpecificFilter(filter.id)}
                  className={`px-2.5 py-1 rounded-full text-[10px] font-semibold whitespace-nowrap transition-all min-h-[28px] flex-shrink-0 flex items-center gap-1 ${
                    categorySpecificFilter === filter.id
                      ? 'bg-[#007AFF] text-white shadow-sm'
                      : 'bg-white/90 text-gray-600 hover:bg-gray-50 border border-gray-200'
                  }`}
                >
                  {filter.icon && <span className="text-xs">{filter.icon}</span>}
                  <span>{filter.label}</span>
                </button>
              ))}
            </div>
          )}
          
          {/* –§–∏–ª—å—Ç—Ä—ã: –†–ê–ô–û–ù–´ –°–õ–ï–í–ê (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª) + –†–ï–ô–¢–ò–ù–ì–ò –°–ü–†–ê–í–ê (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª) */}
          <div className="flex items-center gap-1.5 mt-2 overflow-x-auto pb-1" style={{ scrollbarWidth: 'none', msOverflowStyle: 'none', WebkitOverflowScrolling: 'touch' }}>
            {/* –†–ê–ô–û–ù–´ - –°–õ–ï–í–ê (—Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤!) - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª */}
            <div className="flex items-center gap-1 flex-shrink-0">
              <MapPin className="w-3 h-3 text-gray-400" />
              <span className="text-[10px] text-gray-500 font-medium">–†–∞–π–æ–Ω:</span>
            </div>
            <button
              onClick={() => setDistrictFilter('all')}
              className={`px-2.5 py-1 rounded-full text-[10px] font-semibold whitespace-nowrap transition-all min-h-[28px] flex-shrink-0 ${
                districtFilter === 'all'
                  ? 'bg-[#007AFF] text-white shadow-sm'
                  : 'bg-white/90 text-gray-600 hover:bg-gray-50 border border-gray-200'
              }`}
            >
              –í—Å–µ
            </button>
            {/* –í—Å–µ —Ä–∞–π–æ–Ω—ã (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª) - —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ */}
            {availableDistricts.map(districtId => {
              const districtName = getDistrictNameRu(districtId);
              return (
                <button
                  key={districtId}
                  onClick={() => setDistrictFilter(districtId)}
                  className={`px-2.5 py-1 rounded-full text-[10px] font-semibold whitespace-nowrap transition-all min-h-[28px] flex-shrink-0 ${
                    districtFilter === districtId
                      ? 'bg-[#007AFF] text-white shadow-sm'
                      : 'bg-white/90 text-gray-600 hover:bg-gray-50 border border-gray-200'
                  }`}
                >
                  {districtName}
                </button>
              );
            })}
            
            {/* –†–ï–ô–¢–ò–ù–ì–ò - –°–ü–†–ê–í–ê (–≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª) */}
            {availableDistricts.length > 0 && (
              <div className="w-px h-4 bg-gray-300 mx-1 flex-shrink-0" />
            )}
            <div className="flex items-center gap-1 flex-shrink-0">
              <Filter className="w-3 h-3 text-gray-400" />
              <span className="text-[10px] text-gray-500 font-medium">–†–µ–π—Ç–∏–Ω–≥:</span>
            </div>
            {['all', '4.0', '4.5', '4.7', '5.0'].map(rating => (
              <button
                key={rating}
                onClick={() => setRatingFilter(rating as any)}
                className={`px-2.5 py-1 rounded-full text-[10px] font-semibold whitespace-nowrap transition-all min-h-[28px] flex-shrink-0 ${
                  ratingFilter === rating
                    ? 'bg-[#007AFF] text-white shadow-sm'
                    : 'bg-white/90 text-gray-600 hover:bg-gray-50 border border-gray-200'
                }`}
              >
                {rating === 'all' ? '–í—Å–µ' : `‚≠ê ${rating}+`}
              </button>
            ))}
          </div>
          
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞) */}
          {selectedCategory !== "all" && (
            <div className="mt-2 p-2 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg border border-blue-100/50">
              <div className="flex items-center justify-between text-xs">
                <div className="flex items-center gap-2">
                  <span className="text-lg">{allCategories.find(c => c.id === selectedCategory)?.emoji}</span>
                  <div>
                    <div className="font-bold text-gray-900">
                      {allCategories.find(c => c.id === selectedCategory)?.label}
                    </div>
                    <div className="text-gray-600">
                      {filteredPlaces.length} –º–µ—Å—Ç ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {
                        filteredPlaces.length > 0
                          ? (filteredPlaces.reduce((sum, p) => sum + parseFloat(p.rating || "0"), 0) / filteredPlaces.length).toFixed(1)
                          : "‚Äî"
                      }
                    </div>
                  </div>
                </div>
                <Link
                  to={`/category/${selectedCategory}`}
                  className="text-[#007AFF] font-semibold hover:underline flex items-center gap-1"
                >
                  –í—Å–µ –º–µ—Å—Ç–∞ ‚Üí
                </Link>
              </div>
            </div>
          )}
        </div>
      </div>

      {loading ? (
        <div className="flex items-center justify-center py-32">
          <Loader2 className="w-8 h-8 animate-spin text-[#007AFF]" />
        </div>
      ) : (
        // –ö–∞—Ä—Ç–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å—ë –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ (Perplexity: –∫–∞—Ä—Ç–∞ = –≥–ª–∞–≤–Ω–æ–µ)
        <div className="relative h-[calc(100vh-140px)]">
          {/* –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ Leaflet + OpenStreetMap */}
          <LeafletMap 
            places={sortedPlaces}
            selectedPlaceHandle={selectedPlaceHandle}
            onPlaceClick={(place) => handlePlaceClick(place)}
          />

          {/* –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º—ã–π –ª–∏—Å—Ç (iOS 26 Style) */}
          <div 
            className={`absolute left-4 right-4 bg-white/95 backdrop-blur-xl rounded-2xl shadow-2xl border border-gray-100 transition-all duration-300 overflow-hidden ${
              isListExpanded 
                ? 'bottom-4 max-h-[60vh]' 
                : 'bottom-4 max-h-[48px]' // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 60px –¥–æ 48px –¥–ª—è –º–µ–Ω—å—à–µ–≥–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –∫–∞—Ä—Ç—ã
            }`}
          >
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è */}
            <button
              onClick={() => setIsListExpanded(!isListExpanded)}
              className={`w-full flex items-center justify-between hover:bg-gray-50/50 transition-colors ${
                isListExpanded 
                  ? 'p-3 border-b border-gray-100' 
                  : 'p-2' // –ú–µ–Ω—å—à–∏–π padding –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
              }`}
            >
              <div className="flex-1 text-left min-w-0">
                <h3 className={`font-bold text-gray-900 truncate ${
                  isListExpanded ? 'text-sm' : 'text-xs' // –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                }`}>
                  {selectedCategory === "all" 
                    ? `–í—Å–µ –º–µ—Å—Ç–∞ (${sortedPlaces.length})`
                    : `${allCategories.find(c => c.id === selectedCategory)?.label || '–ú–µ—Å—Ç–∞'} (${sortedPlaces.length})`
                  }
                </h3>
                {!isListExpanded && sortedPlaces.filter(p => p.isPartner).length > 0 && (
                  <p className="text-[10px] text-[#007AFF] font-medium mt-0.5 truncate">
                    ‚≠ê {sortedPlaces.filter(p => p.isPartner).length} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
                  </p>
                )}
              </div>
              <div className="flex items-center gap-2">
                {/* –£–ë–†–ê–ù–û: –ö–Ω–æ–ø–∫–∞ "–¢–æ–ø" (–ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤) */}
                <MapPin className={`w-4 h-4 text-gray-400 transition-transform ${isListExpanded ? 'rotate-180' : ''}`} />
              </div>
            </button>

            {/* –£–ë–†–ê–ù–û: –°–µ–∫—Ü–∏—è "–¢–æ–ø-N –º–µ—Å—Ç" (–ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤) */}
            
            {/* –°–ø–∏—Å–æ–∫ –º–µ—Å—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ */}
            {isListExpanded && (
              <div className="overflow-y-auto p-3 max-h-[calc(60vh-60px)]">
                <div className="space-y-2">
                  {sortedPlaces.slice(0, 20).map((place) => (
                    <button
                      key={place.handle}
                      onClick={() => handlePlaceClick(place)}
                      className={`w-full text-left p-3 rounded-xl transition-all duration-200 border-2 ${
                        place.handle === selectedPlaceHandle
                          ? 'bg-[#007AFF] text-white border-[#007AFF] shadow-lg scale-105'
                          : place.isPartner
                          ? 'bg-[#007AFF]/10 border-[#007AFF] shadow-md'
                          : 'bg-gray-50 border-transparent hover:bg-gray-100 hover:border-gray-200'
                      }`}
                    >
                      <div className="flex items-start gap-3">
                        <div className="text-2xl flex-shrink-0">{place.emoji}</div>
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            <h4 className={`font-semibold text-sm truncate ${
                              place.handle === selectedPlaceHandle ? 'text-white' : 'text-gray-900'
                            }`}>
                              {place.title}
                            </h4>
                            {place.isPartner && (
                              <span className={`px-2 py-0.5 text-xs font-bold rounded-full ${
                                place.handle === selectedPlaceHandle
                                  ? 'bg-white text-[#007AFF]'
                                  : 'bg-[#007AFF] text-white'
                              }`}>
                                –ü–∞—Ä—Ç–Ω–µ—Ä
                              </span>
                            )}
                          </div>
                          <div className={`flex items-center gap-3 text-xs ${
                            place.handle === selectedPlaceHandle ? 'text-white/90' : 'text-gray-500'
                          }`}>
                            {place.rating && (
                              <span className="flex items-center gap-1">
                                <Star className="w-3 h-3 fill-yellow-400 text-yellow-400" />
                                {place.rating}
                              </span>
                            )}
                            {place.district && (
                              <span className="flex items-center gap-1">
                                <MapPin className="w-3 h-3" />
                                {place.district}
                              </span>
                            )}
                          </div>
                        </div>
                        <svg className="w-5 h-5 text-gray-400 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Legend - –ü–∞—Ä—Ç–Ω–µ—Ä—ã */}
          {sortedPlaces.filter(p => p.isPartner).length > 0 && (
            <div className="absolute top-4 right-4 bg-white/95 backdrop-blur-xl rounded-xl shadow-lg border border-gray-100 p-3">
              <div className="flex items-center gap-2 mb-2">
                <div className="w-4 h-4 rounded-full bg-[#007AFF]"></div>
                <span className="text-xs font-semibold text-gray-900">–ü–∞—Ä—Ç–Ω–µ—Ä—ã</span>
              </div>
              <p className="text-xs text-gray-500">
                –ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ã –≤—ã–¥–µ–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–µ
              </p>
            </div>
          )}
        </div>
      )}

      {/* Info Block - Perplexity Style */}
      <div className="container mx-auto px-4 py-6">
        <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-6 border border-blue-100/50">
          <h3 className="text-lg font-semibold text-gray-900 mb-3">üíé –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞</h3>
          <p className="text-sm text-gray-700 mb-2">
            –í—Å–µ –ª—É—á—à–∏–µ –º–µ—Å—Ç–∞ –ü—Ö—É–∫–µ—Ç–∞ –Ω–∞ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ. <strong>–ë–µ—Å–ø–ª–∞—Ç–Ω–æ</strong> ‚Äî –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –ø—Ä–æ–¥–∞—é—Ç —Ç–∞–∫–∏–µ –∫–∞—Ä—Ç—ã, –º—ã –¥–µ–ª–∞–µ–º –∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö!
          </p>
          <p className="text-xs text-gray-600">
            ‚≠ê –ü–∞—Ä—Ç–Ω–µ—Ä—ã –≤—ã–¥–µ–ª–µ–Ω—ã —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à–∏—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤!
          </p>
        </div>
      </div>
    </div>
  );
};

export default Map;

