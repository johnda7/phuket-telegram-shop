// –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ live coding (–≤–∞–π–±–∫–æ–¥–∏–Ω–≥)!
// –ê–≥–µ–Ω—Ç –≤—Å–µ–≥–¥–∞ —Å–∞–º –∏—â–µ—Ç –∏ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫–∏, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–µ—Ç–∞–ª—è—Ö, –Ω–µ –ø—Ä–æ—Å–∏—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ –ª–æ–≥–∏ ‚Äî —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –∞–≤—Ç–æ—Ñ–∏–∫—Å—ã.
// –õ—é–±—ã–µ –±–∞–≥–∏, –±–µ–ª—ã–π —ç–∫—Ä–∞–Ω, –æ—à–∏–±–∫–∏ ‚Äî –∞–≥–µ–Ω—Ç –æ–±—è–∑–∞–Ω —Å–∞–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –Ω–µ –ø–µ—Ä–µ–∫–ª–∞–¥—ã–≤–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
// –í—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ ‚Äî –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ vibe/live coding, –±–µ–∑ —Ä—É—á–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

/**
 * üóÇÔ∏è –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –ö–ê–¢–ï–ì–û–†–ò–ò
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç:
 * - config/categories.ts –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
 * - styles/design-system.ts –¥–ª—è —Å—Ç–∏–ª–µ–π
 * - config/services.ts –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
 * 
 * –§–∏–ª–æ—Å–æ—Ñ–∏—è:
 * - 100% –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –õ–Æ–ë–û–ô –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
 * - –§–∏–ª—å—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ —Ç–µ–≥–æ–≤
 * - Design System –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 * - Telegram Wallet —Å—Ç–∏–ª—å
 */

import { useEffect, useState, useMemo } from "react";
import { useParams, Link } from "react-router-dom";
import { Loader2, ArrowLeft, MapPin, Star } from "lucide-react";
import { fetchProductsByCategory, type ShopifyProduct } from "@/lib/shopify";
import { getCategoryConfig, categoryExists } from "@/config/categories";
import { getAllServices } from "@/config/services";
import { getButtonClass, getCardClass, cn } from "@/styles/design-system";
import DaBot from "@/components/DaBot";
import { PlaceCard } from "@/components/PlaceCard";

const CategoryPageDynamic = () => {
  const { categoryId } = useParams<{ categoryId: string }>();
  const [products, setProducts] = useState<ShopifyProduct[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedDistrict, setSelectedDistrict] = useState<string>("all");
  
  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π!)
  const config = categoryId && categoryExists(categoryId) 
    ? getCategoryConfig(categoryId) 
    : null;

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π!)
  const services = getAllServices();

  useEffect(() => {
    const loadProducts = async () => {
      if (!categoryId) return;
      
      try {
        setLoading(true);
        const data = await fetchProductsByCategory(categoryId);
        setProducts(data);
      } catch (err) {
        console.error('Failed to load products:', err);
      } finally {
        setLoading(false);
      }
    };

    loadProducts();
  }, [categoryId]);

  // –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò –∏–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–π–æ–Ω—ã –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (–ù–ï —Ö–∞—Ä–¥–∫–æ–¥!)
  const availableDistricts = useMemo(() => {
    const districts = new Set<string>();
    products.forEach(product => {
      const tags = product.node.tags || [];
      tags.forEach(tag => {
        if (tag.startsWith('district:')) {
          districts.add(tag.replace('district:', ''));
        }
      });
    });
    return Array.from(districts).sort();
  }, [products]);

  // –ú–∞–ø–ø–∏–Ω–≥ district ID ‚Üí –†—É—Å—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
  const districtNames: Record<string, string> = {
    Patong: '–ü–∞—Ç–æ–Ω–≥',
    Karon: '–ö–∞—Ä–æ–Ω',
    Kata: '–ö–∞—Ç–∞',
    Chalong: '–ß–∞–ª–æ–Ω–≥',
    Rawai: '–†–∞–≤–∞–∏',
    Kamala: '–ö–∞–º–∞–ª–∞',
    Kathu: '–ö–∞—Ç—Ö—É',
    Thalang: '–¢—Ö–∞–ª–∞–Ω–≥',
    PhuketTown: '–ü—Ö—É–∫–µ—Ç –¢–∞—É–Ω',
    Cherngtalay: '–ß–µ—Ä–Ω–≥—Ç–∞–ª–∞–π',
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const filteredProducts = useMemo(() => {
    return products.filter(product => {
      const productTags = product.node.tags || [];
      
      // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω—É
      if (selectedDistrict !== "all") {
        const hasDistrict = productTags.some(tag => 
          tag === `district:${selectedDistrict}` || tag === selectedDistrict
        );
        if (!hasDistrict) return false;
      }
      
      return true;
    });
  }, [products, selectedDistrict]);

  // –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ (–µ—Å–ª–∏ –±—É–¥–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å metafields)
  const averageRating = "4.2 - 4.7"; // TODO: –≤—ã—á–∏—Å–ª—è—Ç—å –∏–∑ metafields –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–∏–º

  if (!config) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
          <p className="text-gray-600 mb-6">–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ</p>
          <Link 
            to="/categories" 
            className={getButtonClass('primary')}
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
          </Link>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader2 className="w-8 h-8 animate-spin text-[#007AFF]" />
      </div>
    );
  }

  return (
    <>
      <div className="min-h-screen pb-24">
        {/* –î–ê –ë–û–¢ - AI –∫–æ–Ω—Å—å–µ—Ä–∂ –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ–∑–¥–µ! */}
        <DaBot />
        
        {/* Sticky Navigation Header - iOS 26 Style */}
        <div className="sticky top-0 z-50 bg-white/80 backdrop-blur-md border-b border-gray-100">
          <div className="container mx-auto px-4 py-3">
            <div className="flex items-center gap-3">
              <Link
                to="/categories"
                className="flex items-center gap-2 text-[#007AFF] hover:text-[#0051D5] transition-colors"
              >
                <ArrowLeft className="w-5 h-5" />
                <span className="font-medium">–ù–∞–∑–∞–¥</span>
              </Link>
            </div>
            
            {/* Breadcrumbs - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ */}
            <nav className="flex items-center gap-1.5 text-xs text-gray-500 mt-2">
              {config.breadcrumbs.map((crumb, index) => (
                <div key={index} className="flex items-center gap-1.5">
                  {index > 0 && <span>‚Ä¢</span>}
                  {crumb.path ? (
                    <Link to={crumb.path} className="hover:text-[#007AFF] transition-colors">
                      {crumb.label}
                    </Link>
                  ) : (
                    <span className="text-gray-900 font-medium">{crumb.label}</span>
                  )}
                </div>
              ))}
            </nav>
          </div>
        </div>
        
        {/* Hero - iOS 26 Style - —Ç–æ–ª—å–∫–æ #007AFF */}
        <div className="relative overflow-hidden py-12 bg-[#007AFF]">
          <div className="container mx-auto px-4 text-center">
            {/* Title */}
            <h1 className="text-3xl md:text-4xl font-bold text-white mb-3">
              {config.title}
            </h1>
            
            {/* Stats - Telegram Style —Å –∏–∫–æ–Ω–∫–∞–º–∏ Lucide */}
            <div className="flex items-center justify-center gap-4 text-white/90 text-sm">
              <span className="flex items-center gap-1.5">
                <MapPin className="w-4 h-4" />
                <span className="font-medium">{filteredProducts.length} {filteredProducts.length === 1 ? '–º–µ—Å—Ç–æ' : '–º–µ—Å—Ç'}</span>
              </span>
              <span className="flex items-center gap-1.5">
                <Star className="w-4 h-4 fill-white/90" />
                <span className="font-medium">{averageRating}</span>
              </span>
            </div>
          </div>
        </div>

        <div className="container mx-auto px-4 py-6">
          {/* Description - –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —á–µ—Ä–µ–∑ Design System */}
          <div className={cn(getCardClass('glass'), "mb-6")}>
            <p className="text-sm text-gray-700 leading-relaxed">
              {config.description}
            </p>
          </div>

          {/* Filters - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–∞–π–æ–Ω—ã —á–µ—Ä–µ–∑ Design System */}
          {config.filters.showDistricts && availableDistricts.length > 0 && (
            <div className="mb-6">
              <div className="flex gap-2 overflow-x-auto pb-2 scrollbar-hide">
                {/* –í—Å–µ —Ä–∞–π–æ–Ω—ã */}
                <button
                  onClick={() => setSelectedDistrict("all")}
                  className={cn(
                    "flex-shrink-0 px-4 py-2 rounded-full text-sm font-medium transition-all duration-200",
                    selectedDistrict === "all"
                      ? "bg-[#007AFF] text-white shadow-md"
                      : "bg-white/70 backdrop-blur-md text-gray-700 border border-gray-200 hover:border-[#007AFF]/50"
                  )}
                >
                  –í—Å–µ —Ä–∞–π–æ–Ω—ã
                </button>

                {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–∞–π–æ–Ω—ã –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ */}
                {availableDistricts.map(district => (
                  <button
                    key={district}
                    onClick={() => setSelectedDistrict(district)}
                    className={cn(
                      "flex-shrink-0 px-4 py-2 rounded-full text-sm font-medium transition-all duration-200",
                      selectedDistrict === district
                        ? "bg-[#007AFF] text-white shadow-md"
                        : "bg-white/70 backdrop-blur-md text-gray-700 border border-gray-200 hover:border-[#007AFF]/50"
                    )}
                  >
                    {districtNames[district] || district}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Products Grid - –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ */}
          <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 mb-8">
            {filteredProducts.map((product) => (
              <PlaceCard key={product.node.id} product={product.node} />
            ))}
          </div>

          {/* –ù–ê–®–ò –°–ï–†–í–ò–°–´ - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–∑ config/services.ts */}
          {filteredProducts.length > 0 && (
            <div className="mb-12">
              <h3 className="text-sm font-semibold text-gray-500 mb-3 uppercase tracking-wide">
                –ù–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã
              </h3>
              
              <div className={cn(getCardClass('default'), "p-0")}>
                {services.map((service, index) => (
                  <Link
                    key={service.id}
                    to={service.path}
                    className={cn(
                      "flex items-center justify-between p-4 hover:bg-gray-50 active:bg-gray-100 transition-colors",
                      index < services.length - 1 && "border-b border-gray-100"
                    )}
                  >
                    <div className="flex items-center gap-3 flex-1">
                      <div className={cn("w-10 h-10 rounded-xl flex items-center justify-center", service.bgColor)}>
                        <service.icon className={cn("w-5 h-5", service.iconColor)} />
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold text-gray-900 text-sm">{service.title}</div>
                        <div className="text-xs text-gray-500">{service.subtitle}</div>
                      </div>
                    </div>
                    <svg className="w-5 h-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </Link>
                ))}
              </div>
            </div>
          )}

          {/* Empty State - —á–µ—Ä–µ–∑ Design System */}
          {filteredProducts.length === 0 && (
            <div className="text-center py-16">
              <div className="w-24 h-24 mx-auto mb-6 bg-gray-100 rounded-full flex items-center justify-center">
                <config.icon className={cn("w-12 h-12", config.iconColor)} />
              </div>
              <h3 className="text-xl font-bold mb-2">
                {selectedDistrict !== "all" 
                  ? "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" 
                  : "–ú–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è"
                }
              </h3>
              <p className="text-gray-600 mb-6">
                {selectedDistrict !== "all"
                  ? "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Ö"
                  : `–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –º–µ—Å—Ç –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "${config.title}"`
                }
              </p>
              {selectedDistrict !== "all" && (
                <button
                  onClick={() => setSelectedDistrict("all")}
                  className={getButtonClass('primary')}
                >
                  –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                </button>
              )}
            </div>
          )}
        </div>
      </div>
    </>
  );
}

export default CategoryPageDynamic;
