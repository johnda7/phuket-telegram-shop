#!/usr/bin/env node

/**
 * üåê –ü–û–õ–£–ß–ï–ù–ò–ï –¢–£–†–û–í –ò–ó GITHUB –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø –ß–ï–†–ï–ó API
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
 * –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ
 */

const https = require('https');

const GITHUB_REPO = 'johnda7/island-travel-echo-clone';
const GITHUB_API_BASE = 'api.github.com';

// Shopify credentials
const SHOPIFY_STORE = 'phuket-telegram-shop-117ck.myshopify.com';
const ADMIN_TOKEN = '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';
const API_VERSION = '2025-07';

const APPLY = process.argv.includes('--apply');

console.log('üåê –ü–û–õ–£–ß–ï–ù–ò–ï –¢–£–†–û–í –ò–ó GITHUB');
console.log(`üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${GITHUB_REPO}`);
console.log(`‚öôÔ∏è  –†–µ–∂–∏–º: ${APPLY ? 'APPLY' : 'DRY-RUN'}\n`);

// ============================================================================
// GITHUB API HELPERS
// ============================================================================

function githubRequest(path) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: GITHUB_API_BASE,
      path: `/repos/${GITHUB_REPO}${path}`,
      headers: {
        'User-Agent': 'Node.js',
        'Accept': 'application/vnd.github.v3+json',
      },
    };
    
    https.get(options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        if (res.statusCode !== 200) {
          reject(new Error(`GitHub API error: ${res.statusCode} - ${data}`));
        } else {
          try {
            resolve(JSON.parse(data));
          } catch (e) {
            reject(e);
          }
        }
      });
    }).on('error', reject);
  });
}

async function getFileContent(path) {
  try {
    const data = await githubRequest(`/contents/${path}`);
    // –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∞–π–ª, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º base64
    if (data.type === 'file' && data.content) {
      return Buffer.from(data.content, 'base64').toString('utf8');
    }
    return null;
  } catch (error) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${path}:`, error.message);
    return null;
  }
}

async function listDirectory(path) {
  try {
    const data = await githubRequest(`/contents/${path}`);
    if (Array.isArray(data)) {
      return data;
    }
    return [];
  } catch (error) {
    return [];
  }
}

// ============================================================================
// –ü–ê–†–°–ò–ù–ì –¢–£–†–û–í
// ============================================================================

function extractTourFromFile(content, fileName) {
  const tour = {
    title: '',
    description: '',
    priceAdult: 0,
    priceChild: 0,
    duration: '',
    tags: ['tour'],
    images: [],
  };
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Ç—É—Ä–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  const tourId = fileName.replace(/\.(tsx?|jsx?)$/, '').toLowerCase();
  
  // –ü–∞—Ä—Å–∏–º title –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const titlePatterns = [
    // –ò–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã: const tourData = { title: "..." }
    /(?:const|export\s+const)\s+\w+TourData?\s*[=:]\s*\{[^}]*title:\s*['"]([^'"]+)['"]/i,
    // –ò–∑ JSX: <h1>...</h1>
    /<h1[^>]*>([^<]+)<\/h1>/i,
    // –ò–∑ title –≤ –æ–±—ä–µ–∫—Ç–µ
    /title:\s*['"]([^'"]+)['"]/i,
    // –ò–∑ useMetaTags
    /useMetaTags\([^)]*title:\s*['"]([^'"]+)['"]/i,
  ];
  
  for (const pattern of titlePatterns) {
    const match = content.match(pattern);
    if (match && match[1] && match[1].length > 3 && !match[1].includes('{')) {
      tour.title = match[1].trim();
      break;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CamelCase –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
  if (!tour.title || tour.title.length < 3) {
    const fileNameClean = fileName
      .replace(/\.tsx?$/, '')
      .replace(/New$/, '')
      .replace(/Tour$/, '');
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CamelCase –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    const readable = fileNameClean
      .replace(/([A-Z])/g, ' $1')
      .replace(/^./, str => str.toUpperCase())
      .trim();
    
    if (readable.length > 5) {
      tour.title = readable;
    }
  }
  
  // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—ã - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const pricePatterns = [
    // –ò–∑ –æ–±—ä–µ–∫—Ç–∞: priceAdult: 4800
    /priceAdult:\s*(\d+)/i,
    // –ò–∑ –æ–±—ä–µ–∫—Ç–∞: adultPrice: 4800
    /adultPrice:\s*(\d+)/i,
    // –ò–∑ –æ–±—ä–µ–∫—Ç–∞: price_adult: 4800
    /price_adult:\s*(\d+)/i,
    // –ò–∑ —Å—Ç—Ä–æ–∫–∏: "–í–∑—Ä–æ—Å–ª—ã–π: 4800"
    /–≤–∑—Ä–æ—Å–ª—ã–π[:\s]+(\d+)/i,
    // –ò–∑ JSX: <span>4800</span> —Ä—è–¥–æ–º —Å "–≤–∑—Ä–æ—Å–ª—ã–π"
    /–≤–∑—Ä–æ—Å–ª—ã–π[^<]*<[^>]*>(\d+)/i,
  ];
  
  for (const pattern of pricePatterns) {
    const match = content.match(pattern);
    if (match && parseInt(match[1]) > 500) { // –ú–∏–Ω–∏–º—É–º 500 –±–∞—Ç
      tour.priceAdult = parseInt(match[1]);
      break;
    }
  }
  
  const childPricePatterns = [
    /priceChild:\s*(\d+)/i,
    /childPrice:\s*(\d+)/i,
    /price_child:\s*(\d+)/i,
    /–¥–µ—Ç—Å–∫–∏–π[:\s]+(\d+)/i,
    /—Ä–µ–±—ë–Ω–æ–∫[:\s]+(\d+)/i,
  ];
  
  for (const pattern of childPricePatterns) {
    const match = content.match(pattern);
    if (match && parseInt(match[1]) > 300) {
      tour.priceChild = parseInt(match[1]);
      break;
    }
  }
  
  // –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  const durationMatch = content.match(/(?:duration|length):\s*['"]([^'"]+)['"]/i);
  if (durationMatch) {
    tour.duration = durationMatch[1];
  }
  
  // –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
  const descPatterns = [
    /description:\s*['"`]([^'"`]+)['"`]/i,
    /<p[^>]*>([^<]+)<\/p>/i,
  ];
  
  for (const pattern of descPatterns) {
    const match = content.match(pattern);
    if (match && match[1].length > 20) {
      tour.description = match[1].trim();
      break;
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  if (tourId.includes('phiphi') || tourId.includes('phi-phi')) {
    if (tourId.includes('2') || tourId.includes('night')) {
      tour.tags.push('islands', 'phi-phi', '2-days', 'popular');
      if (!tour.duration) tour.duration = '2 –¥–Ω—è / 1 –Ω–æ—á—å';
      if (!tour.priceAdult) tour.priceAdult = 4500;
    } else {
      tour.tags.push('islands', 'phi-phi', '1-day');
      if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
      if (!tour.priceAdult) tour.priceAdult = 1800;
    }
  } else if (tourId.includes('james') && tourId.includes('bond')) {
    tour.tags.push('islands', 'james-bond', 'phang-nga', '1-day', 'popular');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1400;
  } else if (tourId.includes('similan')) {
    tour.tags.push('islands', 'similan', '1-day', 'snorkeling', 'diving', 'popular');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2500;
  } else if (tourId.includes('racha') && tourId.includes('coral')) {
    tour.tags.push('islands', 'racha', 'coral', '1-day', 'snorkeling');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1800;
  } else if (tourId.includes('pearl') && tourId.includes('andaman')) {
    tour.tags.push('islands', '4-pearls', 'andaman', '1-day', 'snorkeling', 'popular');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2000;
  } else if (tourId.includes('eleven') || tourId.includes('11')) {
    tour.tags.push('islands', '11-islands', 'phang-nga', '1-day', 'popular');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 4200;
  } else if (tourId.includes('rafting') && tourId.includes('atv')) {
    tour.tags.push('adventures', 'rafting', 'atv', 'spa', 'elephants', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1700;
  } else if (tourId.includes('kaolak') || tourId.includes('kao-lak')) {
    tour.tags.push('elephants', 'safari', 'jungle', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1300;
  } else if (tourId.includes('avatar')) {
    tour.tags.push('adventure', 'zipline', 'elephants', 'jungle', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1800;
  } else if (tourId.includes('cheolan') || tourId.includes('cheo-lan')) {
    tour.tags.push('lake', 'nature', 'khao-sok', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2200;
  } else if (tourId.includes('phangnga') || tourId.includes('phang-nga')) {
    if (tourId.includes('skywalk')) {
      tour.tags.push('phang-nga', 'skywalk', 'viewpoint', '1-day');
      if (!tour.priceAdult) tour.priceAdult = 1500;
    } else {
      tour.tags.push('islands', 'phang-nga', '1-day');
      if (!tour.priceAdult) tour.priceAdult = 1800;
    }
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
  } else if (tourId.includes('krabi')) {
    tour.tags.push('islands', 'krabi', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2000;
  } else if (tourId.includes('fishing')) {
    tour.tags.push('fishing', 'sunrise', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2500;
  } else if (tourId.includes('dostoprimechatelnosti')) {
    tour.tags.push('attractions', 'culture', 'temples', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1500;
  } else {
    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç—É—Ä–æ–≤
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2000;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ç–µ–≥–∞–º
  if (!tour.duration) {
    if (tour.tags.includes('2-days')) {
      tour.duration = '2 –¥–Ω—è / 1 –Ω–æ—á—å';
    } else {
      tour.duration = '1 –¥–µ–Ω—å';
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ title, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
  if (!tour.title) {
    tour.title = tourId
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ü–µ–Ω—É, —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
  if (!tour.priceAdult) {
    tour.priceAdult = 2000; // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è —Ü–µ–Ω–∞
  }
  
  return tour;
}

// ============================================================================
// –ü–û–õ–£–ß–ï–ù–ò–ï –¢–£–†–û–í –ò–ó SHOPIFY
// ============================================================================

async function makeGraphQLRequest(query, variables = {}) {
  return new Promise((resolve, reject) => {
    const req = https.request({
      method: 'POST',
      hostname: SHOPIFY_STORE,
      path: `/admin/api/${API_VERSION}/graphql.json`,
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': ADMIN_TOKEN,
      },
    }, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const data = JSON.parse(body);
          if (data.errors) {
            reject(new Error(JSON.stringify(data.errors)));
          } else {
            resolve(data.data);
          }
        } catch (e) {
          reject(e);
        }
      });
    });
    req.on('error', reject);
    req.write(JSON.stringify({ query, variables }));
    req.end();
  });
}

async function getExistingTours() {
  console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä—ã –∏–∑ Shopify...');
  
  const query = `
    query GetTours($first: Int!, $after: String) {
      products(first: $first, after: $after, query: "product_type:Excursions") {
        edges {
          node {
            handle
            title
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  `;
  
  const allTours = [];
  let after = null;
  
  do {
    const data = await makeGraphQLRequest(query, { first: 100, after });
    const { edges, pageInfo } = data.products;
    allTours.push(...edges.map(e => e.node));
    after = pageInfo.hasNextPage ? pageInfo.endCursor : null;
  } while (after);
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤ –≤ Shopify: ${allTours.length}`);
  return new Set(allTours.map(t => t.handle.toLowerCase()));
}

// ============================================================================
// –°–û–ó–î–ê–ù–ò–ï –¢–£–†–ê –í SHOPIFY
// ============================================================================

function generateHandle(title) {
  return title
    .toLowerCase()
    .replace(/[^\w\s-]/g, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .trim();
}

function generatePremiumDescription(tour) {
  return `
<h1>${tour.title}</h1>

<p><strong>üéØ –û —Ç—É—Ä–µ:</strong><br>
${tour.description || '–ù–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –ª—É—á—à–∏–º –º–µ—Å—Ç–∞–º –ü—Ö—É–∫–µ—Ç–∞!'}</p>

${tour.duration ? `<p><strong>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${tour.duration}</p>` : ''}

<h2>‚ú® –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç</h2>
<ul>
<li>‚úì –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –≥–∏–¥</li>
<li>‚úì –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –∏–∑ –æ—Ç–µ–ª—è –∏ –æ–±—Ä–∞—Ç–Ω–æ</li>
<li>‚úì –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</li>
<li>‚úì –°—Ç—Ä–∞—Ö–æ–≤–∫–∞</li>
</ul>

<h2>üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä</h2>
<p>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ <a href="https://t.me/PHUKETDABOT">Telegram</a> –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!</p>
  `.trim();
}

async function createTourInShopify(tour) {
  const handle = generateHandle(tour.title);
  
  const mutation = `
    mutation CreateProduct($input: ProductInput!) {
      productCreate(input: $input) {
        product {
          id
          title
          handle
        }
        userErrors {
          field
          message
        }
      }
    }
  `;
  
  const descriptionHtml = generatePremiumDescription(tour);
  
  const input = {
    title: tour.title,
    handle: handle,
    productType: 'Excursions',
    tags: tour.tags,
    descriptionHtml: descriptionHtml.replace(/"/g, '\\"').replace(/\n/g, ' '),
    variants: [
      {
        title: '–í–∑—Ä–æ—Å–ª—ã–π',
        price: String(tour.priceAdult),
      },
      ...(tour.priceChild > 0 ? [{
        title: '–î–µ—Ç—Å–∫–∏–π (4-11 –ª–µ—Ç)',
        price: String(tour.priceChild),
      }] : []),
    ],
  };
  
  if (!APPLY) {
    console.log(`üß™ DRY-RUN: ${tour.title}`);
    console.log(`   Handle: ${handle}`);
    console.log(`   –¶–µ–Ω–∞: ${tour.priceAdult} ‡∏ø`);
    console.log(`   –¢–µ–≥–∏: ${tour.tags.join(', ')}\n`);
    return null;
  }
  
  try {
    const data = await makeGraphQLRequest(mutation, { input });
    
    if (data.productCreate.userErrors?.length > 0) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∏:`, data.productCreate.userErrors);
      return null;
    }
    
    const product = data.productCreate.product;
    console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω: ${product.title}`);
    
    // –ü—É–±–ª–∏–∫—É–µ–º
    await publishProduct(product.id);
    
    return product;
  } catch (error) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:`, error.message);
    return null;
  }
}

async function publishProduct(productId) {
  const mutation = `
    mutation PublishProduct($id: ID!) {
      publishablePublish(id: $id, input: { publicationId: "gid://shopify/Publication/online-store" }) {
        userErrors {
          field
          message
        }
      }
    }
  `;
  
  await makeGraphQLRequest(mutation, { id: productId });
}

// ============================================================================
// –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

async function main() {
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—É—Ä—ã –∏–∑ Shopify
    const existingHandles = await getExistingTours();
    console.log('');
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    console.log('üìÇ –ò—â–µ–º —Ç—É—Ä—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º src/data/tours.ts
    let toursDataContent = await getFileContent('src/data/tours.ts');
    if (toursDataContent) {
      console.log('   ‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª src/data/tours.ts');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º src/pages/ –¥–ª—è TSX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    const pagesFiles = await listDirectory('src/pages');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç—É—Ä—ã (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    const excludedPages = [
      'Index', 'NotFound', 'Cart', 'Admin', 'Booking', 'Contact', 
      'FAQ', 'Info', 'Payment', 'Reviews', 'Template', 'Tours'
    ];
    
    const tourPages = pagesFiles.filter(f => 
      f.type === 'file' && 
      f.name.endsWith('.tsx') && 
      !excludedPages.some(ex => f.name.includes(ex)) &&
      (f.name.includes('Tour') || f.name.includes('Island') || 
       f.name.includes('Phi') || f.name.includes('Similan') || 
       f.name.includes('Racha') || f.name.includes('Pearl') ||
       f.name.includes('Eleven') || f.name.includes('James') ||
       f.name.includes('Rafting') || f.name.includes('KaoLak') ||
       f.name.includes('Avatar') || f.name.includes('CheoLan') ||
       f.name.includes('PhangNga') || f.name.includes('Fishing') ||
       f.name.includes('Krabi') || f.name.includes('Dostoprimechatelnosti'))
    );
    
    console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ TSX —Ñ–∞–π–ª–æ–≤: ${tourPages.length}\n`);
    
    // 3. –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—ã–π —Ç—É—Ä
    const foundTours = [];
    
    // –ü–∞—Ä—Å–∏–º –∏–∑ tours.ts –µ—Å–ª–∏ –µ—Å—Ç—å
    if (toursDataContent) {
      // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
      const exportMatches = toursDataContent.match(/export\s+(?:const|interface)\s+(\w+)/g);
      if (exportMatches) {
        console.log(`   üìù –ù–∞–π–¥–µ–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: ${exportMatches.length}`);
      }
    }
    
    // –ü–∞—Ä—Å–∏–º –∏–∑ TSX —Å—Ç—Ä–∞–Ω–∏—Ü
    for (const page of tourPages) {
      const content = await getFileContent(page.path);
      if (content) {
        const tour = extractTourFromFile(content, page.name);
        if (tour && tour.title) {
          foundTours.push(tour);
          console.log(`   üìù –ü–∞—Ä—Å–∏–Ω–≥: ${page.name} ‚Üí ${tour.title}`);
        }
      }
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ GitHub API
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    if (foundTours.length === 0) {
      console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏');
      return;
    }
    
    console.log(`\nüéØ –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: ${foundTours.length}\n`);
    
    // 4. –§–∏–ª—å—Ç—Ä—É–µ–º - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
    const newTours = foundTours.filter(tour => {
      const handle = generateHandle(tour.title);
      return !existingHandles.has(handle.toLowerCase());
    });
    
    if (newTours.length === 0) {
      console.log('‚úÖ –í—Å–µ —Ç—É—Ä—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å –≤ Shopify!');
      return;
    }
    
    console.log(`üì¶ –ù–æ–≤—ã—Ö —Ç—É—Ä–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: ${newTours.length}\n`);
    
    // 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ç—É—Ä—ã
    for (let i = 0; i < newTours.length; i++) {
      const tour = newTours[i];
      console.log(`\n[${i + 1}/${newTours.length}] ${tour.title}`);
      await createTourInShopify(tour);
      await new Promise(resolve => setTimeout(resolve, 1500));
    }
    
    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!');
    if (APPLY) {
      console.log('üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://localhost:8080/phuket');
    } else {
      console.log('üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–ª–∞–≥ --apply');
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    if (error.message.includes('rate limit')) {
      console.error('\nüí° GitHub API rate limit. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–æ–Ω —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.');
    }
  }
}

main().catch(console.error);

