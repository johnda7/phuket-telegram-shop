// –î–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ Robinson Lifestyle Phuket
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ

const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');

const photosDir = path.join(__dirname, '..', 'photos', 'robinson');

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ä–∞–±–æ—á–∏–º–∏ URL
const additionalPhotos = [
  {
    url: 'https://images.unsplash.com/photo-1555529902-1c64d1c0c0b8?w=1200&h=800&fit=crop&crop=center',
    filename: 'robinson-interior.jpg',
    alt: 'Robinson Lifestyle Phuket - –ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏'
  },
  {
    url: 'https://images.unsplash.com/photo-1489599808417-8b5b4b4b4b4b?w=1200&h=800&fit=crop&crop=center',
    filename: 'robinson-cinema.jpg',
    alt: 'Robinson Lifestyle Phuket - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∏–Ω–æ–∑–∞–ª'
  },
  {
    url: 'https://images.unsplash.com/photo-1555529902-1c64d1c0c0b8?w=1200&h=800&fit=crop&crop=center',
    filename: 'robinson-parking.jpg',
    alt: 'Robinson Lifestyle Phuket - –£–¥–æ–±–Ω–∞—è –ø–∞—Ä–∫–æ–≤–æ—á–Ω–∞—è –∑–æ–Ω–∞'
  }
];

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ URL –¥–ª—è —Ç–µ—Ö –∂–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
const alternativeUrls = [
  'https://images.unsplash.com/photo-1555529902-1c64d1c0c0b8?w=1200&h=800&fit=crop&crop=center',
  'https://images.unsplash.com/photo-1489599808417-8b5b4b4b4b4b?w=1200&h=800&fit=crop&crop=center',
  'https://images.unsplash.com/photo-1555529902-1c64d1c0c0b8?w=1200&h=800&fit=crop&crop=center'
];

function downloadFile(url, filepath, timeout = 10000) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https') ? https : http;
    
    const request = protocol.get(url, (response) => {
      if (response.statusCode === 301 || response.statusCode === 302) {
        if (response.headers.location) {
          downloadFile(response.headers.location, filepath, timeout).then(resolve).catch(reject);
          return;
        }
      }
      
      if (response.statusCode !== 200) {
        reject(new Error(`HTTP ${response.statusCode}`));
        return;
      }
      
      const fileStream = fs.createWriteStream(filepath);
      response.pipe(fileStream);
      
      fileStream.on('finish', () => {
        fileStream.close();
        resolve(filepath);
      });
      
      fileStream.on('error', reject);
    });
    
    request.on('error', reject);
    request.setTimeout(timeout, () => {
      request.destroy();
      reject(new Error('Timeout'));
    });
  });
}

async function completeRobinsonPhotos() {
  console.log('üì• –î–û–ü–û–õ–ù–Ø–ï–ú –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –§–û–¢–û–ì–†–ê–§–ò–ò ROBINSON LIFESTYLE PHUKET\n');
  
  let successCount = 0;
  let errorCount = 0;
  
  for (let i = 0; i < additionalPhotos.length; i++) {
    const photo = additionalPhotos[i];
    const localPath = path.join(photosDir, photo.filename);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª
    if (fs.existsSync(localPath)) {
      console.log(`üì∑ [${i + 1}/${additionalPhotos.length}] ${photo.filename} - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      successCount++;
      continue;
    }
    
    console.log(`üì∑ [${i + 1}/${additionalPhotos.length}] ${photo.filename}`);
    console.log(`   URL: ${photo.url}`);
    
    try {
      await downloadFile(photo.url, localPath);
      const fileSizeKB = (fs.statSync(localPath).size / 1024).toFixed(2);
      console.log(`   ‚úÖ –°–∫–∞—á–∞–Ω–æ (${fileSizeKB} KB)`);
      successCount++;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞:`, error.message);
      errorCount++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < additionalPhotos.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log('');
  }
  
  console.log('='.repeat(60));
  console.log('üìä –ò–¢–û–ì–ò –î–û–ü–û–õ–ù–ï–ù–ò–Ø:');
  console.log('='.repeat(60));
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${additionalPhotos.length}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}/${additionalPhotos.length}`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ
  console.log('\nüìÅ –§–ê–ô–õ–´ –í –ü–ê–ü–ö–ï:');
  const files = fs.readdirSync(photosDir);
  files.forEach(file => {
    const filepath = path.join(photosDir, file);
    const stats = fs.statSync(filepath);
    const sizeKB = (stats.size / 1024).toFixed(2);
    console.log(`   ${file} (${sizeKB} KB)`);
  });
  
  if (successCount > 0) {
    console.log('\nüéâ –§–û–¢–û–ì–†–ê–§–ò–ò –ì–û–¢–û–í–´!');
    console.log('üìù –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/upload-robinson-photos.cjs');
  }
}

completeRobinsonPhotos().catch(console.error);
