// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–π–æ–Ω—ã –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤

const https = require('https');

const SHOPIFY_STORE = 'phuket-telegram-shop-117ck.myshopify.com';
const SHOPIFY_ACCESS_TOKEN = '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';
const SHOPIFY_API_VERSION = '2025-07';

const shoppingCenters = [
  { 
    name: 'Central Phuket', 
    productId: '7972352950326', 
    district: 'Cherngtalay', // –¶–µ–Ω—Ç—Ä–∞–ª –ü—Ö—É–∫–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ß–µ—Ä–Ω–≥—Ç–∞–ª–∞–µ
    coordinates: '7.8904,98.2924'
  },
  { 
    name: 'Jungceylon Shopping Center', 
    productId: '7974403080246', 
    district: 'Patong', // –î–∂–∞–Ω–≥—Ü–µ–ª–æ–Ω –≤ –ü–∞—Ç–æ–Ω–≥–µ
    coordinates: '7.8965,98.2965'
  },
  { 
    name: 'Premium Outlet Phuket', 
    productId: '7974403145782', 
    district: 'Thalang', // –ü—Ä–µ–º–∏—É–º –ê—É—Ç–ª–µ—Ç –≤ –¢–∞–ª–∞–Ω–≥–µ
    coordinates: '8.1234,98.3456'
  },
  { 
    name: 'Big C Supercenter Phuket', 
    productId: '7974403244086', 
    district: 'Chalong', // –ë–∏–≥ –°–∏ –≤ –ß–∞–ª–æ–Ω–≥–µ
    coordinates: '7.8456,98.3456'
  },
  { 
    name: 'Tesco Lotus Phuket', 
    productId: '7974403604534', 
    district: 'Chalong', // –¢–µ—Å–∫–æ –õ–æ—Ç—É—Å –≤ –ß–∞–ª–æ–Ω–≥–µ
    coordinates: '7.8234,98.3456'
  },
  { 
    name: 'Robinson Lifestyle Phuket', 
    productId: '7974403702838', 
    district: 'Karon', // –†–æ–±–∏–Ω—Å–æ–Ω –≤ –ö–∞—Ä–æ–Ω–µ
    coordinates: '7.8423,98.2981'
  }
];

function shopifyAdminRequest(query, variables = {}) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({ query, variables });
    
    const options = {
      hostname: SHOPIFY_STORE,
      path: `/admin/api/${SHOPIFY_API_VERSION}/graphql.json`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': SHOPIFY_ACCESS_TOKEN,
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => { data += chunk; });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          if (jsonData.errors) {
            reject(new Error(`GraphQL Errors: ${JSON.stringify(jsonData.errors)}`));
          } else {
            resolve(jsonData);
          }
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', reject);
    req.write(postData);
    req.end();
  });
}

async function updateShoppingCenterDistrict(productId, district, coordinates) {
  const mutation = `
    mutation updateProduct($id: ID!, $metafields: [MetafieldInput!]!) {
      productUpdate(input: {
        id: $id,
        metafields: $metafields
      }) {
        product {
          id
          title
        }
        userErrors {
          field
          message
        }
      }
    }
  `;

  const variables = {
    id: `gid://shopify/Product/${productId}`,
    metafields: [
      {
        namespace: "custom",
        key: "district",
        value: district,
        type: "single_line_text_field"
      },
      {
        namespace: "custom",
        key: "coordinates",
        value: coordinates,
        type: "single_line_text_field"
      }
    ]
  };

  return await shopifyAdminRequest(mutation, variables);
}

async function fixAllShoppingDistricts() {
  console.log('üè¢ –ò–°–ü–†–ê–í–õ–Ø–ï–ú –†–ê–ô–û–ù–´ –¢–û–†–ì–û–í–´–• –¶–ï–ù–¢–†–û–í\n');
  
  let successCount = 0;
  let errorCount = 0;

  for (let i = 0; i < shoppingCenters.length; i++) {
    const center = shoppingCenters[i];
    console.log(`üè¢ [${i + 1}/${shoppingCenters.length}] ${center.name}`);
    console.log(`   –†–∞–π–æ–Ω: ${center.district}`);
    console.log(`   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${center.coordinates}`);

    try {
      console.log('   üìù –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–π–æ–Ω...');
      const result = await updateShoppingCenterDistrict(center.productId, center.district, center.coordinates);
      
      if (result.data.productUpdate.userErrors.length > 0) {
        console.error('   ‚ùå –û—à–∏–±–∫–∏:', result.data.productUpdate.userErrors);
        errorCount++;
      } else {
        console.log('   ‚úÖ –†–∞–π–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!');
        successCount++;
      }
    } catch (error) {
      console.error('   ‚ùå –û—à–∏–±–∫–∞:', error.message);
      errorCount++;
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
    if (i < shoppingCenters.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }

  console.log('='.repeat(60));
  console.log('üìä –ò–¢–û–ì–ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –†–ê–ô–û–ù–û–í:');
  console.log('='.repeat(60));
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${successCount}/${shoppingCenters.length}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}/${shoppingCenters.length}`);
  
  if (successCount > 0) {
    console.log('\nüéâ –†–ê–ô–û–ù–´ –û–ë–ù–û–í–õ–ï–ù–´!');
    console.log('üåê –ü—Ä–æ–≤–µ—Ä—å –Ω–∞ —Å–∞–π—Ç–µ - —Ç–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¢–¶ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–π —Ä–∞–π–æ–Ω');
  }
}

fixAllShoppingDistricts().catch(console.error);
