#!/usr/bin/env node

/**
 * üßπ –û–ß–ò–°–¢–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò "–¢–û–†–ì–û–í–´–ï –¶–ï–ù–¢–†–´"
 * –£–±–∏—Ä–∞–µ–º –ø–ª—è–∂–∏ –∏ —Ö—Ä–∞–º—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã
 */

const ADMIN_API_TOKEN = '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';
const SHOP_DOMAIN = 'phuket-telegram-shop-117ck.myshopify.com';

// –¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º)
const SHOPPING_CENTERS = [
  'central-phuket-floresta',
  'jungceylon-shopping-center', 
  'premium-outlet-phuket',
  'big-c-supercenter-phuket',
  'tesco-lotus-phuket',
  'robinson-lifestyle-phuket',
  'patong-night-market'
];

// –ü–ª—è–∂–∏ –∏ —Ö—Ä–∞–º—ã (—É–±–∏—Ä–∞–µ–º –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤)
const NON_SHOPPING = [
  'freedom-beach-phuket',
  'wat-chalong',
  'bang-tao-beach', 
  'big-buddha'
];

async function cleanShoppingCategory() {
  console.log('üßπ –û–ß–ò–°–¢–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò "–¢–û–†–ì–û–í–´–ï –¶–ï–ù–¢–†–´"');
  console.log('==========================================\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const allProducts = await fetchAllProducts();
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${allProducts.length}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    for (const product of allProducts) {
      const handle = product.handle;
      const currentTags = product.tags || [];
      
      let newTags = [...currentTags];
      
      if (SHOPPING_CENTERS.includes(handle)) {
        // –¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥ shopping
        if (!newTags.includes('shopping')) {
          newTags.push('shopping');
        }
        console.log(`‚úÖ ${product.title} - –¥–æ–±–∞–≤–ª–µ–Ω —Ç–µ–≥ 'shopping'`);
      } else if (NON_SHOPPING.includes(handle)) {
        // –ü–ª—è–∂–∏ –∏ —Ö—Ä–∞–º—ã - —É–±–∏—Ä–∞–µ–º —Ç–µ–≥ shopping
        newTags = newTags.filter(tag => tag !== 'shopping');
        console.log(`‚ùå ${product.title} - —É–±—Ä–∞–Ω —Ç–µ–≥ 'shopping'`);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–≥–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
      if (JSON.stringify(newTags.sort()) !== JSON.stringify(currentTags.sort())) {
        await updateProductTags(product.id, newTags);
        console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω—ã —Ç–µ–≥–∏: [${newTags.join(', ')}]`);
      }
    }
    
    console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
  }
}

async function fetchAllProducts() {
  const query = `
    query {
      products(first: 50) {
        edges {
          node {
            id
            title
            handle
            tags
          }
        }
      }
    }
  `;

  const response = await fetch(`https://${SHOP_DOMAIN}/admin/api/2025-07/graphql.json`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Shopify-Access-Token': ADMIN_API_TOKEN
    },
    body: JSON.stringify({ query })
  });

  const data = await response.json();
  
  if (data.errors) {
    throw new Error(`GraphQL –æ—à–∏–±–∫–∏: ${JSON.stringify(data.errors)}`);
  }
  
  return data.data.products.edges.map(edge => edge.node);
}

async function updateProductTags(productId, tags) {
  const mutation = `
    mutation productUpdate($input: ProductInput!) {
      productUpdate(input: $input) {
        product {
          id
          title
          tags
        }
        userErrors {
          field
          message
        }
      }
    }
  `;

  const variables = {
    input: {
      id: productId,
      tags: tags
    }
  };

  const response = await fetch(`https://${SHOP_DOMAIN}/admin/api/2025-07/graphql.json`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Shopify-Access-Token': ADMIN_API_TOKEN
    },
    body: JSON.stringify({ 
      query: mutation,
      variables 
    })
  });

  const data = await response.json();
  
  if (data.errors) {
    throw new Error(`GraphQL –æ—à–∏–±–∫–∏: ${JSON.stringify(data.errors)}`);
  }
  
  if (data.data.productUpdate.userErrors.length > 0) {
    throw new Error(`–û—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${JSON.stringify(data.data.productUpdate.userErrors)}`);
  }
  
  return data.data.productUpdate.product;
}

// –ó–∞–ø—É—Å–∫
cleanShoppingCategory();
