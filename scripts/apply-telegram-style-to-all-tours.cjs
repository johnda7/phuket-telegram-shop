#!/usr/bin/env node

/**
 * –ú–ê–°–¢–ï–†-–°–ö–†–ò–ü–¢: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Telegram WebApp —Å—Ç–∏–ª—è –∫–æ –≤—Å–µ–º —Ç—É—Ä–∞–º
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö —Ç—É—Ä–æ–≤ –≤ Shopify,
 * –ø—Ä–∏–º–µ–Ω—è—è –µ–¥–∏–Ω—ã–π Telegram WebApp –¥–∏–∑–∞–π–Ω —Å:
 * - –ö–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏
 * - –ü—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏ Lucide React
 * - –¶–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π #007AFF
 * - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
 */

// Using built-in fetch (Node.js 18+)

// Shopify credentials
const SHOPIFY_STORE = 'phuket-telegram-shop-117ck.myshopify.com';
const ADMIN_TOKEN = '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';

const ADMIN_URL = `https://${SHOPIFY_STORE}/admin/api/2025-07/graphql.json`;

// GraphQL query to get all tours
const GET_TOURS_QUERY = `
  query GetTours {
    products(first: 50, query: "product_type:Excursions") {
      edges {
        node {
          id
          title
          handle
          description
          tags
          variants(first: 10) {
            edges {
              node {
                id
                title
                price
              }
            }
          }
        }
      }
    }
  }
`;

// GraphQL mutation to update product description
const UPDATE_PRODUCT_MUTATION = `
  mutation UpdateProduct($input: ProductInput!) {
    productUpdate(input: $input) {
      product {
        id
        title
        handle
      }
      userErrors {
        field
        message
      }
    }
  }
`;

// GraphQL mutation to set metafields
const SET_METAFIELDS_MUTATION = `
  mutation SetMetafields($metafields: [MetafieldsSetInput!]!) {
    metafieldsSet(metafields: $metafields) {
      metafields {
        id
        key
        value
      }
      userErrors {
        field
        message
      }
    }
  }
`;

// Function to make GraphQL request
async function makeGraphQLRequest(query, variables = {}) {
  try {
    const response = await fetch(ADMIN_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': ADMIN_TOKEN,
      },
      body: JSON.stringify({
        query,
        variables,
      }),
    });

    const data = await response.json();
    
    if (data.errors) {
      console.error('GraphQL Errors:', data.errors);
      return null;
    }

    return data.data;
  } catch (error) {
    console.error('Request failed:', error);
    return null;
  }
}

// Function to create Telegram WebApp style description
function createTelegramStyleDescription(tour) {
  const title = tour.title;
  const handle = tour.handle;
  
  // Extract duration from title or tags
  const duration = title.includes('2 –¥–Ω—è') ? '2 –¥–Ω—è / 1 –Ω–æ—á—å' : 
                   title.includes('1 –¥–µ–Ω—å') ? '1 –¥–µ–Ω—å' : 
                   '1 –¥–µ–Ω—å';
  
  // Extract location from title
  const location = title.includes('–ü—Ö–∏-–ü—Ö–∏') ? '–ü—Ö–∏-–ü—Ö–∏' :
                   title.includes('James Bond') ? 'James Bond Island' :
                   title.includes('–°–∏–º–∏–ª–∞–Ω') ? '–°–∏–º–∏–ª–∞–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞' :
                   '–ü—Ö—É–∫–µ—Ç';

  return `
<div class="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-6 rounded-xl mb-6">
  <h1 class="text-2xl font-bold mb-2">${title}</h1>
  <p class="text-lg opacity-90">–õ—É—á—à–∏–π —Ç—É—Ä –ü—Ö—É–∫–µ—Ç–∞!</p>
</div>

<div class="space-y-6">
  <!-- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ -->
  <div class="bg-gray-50 p-4 rounded-lg">
    <p class="text-gray-700 leading-relaxed">${title} ‚Äî —ç—Ç–æ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ —Å–∞–º—ã–º –∫—Ä–∞—Å–∏–≤—ã–º –º–µ—Å—Ç–∞–º –ê–Ω–¥–∞–º–∞–Ω—Å–∫–æ–≥–æ –º–æ—Ä—è. –≠–∫—Å–∫—É—Ä—Å–∏—è –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞—Å–ª–∞–¥–∏—Ç—å—Å—è –≤—Å–µ–º–∏ –∫—Ä–∞—Å–æ—Ç–∞–º–∏ —ç—Ç–æ–≥–æ —Ä–∞–π—Å–∫–æ–≥–æ —É–≥–æ–ª–∫–∞.</p>
  </div>

  <!-- –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã -->
  <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
    <div class="bg-blue-50 p-3 rounded-lg text-center">
      <div class="text-2xl mb-1">üèùÔ∏è</div>
      <div class="text-xs font-medium text-blue-800">–û—Å—Ç—Ä–æ–≤–∞</div>
    </div>
    <div class="bg-green-50 p-3 rounded-lg text-center">
      <div class="text-2xl mb-1">ü§ø</div>
      <div class="text-xs font-medium text-green-800">–°–Ω–æ—Ä–∫–ª–∏–Ω–≥</div>
    </div>
    <div class="bg-purple-50 p-3 rounded-lg text-center">
      <div class="text-2xl mb-1">üèñÔ∏è</div>
      <div class="text-xs font-medium text-purple-800">–ü–ª—è–∂–∏</div>
    </div>
    <div class="bg-orange-50 p-3 rounded-lg text-center">
      <div class="text-2xl mb-1">üåÖ</div>
      <div class="text-xs font-medium text-orange-800">–ü–∞–Ω–æ—Ä–∞–º—ã</div>
    </div>
  </div>

  <!-- –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç (–∫–æ–º–ø–∞–∫—Ç–Ω–æ) -->
  <div class="bg-gray-50 p-4 rounded-lg">
    <h3 class="font-semibold text-gray-800 mb-3">‚úÖ –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Ç—É—Ä</h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
      <div class="flex items-center space-x-2">
        <span class="text-green-500">‚úì</span>
        <span class="text-gray-700">–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–∞—Ç–µ—Ä + –æ—Ç–µ–ª—å</span>
      </div>
      <div class="flex items-center space-x-2">
        <span class="text-green-500">‚úì</span>
        <span class="text-gray-700">–ü–∏—Ç–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</span>
      </div>
      <div class="flex items-center space-x-2">
        <span class="text-green-500">‚úì</span>
        <span class="text-gray-700">–°–Ω–æ—Ä–∫–ª–∏–Ω–≥ + –º–∞—Å–∫–∏</span>
      </div>
      <div class="flex items-center space-x-2">
        <span class="text-green-500">‚úì</span>
        <span class="text-gray-700">–†—É—Å—Å–∫–∏–π –≥–∏–¥ + —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞</span>
      </div>
    </div>
  </div>

  <!-- –ü—Ä–æ–≥—Ä–∞–º–º–∞ (—Å–≤–µ—Ä–Ω—É—Ç–∞—è) -->
  <div class="space-y-3">
    <h3 class="font-semibold text-gray-800">üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—É—Ä–∞</h3>
    
    <div class="bg-blue-50 p-3 rounded-lg">
      <div class="font-medium text-blue-800 mb-2">–î–µ–Ω—å 1: –ü—Ö—É–∫–µ—Ç ‚Üí ${location}</div>
      <div class="text-sm text-gray-700 space-y-1">
        <div>06:50 –í—ã–µ–∑–¥ ‚Üí 09:50 ${location} ‚Üí 10:50 –°–Ω–æ—Ä–∫–ª–∏–Ω–≥ ‚Üí 14:20 –û–±–µ–¥ ‚Üí 20:30 –í–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</div>
      </div>
    </div>

    ${duration.includes('2 –¥–Ω—è') ? `
    <div class="bg-green-50 p-3 rounded-lg">
      <div class="font-medium text-green-800 mb-2">–î–µ–Ω—å 2: ${location} ‚Üí –ü—Ö—É–∫–µ—Ç</div>
      <div class="text-sm text-gray-700 space-y-1">
        <div>07:00 –ó–∞–≤—Ç—Ä–∞–∫ ‚Üí 10:30 –°–º–æ—Ç—Ä–æ–≤–∞—è –ø–ª–æ—â–∞–¥–∫–∞ ‚Üí 15:30 –°–Ω–æ—Ä–∫–ª–∏–Ω–≥ ‚Üí 17:00 –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ</div>
      </div>
    </div>
    ` : ''}
  </div>

  <!-- –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∫–æ–º–ø–∞–∫—Ç–Ω–æ) -->
  <div class="bg-yellow-50 p-4 rounded-lg">
    <h3 class="font-semibold text-yellow-800 mb-2">‚ö†Ô∏è –í–∞–∂–Ω–æ –∑–Ω–∞—Ç—å</h3>
    <div class="text-sm text-gray-700 space-y-1">
      <div>‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π</div>
      <div>‚Ä¢ –í—Ö–æ–¥ –Ω–∞ —Å–º–æ—Ç—Ä–æ–≤—ã–µ –ø–ª–æ—â–∞–¥–∫–∏: 50-100 –±–∞—Ç (–Ω–µ –≤–∫–ª—é—á–µ–Ω–æ)</div>
      <div>‚Ä¢ –ß—Ç–æ –≤–∑—è—Ç—å: –∫—É–ø–∞–ª—å–Ω–∏–∫, —Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º, –≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä</div>
    </div>
  </div>
</div>
  `.trim();
}

// Main function
async function applyTelegramStyleToAllTours() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ Telegram WebApp —Å—Ç–∏–ª—è –∫–æ –≤—Å–µ–º —Ç—É—Ä–∞–º...\n');

  try {
    // 1. Get all tours
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤...');
    const toursData = await makeGraphQLRequest(GET_TOURS_QUERY);
    
    if (!toursData) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤');
      return;
    }

    const tours = toursData.products.edges.map(edge => edge.node);
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tours.length} —Ç—É—Ä–æ–≤\n`);

    // 2. Process each tour
    for (let i = 0; i < tours.length; i++) {
      const tour = tours[i];
      console.log(`üîÑ [${i + 1}/${tours.length}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${tour.title}`);

      try {
        // Create new description
        const newDescription = createTelegramStyleDescription(tour);
        
        // Update product description
        const updateResult = await makeGraphQLRequest(UPDATE_PRODUCT_MUTATION, {
          input: {
            id: tour.id,
            descriptionHtml: newDescription
          }
        });

        if (updateResult?.productUpdate?.userErrors?.length > 0) {
          console.error(`‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ${tour.title}:`, updateResult.productUpdate.userErrors);
          continue;
        }

        // Set metafields for custom description
        const metafieldsResult = await makeGraphQLRequest(SET_METAFIELDS_MUTATION, {
          metafields: [
            {
              ownerId: tour.id,
              namespace: "custom",
              key: "description",
              value: newDescription,
              type: "multi_line_text_field"
            }
          ]
        });

        if (metafieldsResult?.metafieldsSet?.userErrors?.length > 0) {
          console.error(`‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ metafields –¥–ª—è ${tour.title}:`, metafieldsResult.metafieldsSet.userErrors);
        }

        console.log(`‚úÖ ${tour.title} - –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ`);

        // Add delay to avoid rate limiting
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${tour.title}:`, error.message);
      }
    }

    console.log('\nüéâ –í—Å–µ —Ç—É—Ä—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å—Ç–∏–ª–µ Telegram WebApp!');
    console.log('\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Å–∞–π—Ç–µ: http://localhost:8080/tours');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// Run the script
if (require.main === module) {
  applyTelegramStyleToAllTours();
}

module.exports = { applyTelegramStyleToAllTours };
