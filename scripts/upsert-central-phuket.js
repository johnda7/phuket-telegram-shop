#!/usr/bin/env node
/* Upsert —ç—Ç–∞–ª–æ–Ω–∞ "Central Phuket" (–∫–∞—Ç–µ–≥–æ—Ä–∏—è shopping) –≤ Shopify */

const STORE = process.env.SHOPIFY_STORE || 'phuket-telegram-shop-117ck.myshopify.com';
const TOKEN = process.env.SHOPIFY_ACCESS_TOKEN;
const API = '2025-07';
const ADMIN = `https://${STORE}/admin/api/${API}/graphql.json`;

if (!TOKEN) {
  console.error('‚ùå SHOPIFY_ACCESS_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  process.exit(1);
}

async function gql(query, variables = {}) {
  const r = await fetch(ADMIN, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json', 'X-Shopify-Access-Token': TOKEN },
    body: JSON.stringify({ query, variables })
  });
  const j = await r.json();
  if (!r.ok || j.errors) throw new Error(JSON.stringify(j.errors || j, null, 2));
  return j.data;
}

const byHandle = async (handle) => {
  const q = `query($h:String!){ productByHandle(handle:$h){ id title handle } }`;
  return (await gql(q, { h: handle })).productByHandle || null;
};

const create = async (input) => {
  const q = `mutation($input:ProductInput!){
    productCreate(input:$input){ product{ id title handle } userErrors{ field message } }
  }`;
  const d = await gql(q, { input });
  if (d.productCreate.userErrors?.length) throw new Error(JSON.stringify(d.productCreate.userErrors, null, 2));
  return d.productCreate.product;
};

const update = async (input) => {
  const q = `mutation($input:ProductInput!){
    productUpdate(input:$input){ product{ id title handle } userErrors{ field message } }
  }`;
  const d = await gql(q, { input });
  if (d.productUpdate.userErrors?.length) throw new Error(JSON.stringify(d.productUpdate.userErrors, null, 2));
  return d.productUpdate.product;
};

const metafieldsSet = async (inputs) => {
  if (!inputs.length) return;
  const q = `mutation($m:[MetafieldsSetInput!]!){
    metafieldsSet(metafields:$m){ metafields{ id key } userErrors{ field message } }
  }`;
  const d = await gql(q, { m: inputs });
  if (d.metafieldsSet.userErrors?.length) throw new Error(JSON.stringify(d.metafieldsSet.userErrors, null, 2));
};

(async function main() {
  const handle = 'central-phuket';
  const input = {
    title: 'Central Phuket ‚Äî Floresta + Festival',
    handle,
    productType: 'Information',
    vendor: 'PhuketDA',
    tags: [
      'info','insider',
      'category:shopping',
      'shopping','mall','aircon','food-court','parking','popular',
      'district:PhuketTown'
    ],
    descriptionHtml: `
<h2>Central Phuket ‚Äî –∫—Ä—É–ø–Ω–µ–π—à–∏–π –¢–†–¶ –ü—Ö—É–∫–µ—Ç–∞</h2>
<p>–î–≤–∞ –∫—Ä—ã–ª–∞ ‚Äî Floresta –∏ Festival ‚Äî —Å–æ–µ–¥–∏–Ω–µ–Ω—ã –∫—Ä—ã—Ç—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º. 300+ –º–∞–≥–∞–∑–∏–Ω–æ–≤, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, —Ñ—É–¥-–∫–æ—Ä—Ç—ã, –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä, –¥–µ—Ç—Å–∫–∏–µ –∑–æ–Ω—ã –∏ –∞–∫–≤–∞—Ä–∏—É–º. –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ –≤ –∂–∞—Ä—É –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–∞–º.</p>
<ul>
<li>–ú–∞–≥–∞–∑–∏–Ω—ã: Zara, H&M, Uniqlo, Nike, Apple —Ä–µ—Å–µ–ª–ª–µ—Ä</li>
<li>–ï–¥–∞: 2 —Ñ—É–¥-–∫–æ—Ä—Ç–∞ + —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã</li>
<li>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä, –∞–∫–≤–∞—Ä–∏—É–º, –¥–µ—Ç—Å–∫–∏–µ –∑–æ–Ω—ã</li>
<li>–£–¥–æ–±—Å—Ç–≤–∞: –±–æ–ª—å—à–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞, –±–∞–Ω–∫–æ–º–∞—Ç—ã, –æ–±–º–µ–Ω –≤–∞–ª—é—Ç</li>
</ul>`.trim(),
    variants: [{ title: 'Default', price: '0.00' }]
  };

  const mf = [
    { namespace: 'custom', key: 'coordinates', value: '7.8905,98.3901', type: 'single_line_text_field' },
    { namespace: 'custom', key: 'rating', value: '4.6', type: 'single_line_text_field' },
    { namespace: 'custom', key: 'district', value: 'PhuketTown', type: 'single_line_text_field' },
    { namespace: 'custom', key: 'duration', value: '2-4 —á–∞—Å–∞', type: 'single_line_text_field' },
    { namespace: 'custom', key: 'best_time', value: '–î–µ–Ω—å/–≤–µ—á–µ—Ä', type: 'single_line_text_field' },
    { namespace: 'custom', key: 'working_hours', value: '10:00-22:00 –µ–∂–µ–¥–Ω–µ–≤–Ω–æ', type: 'single_line_text_field' },
    { namespace: 'custom', key: 'amenities', value: '–ü–∞—Ä–∫–æ–≤–∫–∞,–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã,Food Court,–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä,–î–µ—Ç—Å–∫–∞—è –∑–æ–Ω–∞,Wi‚ÄëFi,–ë–∞–Ω–∫–æ–º–∞—Ç—ã,–û–±–º–µ–Ω –≤–∞–ª—é—Ç—ã', type: 'single_line_text_field' },
    { namespace: 'custom', key: 'website', value: 'https://www.centralphuket.com/', type: 'single_line_text_field' }
  ];

  console.log('üõçÔ∏è Upsert: Central Phuket (—ç—Ç–∞–ª–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ shopping)');
  const exists = await byHandle(handle);
  const product = exists
    ? await update({ id: exists.id, ...input, variants: undefined })
    : await create(input);

  await metafieldsSet(mf.map(m => ({ ownerId: product.id, ...m })));
  console.log(`‚úÖ –ì–æ—Ç–æ–≤–æ: ${product.title} ‚Äî ${product.handle}`);
})().catch(e => { console.error('‚ùå', e.message || e); process.exit(1); });
