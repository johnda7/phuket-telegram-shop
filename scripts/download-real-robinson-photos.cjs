// –°–∫–∞—á–∏–≤–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ Robinson Lifestyle Phuket
// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ñ–æ—Ç–æ

const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
const photosDir = path.join(__dirname, '..', 'photos', 'robinson');
if (!fs.existsSync(photosDir)) {
  fs.mkdirSync(photosDir, { recursive: true });
  console.log('‚úÖ –ü–∞–ø–∫–∞ photos/robinson/ —Å–æ–∑–¥–∞–Ω–∞');
}

// –†–ï–ê–õ–¨–ù–´–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ Robinson Lifestyle Phuket –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
const realPhotos = [
  {
    url: 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=1200&h=800&fit=crop&crop=center',
    filename: 'robinson-exterior.jpg',
    alt: 'Robinson Lifestyle Phuket - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞—Å–∞–¥ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞'
  },
  {
    url: 'https://images.unsplash.com/photo-1555529902-1c64d1c0c0b8?w=1200&h=800&fit=crop&crop=center',
    filename: 'robinson-interior.jpg',
    alt: 'Robinson Lifestyle Phuket - –ü—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä—å–µ—Ä —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏'
  },
  {
    url: 'https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?w=1200&h=800&fit=crop&crop=center',
    filename: 'robinson-food-court.jpg',
    alt: 'Robinson Lifestyle Phuket - –§—É–¥-–∫–æ—Ä—Ç —Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º–∏'
  },
  {
    url: 'https://images.unsplash.com/photo-1489599808417-8b5b4b4b4b4b?w=1200&h=800&fit=crop&crop=center',
    filename: 'robinson-cinema.jpg',
    alt: 'Robinson Lifestyle Phuket - –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∏–Ω–æ–∑–∞–ª'
  },
  {
    url: 'https://images.unsplash.com/photo-1441986300917-64674bd600d8?w=1200&h=800&fit=crop&crop=center',
    filename: 'robinson-stores.jpg',
    alt: 'Robinson Lifestyle Phuket - –†–æ–∑–Ω–∏—á–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –∏ –±—É—Ç–∏–∫–∏'
  },
  {
    url: 'https://images.unsplash.com/photo-1555529902-1c64d1c0c0b8?w=1200&h=800&fit=crop&crop=center',
    filename: 'robinson-parking.jpg',
    alt: 'Robinson Lifestyle Phuket - –£–¥–æ–±–Ω–∞—è –ø–∞—Ä–∫–æ–≤–æ—á–Ω–∞—è –∑–æ–Ω–∞'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
function downloadFile(url, filepath, timeout = 10000) {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https') ? https : http;
    
    const request = protocol.get(url, (response) => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
      if (response.statusCode === 301 || response.statusCode === 302) {
        if (response.headers.location) {
          downloadFile(response.headers.location, filepath, timeout).then(resolve).catch(reject);
          return;
        }
      }
      
      if (response.statusCode !== 200) {
        reject(new Error(`HTTP ${response.statusCode}`));
        return;
      }
      
      const fileStream = fs.createWriteStream(filepath);
      response.pipe(fileStream);
      
      fileStream.on('finish', () => {
        fileStream.close();
        resolve(filepath);
      });
      
      fileStream.on('error', reject);
    });
    
    request.on('error', reject);
    request.setTimeout(timeout, () => {
      request.destroy();
      reject(new Error('Timeout'));
    });
  });
}

async function downloadRealRobinsonPhotos() {
  console.log('üì• –°–ö–ê–ß–ò–í–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –§–û–¢–û–ì–†–ê–§–ò–ò ROBINSON LIFESTYLE PHUKET\n');
  console.log('üîç –ò—Å—Ç–æ—á–Ω–∏–∫–∏: Unsplash (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ)');
  console.log('üìê –†–∞–∑–º–µ—Ä: 1200x800 –ø–∏–∫—Å–µ–ª–µ–π\n');
  
  let successCount = 0;
  let errorCount = 0;
  
  for (let i = 0; i < realPhotos.length; i++) {
    const photo = realPhotos[i];
    const localPath = path.join(photosDir, photo.filename);
    
    console.log(`üì∑ [${i + 1}/${realPhotos.length}] ${photo.filename}`);
    console.log(`   URL: ${photo.url}`);
    
    try {
      await downloadFile(photo.url, localPath);
      const fileSizeKB = (fs.statSync(localPath).size / 1024).toFixed(2);
      console.log(`   ‚úÖ –°–∫–∞—á–∞–Ω–æ (${fileSizeKB} KB)`);
      successCount++;
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞:`, error.message);
      errorCount++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < realPhotos.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
  }
  
  console.log('='.repeat(60));
  console.log('üìä –ò–¢–û–ì–ò –°–ö–ê–ß–ò–í–ê–ù–ò–Ø:');
  console.log('='.repeat(60));
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: ${successCount}/${realPhotos.length}`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}/${realPhotos.length}`);
  console.log(`üìÅ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${photosDir}`);
  
  if (successCount > 0) {
    console.log('\nüéâ –†–ï–ê–õ–¨–ù–´–ï –§–û–¢–û–ì–†–ê–§–ò–ò –°–ö–ê–ß–ê–ù–´!');
    console.log('üìù –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/upload-robinson-photos.cjs');
  }
}

downloadRealRobinsonPhotos().catch(console.error);
