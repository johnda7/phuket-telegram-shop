/**
 * üó∫Ô∏è –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –ö–ê–†–¢–ê –° LEAFLET + OPENSTREETMAP
 * 
 * –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
 * - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ (OpenStreetMap –¥–∞–Ω–Ω—ã–µ)
 * - –¢–µ –∂–µ –∫–∞—Ä—Ç—ã —á—Ç–æ Maps.me –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
 * - –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å: –º–∞—Ä–∫–µ—Ä—ã, –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è, —Å—Ç–∏–ª–∏
 * - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏–∑ Shopify
 */

import { useEffect, useRef, useState } from "react";
import { MapContainer, TileLayer, Marker, Popup, useMap } from "react-leaflet";
import { Icon, LatLng } from "leaflet";
import { Lock, Unlock, Navigation } from "lucide-react";

interface PlaceMarker {
  handle: string;
  title: string;
  lat: number;
  lng: number;
  category: string;
  rating?: string;
  district?: string;
  isPartner: boolean;
  emoji: string;
  tags: string[];
}

interface LeafletMapProps {
  places: PlaceMarker[];
  height?: string;
  selectedPlaceHandle?: string | null;
  onPlaceClick?: (place: PlaceMarker) => void;
  locked?: boolean; // –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true - –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ)
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—Ç–∞
function MapController({ 
  selectedPlaceHandle, 
  places 
}: { 
  selectedPlaceHandle: string | null; 
  places: PlaceMarker[] 
}) {
  const map = useMap();

  useEffect(() => {
    if (selectedPlaceHandle) {
      const place = places.find(p => p.handle === selectedPlaceHandle);
      if (place) {
        map.setView([place.lat, place.lng], 15, { animate: true });
      }
    }
  }, [selectedPlaceHandle, places, map]);

  return null;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∫–∞—Ä—Ç—ã
function MapLockController({ 
  locked,
  onUnlock
}: { 
  locked: boolean;
  onUnlock?: () => void;
}) {
  const map = useMap();

  useEffect(() => {
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∫–∞—Ä—Ç—ã
    if (locked) {
      // –ë–ª–æ–∫–∏—Ä—É–µ–º: –æ—Ç–∫–ª—é—á–∞–µ–º —Å–∫—Ä–æ–ª–ª –∫–æ–ª–µ—Å–æ–º, –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∏ touch zoom
      map.scrollWheelZoom.disable();
      map.dragging.disable();
      map.touchZoom.disable();
      map.doubleClickZoom.disable();
      map.boxZoom.disable();
      map.keyboard.disable();
      
      // –ö–†–ò–¢–ò–ß–ù–û: –û—Ç–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–∫—Ä–æ–ª–ª–∞ –∏ —Ç–∞—á –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∫–∞—Ä—Ç—ã
      // –ù–û —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫–∏ –Ω–∞ zoom controls –∏ –º–∞—Ä–∫–µ—Ä—ã
      const container = map.getContainer();
      if (container) {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–µ touch —Å–æ–±—ã—Ç–∏—è
        container.style.touchAction = 'none';
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è —Å–∫—Ä–æ–ª–ª–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        const preventDefault = (e: Event) => {
          // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–ª–∏–∫–∏ –Ω–∞ zoom controls, –º–∞—Ä–∫–µ—Ä—ã –∏ –∫–Ω–æ–ø–∫—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
          const target = e.target as HTMLElement;
          if (
            target.closest('.leaflet-control-zoom') || 
            target.closest('.leaflet-marker-icon') ||
            target.closest('[title*="–±–ª–æ–∫–∏—Ä–æ–≤"]') // –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
          ) {
            return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫–∏ –Ω–∞ controls, –º–∞—Ä–∫–µ—Ä—ã –∏ –∫–Ω–æ–ø–∫–∏
          }
          
          // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ wheel (—Å–∫—Ä–æ–ª–ª) –∏ touchmove (–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ), –Ω–æ –ù–ï –∫–ª–∏–∫–∏
          if (e.type === 'wheel' || e.type === 'touchmove') {
            e.preventDefault();
            e.stopPropagation();
          }
          // –î–ª—è mousedown - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–ª–∏–∫ –Ω–∞ controls
          if (e.type === 'mousedown' && !target.closest('.leaflet-control-zoom')) {
            e.preventDefault();
            e.stopPropagation();
          }
        };
        
        // –ë–ª–æ–∫–∏—Ä—É–µ–º wheel (—Å–∫—Ä–æ–ª–ª –∫–æ–ª–µ—Å–æ–º) –∏ touchmove (–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ)
        const preventWheel = (e: WheelEvent) => {
          e.preventDefault();
          e.stopPropagation();
        };
        
        const preventTouchMove = (e: TouchEvent) => {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–ª–∏–∫ –Ω–∞ controls
          const target = e.target as HTMLElement;
          if (!target.closest('.leaflet-control-zoom') && !target.closest('.leaflet-marker-icon')) {
            e.preventDefault();
            e.stopPropagation();
          }
        };
        
        container.addEventListener('wheel', preventWheel, { passive: false });
        container.addEventListener('touchmove', preventTouchMove, { passive: false });
        container.addEventListener('touchstart', preventDefault, { passive: false });
        
        return () => {
          container.style.touchAction = '';
          container.removeEventListener('wheel', preventWheel);
          container.removeEventListener('touchmove', preventTouchMove);
          container.removeEventListener('touchstart', preventDefault);
        };
      }
    } else {
      // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º: –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
      map.scrollWheelZoom.enable();
      map.dragging.enable();
      map.touchZoom.enable();
      map.doubleClickZoom.enable();
      map.boxZoom.enable();
      map.keyboard.enable();
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
      const container = map.getContainer();
      if (container) {
        container.style.touchAction = '';
        container.style.pointerEvents = '';
      }
    }
  }, [locked, map]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ zoom controls
  useEffect(() => {
    if (locked && onUnlock) {
      const handleZoomClick = () => {
        onUnlock();
      };

      // –°–ª—É—à–∞–µ–º –∫–ª–∏–∫–∏ –Ω–∞ zoom controls
      const zoomIn = document.querySelector('.leaflet-control-zoom-in');
      const zoomOut = document.querySelector('.leaflet-control-zoom-out');
      
      if (zoomIn) {
        zoomIn.addEventListener('click', handleZoomClick);
      }
      if (zoomOut) {
        zoomOut.addEventListener('click', handleZoomClick);
      }

      return () => {
        if (zoomIn) {
          zoomIn.removeEventListener('click', handleZoomClick);
        }
        if (zoomOut) {
          zoomOut.removeEventListener('click', handleZoomClick);
        }
      };
    }
  }, [locked, onUnlock]);

  return null;
}

// –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º encodeURIComponent –¥–ª—è —ç–º–æ–¥–∑–∏)
const createCustomIcon = (emoji: string, isPartner: boolean) => {
  const svg = `<svg width="32" height="32" xmlns="http://www.w3.org/2000/svg">
    <circle cx="16" cy="16" r="15" fill="${isPartner ? '#007AFF' : '#fff'}" stroke="${isPartner ? '#0056CC' : '#007AFF'}" stroke-width="2"/>
    <text x="16" y="22" font-size="16" text-anchor="middle">${emoji}</text>
  </svg>`;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º encodeURIComponent –≤–º–µ—Å—Ç–æ btoa –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —ç–º–æ–¥–∑–∏
  return new Icon({
    iconUrl: 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(svg),
    iconSize: [32, 32],
    iconAnchor: [16, 32],
    popupAnchor: [0, -32],
  });
};

const LeafletMap = ({ 
  places, 
  height = "calc(100vh - 200px)",
  selectedPlaceHandle,
  onPlaceClick,
  locked = true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (–Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ)
}: LeafletMapProps) => {
  // –¶–µ–Ω—Ç—Ä –∫–∞—Ä—Ç—ã (–ü—Ö—É–∫–µ—Ç)
  const center: [number, number] = [7.8804, 98.3923];
  const [isLocked, setIsLocked] = useState(locked);

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º isLocked —Å prop locked
  useEffect(() => {
    setIsLocked(locked);
  }, [locked]);

  return (
    <div 
      className="relative rounded-2xl overflow-hidden" 
      style={{ height }}
    >
      <MapContainer 
        center={center} 
        zoom={11} 
        style={{ 
          height: '100%', 
          width: '100%'
        }}
        className="z-0"
        scrollWheelZoom={false} // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ (–±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —á–µ—Ä–µ–∑ MapLockController)
        dragging={false} // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
        touchZoom={false} // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
        zoomControl={true} // Zoom controls –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã, –Ω–æ –∫–∞—Ä—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
      >
        {/* OpenStreetMap —Ç–∞–π–ª—ã —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */}
        <TileLayer
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          maxZoom={19}
        />
        
        {/* –°–∫—Ä—ã–≤–∞–µ–º –∞—Ç—Ä–∏–±—É—Ü–∏—é Leaflet —á–µ—Ä–µ–∑ CSS */}
        {/* –ö–†–ò–¢–ò–ß–ù–û: Zoom controls –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –¥–∞–∂–µ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ */}
        <style>{`
          .leaflet-container .leaflet-control-attribution {
            display: none !important;
          }
          /* Zoom controls –≤—Å–µ–≥–¥–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã (–¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã) */
          .leaflet-control-zoom {
            pointer-events: auto !important;
          }
          .leaflet-control-zoom-in,
          .leaflet-control-zoom-out {
            pointer-events: auto !important;
            cursor: pointer !important;
          }
        `}</style>
        
        {/* –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã */}
        <MapController selectedPlaceHandle={selectedPlaceHandle} places={places} />
        
        {/* –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∫–∞—Ä—Ç—ã */}
        <MapLockController 
          locked={isLocked} 
          onUnlock={() => setIsLocked(false)}
        />
        
        {/* –ú–∞—Ä–∫–µ—Ä—ã –º–µ—Å—Ç */}
        {places.map((place) => (
          <Marker
            key={place.handle}
            position={[place.lat, place.lng]}
            icon={createCustomIcon(place.emoji, place.isPartner)}
            eventHandlers={{
              click: () => {
                // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX
                if (isLocked) {
                  setIsLocked(false);
                }
                if (onPlaceClick) {
                  onPlaceClick(place);
                }
              }
            }}
          >
            <Popup className="custom-popup">
              <div className="p-2 min-w-[200px]">
                <div className="flex items-start gap-2 mb-2">
                  <span className="text-xl">{place.emoji}</span>
                  <div className="flex-1">
                    <h3 className="font-bold text-sm text-gray-900 leading-tight">
                      {place.title}
                    </h3>
                    {place.isPartner && (
                      <span className="inline-block mt-1 px-2 py-0.5 text-xs font-bold rounded-full bg-[#007AFF] text-white">
                        –ü–∞—Ä—Ç–Ω–µ—Ä
                      </span>
                    )}
                  </div>
                </div>
                
                <div className="flex items-center gap-3 text-xs text-gray-600 mb-3">
                  {place.rating && (
                    <span className="flex items-center gap-1">
                      <span className="text-yellow-500">‚≠ê</span>
                      {place.rating}
                    </span>
                  )}
                  {place.district && (
                    <span className="flex items-center gap-1">
                      üìç {place.district}
                    </span>
                  )}
                </div>
                
                <a
                  href={`/place/${place.handle}`}
                  onClick={(e) => {
                    e.preventDefault();
                    if (onPlaceClick) {
                      onPlaceClick(place);
                    }
                  }}
                  className="inline-flex items-center gap-1 text-[#007AFF] text-xs font-semibold hover:text-[#0056CC] transition-colors"
                >
                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
                </a>
              </div>
            </Popup>
          </Marker>
        ))}
      </MapContainer>
      
      {/* –ö–Ω–æ–ø–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–∞—Ä—Ç—ã - iOS 26 Style */}
      {/* –ö–†–ò–¢–ò–ß–ù–û: pointer-events: auto —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ —Ä–∞–±–æ—Ç–∞–ª–∞ –¥–∞–∂–µ –∫–æ–≥–¥–∞ –∫–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ */}
      <button
        onClick={() => setIsLocked(!isLocked)}
        style={{ pointerEvents: 'auto' }}
        className={`absolute top-4 right-4 z-[1000] p-3 rounded-full shadow-lg backdrop-blur-md transition-all ${
          isLocked
            ? 'bg-white/90 hover:bg-white border border-gray-200 text-gray-700'
            : 'bg-[#007AFF] hover:bg-[#0056CC] text-white'
        }`}
        title={isLocked ? '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É'}
      >
        {isLocked ? (
          <Unlock className="w-5 h-5" />
        ) : (
          <Lock className="w-5 h-5" />
        )}
      </button>
      
      {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞—Ä—Ç—ã - –ø—Ä–∞–≤–µ–µ –æ—Ç zoom controls */}
      {/* –ö–†–ò–¢–ò–ß–ù–û: pointer-events: auto —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∫–ª–∏–∫–∏ */}
      {isLocked && (
        <div 
          style={{ pointerEvents: 'auto' }}
          className="absolute top-4 left-20 z-[1000] px-3 py-1.5 rounded-full bg-white/90 backdrop-blur-md border border-gray-200 shadow-md text-xs font-medium text-gray-600 flex items-center gap-1.5"
        >
          <Navigation className="w-3.5 h-3.5 text-gray-500" />
          <span>–ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞</span>
        </div>
      )}
    </div>
  );
};

export default LeafletMap;

