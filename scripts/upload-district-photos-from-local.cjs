const https = require('https');
const fs = require('fs');
const path = require('path');

const SHOPIFY_STORE = 'phuket-telegram-shop-117ck.myshopify.com';
const SHOPIFY_ACCESS_TOKEN = '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';
const API_VERSION = '2025-07';

/**
 * üì∏ –ó–ê–ì–†–£–ó–ö–ê –†–ï–ê–õ–¨–ù–´–• –§–û–¢–û–ì–†–ê–§–ò–ô –†–ê–ô–û–ù–û–í –ò–ó –õ–û–ö–ê–õ–¨–ù–´–• –§–ê–ô–õ–û–í
 * 
 * ‚ö†Ô∏è –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ä–∞–π–æ–Ω–æ–≤!
 * ‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ñ–æ—Ç–æ—Å—Ç–æ–∫–∏ (Unsplash, Pexels, Pixabay)
 * ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–∏ —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –∞–≤—Ç–æ—Ä–∞
 * 
 * –ò–ù–°–¢–†–£–ö–¶–ò–Ø:
 * 1. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É: photos/districts/[district-name]/
 * 2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —ç—Ç—É –ø–∞–ø–∫—É (JPG, PNG)
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç: node scripts/upload-district-photos-from-local.cjs
 */

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
const PHOTOS_DIR = path.join(__dirname, '../photos/districts');

// –ú–∞–ø–ø–∏–Ω–≥ handles —Ä–∞–π–æ–Ω–æ–≤ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫
const districtFolders = {
  'patong-district': 'patong',
  'karon-district': 'karon',
  'kata-district': 'kata',
  'bangtao-district': 'bangtao',
  'rawai-district': 'rawai',
  'phuket-town-district': 'phuket-town',
  'surin-district': 'surin',
  'kamala-district': 'kamala',
  'chalong-district': 'chalong',
  'panwa-district': 'panwa',
  'nai-harn-district': 'nai-harn',
  'kathu-district': 'kathu',
  'cherngtalay-district': 'cherngtalay',
  'naiyang-district': 'naiyang',
  'thalang-district': 'thalang'
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç Product ID –ø–æ handle
 */
function getProductId(handle) {
  return new Promise((resolve, reject) => {
    const query = `
      query {
        products(first: 1, query: "handle:${handle}") {
          edges {
            node {
              id
              title
            }
          }
        }
      }
    `;
    
    const data = JSON.stringify({ query });
    const options = {
      hostname: SHOPIFY_STORE,
      path: `/admin/api/${API_VERSION}/graphql.json`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': SHOPIFY_ACCESS_TOKEN,
        'Content-Length': Buffer.byteLength(data)
      }
    };
    
    const req = https.request(options, (res) => {
      let responseData = '';
      res.on('data', chunk => responseData += chunk);
      res.on('end', () => {
        try {
          const result = JSON.parse(responseData);
          const product = result.data?.products?.edges?.[0]?.node;
          if (product) {
            resolve({ id: product.id, title: product.title });
          } else {
            reject(new Error(`Product not found: ${handle}`));
          }
        } catch (error) {
          reject(error);
        }
      });
    });
    
    req.on('error', reject);
    req.write(data);
    req.end();
  });
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Shopify —á–µ—Ä–µ–∑ REST API (base64)
 */
function uploadImageToShopify(productId, filePath, filename, altText) {
  return new Promise((resolve, reject) => {
    try {
      if (!fs.existsSync(filePath)) {
        reject(new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`));
        return;
      }

      let fileBuffer = fs.readFileSync(filePath);
      const fileSizeKB = (fileBuffer.length / 1024).toFixed(2);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–Ω–µ –±–æ–ª—å—à–µ 5MB –¥–ª—è Shopify)
      if (fileBuffer.length > 5 * 1024 * 1024) {
        reject(new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${fileSizeKB} KB (–º–∞–∫—Å–∏–º—É–º 5MB)`));
        return;
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PNG –≤ JPG –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (Shopify –ª—É—á—à–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç JPG)
      let finalFilename = filename;
      if (path.extname(filename).toLowerCase() === '.png') {
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º sips (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —É—Ç–∏–ª–∏—Ç–∞ macOS) –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
          const { execSync } = require('child_process');
          const jpgPath = filePath.replace(/\.png$/i, '.jpg');
          execSync(`sips -s format jpeg -s formatOptions 85 "${filePath}" --out "${jpgPath}" 2>&1`);
          fileBuffer = fs.readFileSync(jpgPath);
          finalFilename = filename.replace(/\.png$/i, '.jpg');
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JPG —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –ø–æ–∑–∂–µ)
        } catch (convError) {
          console.error(`      ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PNG –≤ JPG: ${convError.message}`);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å PNG
        }
      }
      
      const base64Image = fileBuffer.toString('base64');
      
      const imageData = JSON.stringify({
        image: {
          attachment: base64Image,
          filename: finalFilename,
          alt: altText
        }
      });
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–π ID –∏–∑ GID (–Ω–∞–ø—Ä–∏–º–µ—Ä: gid://shopify/Product/7982938423350 -> 7982938423350)
      const numericProductId = productId.replace(/^gid:\/\/shopify\/Product\//, '');
      
      const options = {
        hostname: SHOPIFY_STORE,
        path: `/admin/api/${API_VERSION}/products/${numericProductId}/images.json`,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Access-Token': SHOPIFY_ACCESS_TOKEN,
          'Content-Length': Buffer.byteLength(imageData)
        }
      };
      
      const req = https.request(options, (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          if (res.statusCode === 200 || res.statusCode === 201) {
            const result = JSON.parse(data).image;
            resolve({ ...result, fileSizeKB });
          } else {
            // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
            let errorMsg = `HTTP ${res.statusCode}`;
            try {
              const errorData = JSON.parse(data);
              errorMsg += `: ${JSON.stringify(errorData)}`;
            } catch (e) {
              errorMsg += `: ${data.substring(0, 500)}`;
            }
            console.error(`      üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:`, errorMsg);
            reject(new Error(errorMsg));
          }
        });
      });
      
      req.on('error', reject);
      req.write(imageData);
      req.end();
    } catch (error) {
      reject(error);
    }
  });
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –ø–∞–ø–∫–µ —Ä–∞–π–æ–Ω–∞
 */
function findPhotosInFolder(folderPath) {
  if (!fs.existsSync(folderPath)) {
    return [];
  }
  
  const files = fs.readdirSync(folderPath);
  return files
    .filter(file => {
      const ext = path.extname(file).toLowerCase();
      return ['.jpg', '.jpeg', '.png', '.webp'].includes(ext);
    })
    .map(file => ({
      filename: file,
      path: path.join(folderPath, file),
      ext: path.extname(file).toLowerCase()
    }))
    .sort((a, b) => a.filename.localeCompare(b.filename)); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üì∏ –ó–ê–ì–†–£–ó–ö–ê –†–ï–ê–õ–¨–ù–´–• –§–û–¢–û–ì–†–ê–§–ò–ô –†–ê–ô–û–ù–û–í –ò–ó –õ–û–ö–ê–õ–¨–ù–´–• –§–ê–ô–õ–û–í\n');
  console.log('='.repeat(60));
  console.log('üìÅ –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏:', PHOTOS_DIR);
  console.log('‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!');
  console.log('='.repeat(60));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–∏
  if (!fs.existsSync(PHOTOS_DIR)) {
    console.log(`\n‚ö†Ô∏è  –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${PHOTOS_DIR}`);
    console.log(`\nüìù –ò–ù–°–¢–†–£–ö–¶–ò–Ø:`);
    console.log(`   1. –°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É: ${PHOTOS_DIR}`);
    console.log(`   2. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–¥–ø–∞–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–π–æ–Ω–∞:`);
    console.log(`      ${PHOTOS_DIR}/patong/`);
    console.log(`      ${PHOTOS_DIR}/karon/`);
    console.log(`      ${PHOTOS_DIR}/kata/`);
    console.log(`      ... –∏ —Ç.–¥.`);
    console.log(`   3. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (JPG, PNG) –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–ø–∫–∏`);
    console.log(`   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞\n`);
    return;
  }
  
  let totalSuccess = 0;
  let totalErrors = 0;
  let totalSkipped = 0;
  
  for (const [handle, folderName] of Object.entries(districtFolders)) {
    const districtFolder = path.join(PHOTOS_DIR, folderName);
    const photos = findPhotosInFolder(districtFolder);
    
    console.log(`\nüìÅ ${handle.toUpperCase()}`);
    console.log(`   –ü–∞–ø–∫–∞: ${districtFolder}`);
    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ: ${photos.length}`);
    
    if (photos.length === 0) {
      console.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π)`);
      totalSkipped++;
      continue;
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º Product ID
      const { id: productId, title } = await getProductId(handle);
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω: ${title} (${productId})`);
      
      let successCount = 0;
      let errorCount = 0;
      
      for (let i = 0; i < photos.length; i++) {
        const photo = photos[i];
        const altText = `${title} - Photo ${i + 1}`;
        
        try {
          console.log(`\n   üì∑ [${i + 1}/${photos.length}] ${photo.filename}`);
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Shopify
          const image = await uploadImageToShopify(
            productId,
            photo.path,
            photo.filename,
            altText
          );
          
          console.log(`      ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ! ID: ${image.id}, –†–∞–∑–º–µ—Ä: ${image.fileSizeKB} KB`);
          
          successCount++;
          totalSuccess++;
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–≥—Ä—É–∑–∫–∞–º–∏
          if (i < photos.length - 1) {
            await new Promise(resolve => setTimeout(resolve, 2000));
          }
        } catch (error) {
          console.error(`      ‚ùå –û—à–∏–±–∫–∞:`, error.message);
          errorCount++;
          totalErrors++;
        }
      }
      
      console.log(`\n   üìä –ò—Ç–æ–≥: ${successCount}/${photos.length} —É—Å–ø–µ—à–Ω–æ, ${errorCount} –æ—à–∏–±–æ–∫`);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ä–∞–π–æ–Ω–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000));
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:`, error.message);
      totalErrors++;
    }
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –ò–¢–û–ì:');
  console.log('='.repeat(60));
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${totalSuccess} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${totalErrors}`);
  console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ñ–æ—Ç–æ): ${totalSkipped} —Ä–∞–π–æ–Ω–æ–≤`);
  console.log(`\nüîó –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ: http://localhost:8080/place/[district-handle]`);
  console.log(`\nüí° –°–û–í–ï–¢: –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–∞–ø–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!`);
}

main().catch(console.error);

