#!/usr/bin/env node

/**
 * ü§ñ Simple Telegram Bot Test Script
 * 
 * Long Polling implementation for development/testing
 * Run: node scripts/test-bot.js
 */

const TELEGRAM_BOT_TOKEN = '8356364393:AAFP9HK9JM8PCRJqEHcZ9WAg2J_WYx7ftn4';
const OPENAI_API_KEY = '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';
const WEBAPP_URL = process.env.WEBAPP_URL || 'http://localhost:8080';

let offset = 0;

/**
 * Get updates from Telegram Bot API
 */
async function getUpdates() {
  try {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates?offset=${offset}&timeout=30`;
    const response = await fetch(url);
    const data = await response.json();
    
    if (data.ok && data.result.length > 0) {
      for (const update of data.result) {
        offset = update.update_id + 1;
        await handleUpdate(update);
      }
    }
  } catch (error) {
    console.error('‚ùå Error getting updates:', error.message);
  }
  
  // Continue polling
  setTimeout(getUpdates, 100);
}

/**
 * Handle incoming update
 */
async function handleUpdate(update) {
  const message = update.message;
  if (!message) return;
  
  const chatId = message.chat.id;
  const text = message.text;
  const userName = message.from.first_name;
  
  console.log(`\nüì© Message from ${userName} (${message.from.id}):`);
  console.log(`   "${text}"`);
  
  if (text === '/start') {
    await sendWelcomeMessage(chatId, userName);
  } else if (text === '/help') {
    await sendHelpMessage(chatId);
  } else {
    // AI-powered response using ChatGPT
    await sendChatAction(chatId, 'typing');
    const aiResponse = await chatWithGPT(text);
    await sendTextMessage(chatId, aiResponse);
    await sendWebAppButton(chatId);
  }
}

/**
 * Send text message
 */
async function sendTextMessage(chatId, text) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
      }),
    });
    
    const data = await response.json();
    if (!data.ok) {
      console.error('Failed to send message:', data.description);
    }
  } catch (error) {
    console.error('Error sending message:', error.message);
  }
}

/**
 * Send welcome message with WebApp button
 */
async function sendWelcomeMessage(chatId, userName) {
  const welcomeText = `
üëã <b>–ü—Ä–∏–≤–µ—Ç, ${userName}!</b>

–Ø - <b>PhuketDa –±–æ—Ç</b>! üèùÔ∏è

–ü–æ–º–æ–≥—É –≤–∞–º:
‚úÖ –í—ã–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ
‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é –∑–∞ 2 –º–∏–Ω—É—Ç—ã
‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ä—ã! üëá</i>
  `.trim();
  
  await sendTextMessage(chatId, welcomeText);
  await sendWebAppButton(chatId);
  
  console.log(`‚úÖ Sent welcome message to ${userName}`);
}

/**
 * Send help message
 */
async function sendHelpMessage(chatId) {
  const helpText = `
<b>üìö –°–ø—Ä–∞–≤–∫–∞ PhuketDa Bot</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "üéüÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ä—ã"
2. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç—É—Ä
3. –î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
4. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
Telegram —á–∞—Ç: @PhuketDaChat (4,500+ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!)

<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá</i>
  `.trim();
  
  await sendTextMessage(chatId, helpText);
  await sendWebAppButton(chatId);
}

/**
 * Send WebApp button
 */
async function sendWebAppButton(chatId) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        text: 'üèùÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:</b>',
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üéüÔ∏è –°–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ä—ã',
                web_app: { url: `${WEBAPP_URL}/tours` }
              }
            ],
            [
              {
                text: 'üìö Phuket Insider',
                web_app: { url: `${WEBAPP_URL}/insider` }
              }
            ],
            [
              {
                text: 'üè† –ì–ª–∞–≤–Ω–∞—è',
                web_app: { url: WEBAPP_URL }
              }
            ]
          ]
        }
      }),
    });
    
    const data = await response.json();
    if (!data.ok) {
      console.error('Failed to send WebApp button:', data.description);
    }
  } catch (error) {
    console.error('Error sending WebApp button:', error.message);
  }
}

/**
 * Send chat action (typing indicator)
 */
async function sendChatAction(chatId, action) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendChatAction`;
  try {
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: chatId,
        action: action // 'typing', 'upload_photo', etc.
      }),
    });
  } catch (error) {
    console.error('Error sending chat action:', error.message);
  }
}

/**
 * Chat with GPT-4 Turbo
 */
async function chatWithGPT(userMessage) {
  const SYSTEM_PROMPT = `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç—É—Ä–∞–º –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ PhuketDa.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü–æ–Ω—è—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Ç—É—Ä–∏—Å—Ç–∞ (–±—é–¥–∂–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
2. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–æ–ø-3 —Ç—É—Ä–∞ –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
3. –û—Ç–≤–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É (–º–∞–∫—Å–∏–º—É–º 3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
4. –ë—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º

–ù–∞—à–∏ —Ç—É—Ä—ã:
1. üèùÔ∏è –ü—Ö–∏-–ü—Ö–∏ 2 –¥–Ω—è/1 –Ω–æ—á—å - $120 –≤–∑—Ä–æ—Å–ª—ã–π, $90 –¥–µ—Ç—Å–∫–∏–π - —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π, Maya Bay
2. üèùÔ∏è James Bond Island - $90 –≤–∑—Ä–æ—Å–ª—ã–π - –∫–ª–∞—Å—Å–∏–∫–∞ –ü—Ö—É–∫–µ—Ç–∞
3. üíé 4 Pearls Andaman Sea - $150 –≤–∑—Ä–æ—Å–ª—ã–π - –ø—Ä–µ–º–∏—É–º —Ç—É—Ä
4. üåä 11 Islands Mega Tour - $180 –≤–∑—Ä–æ—Å–ª—ã–π - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ—Ö–≤–∞—Ç
5. ‚õµ –°–∏–º–∏–ª–∞–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞ - $150 –≤–∑—Ä–æ—Å–ª—ã–π - –ª—É—á—à–∏–π —Å–Ω–æ—Ä–∫–ª–∏–Ω–≥
6. üö£ Rafting + SPA + ATV - $130 –≤–∑—Ä–æ—Å–ª—ã–π - –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
7. üèñÔ∏è –ö—Ä–∞–±–∏ 4 –æ—Å—Ç—Ä–æ–≤–∞ - $100 –≤–∑—Ä–æ—Å–ª—ã–π - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –ü—Ö–∏-–ü—Ö–∏
8. üê† Coral Island - $80 –≤–∑—Ä–æ—Å–ª—ã–π - –¥–ª—è —Å–µ–º–µ–π
9. üõï Temples Tour - $70 –≤–∑—Ä–æ—Å–ª—ã–π - –∫—É–ª—å—Ç—É—Ä–∞
10. üåÖ Sunset Cruise - $110 –≤–∑—Ä–æ—Å–ª—ã–π - —Ä–æ–º–∞–Ω—Ç–∏–∫–∞

–ü—Ä–∞–≤–∏–ª–∞:
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ç—É—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
- –†–µ–∫–æ–º–µ–Ω–¥—É–π –ú–ê–ö–°–ò–ú–£–ú 3 —Ç—É—Ä–∞
- –£–∫–∞–∑—ã–≤–∞–π —Ü–µ–Ω—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
- –ó–∞–∫–∞–Ω—á–∏–≤–∞–π: "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å! üéüÔ∏è"
  `.trim();

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: 'gpt-4-turbo-preview',
        messages: [
          { role: 'system', content: SYSTEM_PROMPT },
          { role: 'user', content: userMessage }
        ],
        temperature: 0.7,
        max_tokens: 500
      })
    });

    if (!response.ok) {
      throw new Error(`OpenAI API Error: ${response.statusText}`);
    }

    const data = await response.json();
    return data.choices[0].message.content;
  } catch (error) {
    console.error('‚ùå ChatGPT Error:', error.message);
    return `–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à–∏ —Ç—É—Ä—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üèùÔ∏è`;
  }
}

// Start bot
console.log('ü§ñ PhuketDa Bot Started with AI! üß†');
console.log('üì± Bot: @PHUKETDABOT');
console.log(`üåê WebApp URL: ${WEBAPP_URL}`);
console.log('ü§ñ AI: GPT-4 Turbo Powered ‚ú®');
console.log('\nüëâ Open Telegram and send /start to @PHUKETDABOT\n');
console.log('Listening for messages...\n');

getUpdates();
