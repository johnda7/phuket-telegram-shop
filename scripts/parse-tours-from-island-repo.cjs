#!/usr/bin/env node

/**
 * üì¶ –ü–ê–†–°–ò–ù–ì –¢–£–†–û–í –ò–ó –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø island-travel-echo-clone
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∫–∏–µ —Ç—É—Ä—ã —É–∂–µ –µ—Å—Ç—å –≤ Shopify
 * 2. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–ª–æ–∫–∞–ª—å–Ω—ã–π –∫–ª–æ–Ω)
 * 3. –ù–∞—Ö–æ–¥–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç—É—Ä—ã
 * 4. –ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
 * 5. –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤ Shopify –ø–æ –Ω–∞—à–µ–º—É —à–∞–±–ª–æ–Ω—É
 * 
 * –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
 * - –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω –≤ ../island-travel-echo-clone
 * - –ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å —á–µ—Ä–µ–∑ --repo-path=/path/to/repo
 */

const https = require('https');
const fs = require('fs');
const path = require('path');

// Shopify credentials
const SHOPIFY_STORE = 'phuket-telegram-shop-117ck.myshopify.com';
const ADMIN_TOKEN = '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';
const API_VERSION = '2025-07';

const ADMIN_URL = `https://${SHOPIFY_STORE}/admin/api/${API_VERSION}/graphql.json`;

// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const args = process.argv.slice(2);
const repoPath = args.find(a => a.startsWith('--repo-path='))?.split('=')[1] 
  || path.join(__dirname, '..', '..', 'island-travel-echo-clone');
const APPLY = args.includes('--apply');

console.log('üì¶ –ü–ê–†–°–ò–ù–ì –¢–£–†–û–í –ò–ó –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø');
console.log(`üìç –ü—É—Ç—å –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é: ${repoPath}`);
console.log(`‚öôÔ∏è  –†–µ–∂–∏–º: ${APPLY ? 'APPLY (—Ä–µ–∞–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å)' : 'DRY-RUN (—Ç–µ—Å—Ç)'}\n`);

// ============================================================================
// 1. –ü–û–õ–£–ß–ï–ù–ò–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –¢–£–†–û–í –ò–ó SHOPIFY
// ============================================================================

async function makeGraphQLRequest(query, variables = {}) {
  return new Promise((resolve, reject) => {
    const req = https.request({
      method: 'POST',
      hostname: SHOPIFY_STORE,
      path: `/admin/api/${API_VERSION}/graphql.json`,
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Access-Token': ADMIN_TOKEN,
      },
    }, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const data = JSON.parse(body);
          if (data.errors) {
            reject(new Error(JSON.stringify(data.errors)));
          } else {
            resolve(data.data);
          }
        } catch (e) {
          reject(e);
        }
      });
    });
    req.on('error', reject);
    req.write(JSON.stringify({ query, variables }));
    req.end();
  });
}

async function getExistingTours() {
  console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—É—Ä—ã –∏–∑ Shopify...');
  
  const query = `
    query GetTours($first: Int!, $after: String) {
      products(first: $first, after: $after, query: "product_type:Excursions") {
        edges {
          node {
            id
            title
            handle
            tags
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  `;
  
  const allTours = [];
  let after = null;
  
  do {
    const data = await makeGraphQLRequest(query, { first: 100, after });
    const { edges, pageInfo } = data.products;
    allTours.push(...edges.map(e => e.node));
    after = pageInfo.hasNextPage ? pageInfo.endCursor : null;
    console.log(`   –ó–∞–≥—Ä—É–∂–µ–Ω–æ: ${allTours.length}`);
  } while (after);
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤ –≤ Shopify: ${allTours.length}\n`);
  return allTours.map(t => t.handle.toLowerCase());
}

// ============================================================================
// 2. –ü–ê–†–°–ò–ù–ì –¢–£–†–û–í –ò–ó –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø
// ============================================================================

function parseTourFromRepo(repoPath, tourId) {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç—É—Ä –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    const possiblePaths = [
      path.join(repoPath, 'src', 'data', 'tours.ts'),
      path.join(repoPath, 'src', 'data', 'tours', `${tourId}`, 'data.ts'),
      path.join(repoPath, 'src', 'pages', `${tourId}.tsx`),
    ];
    
    // –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü
    const pagesPath = path.join(repoPath, 'src', 'pages');
    if (fs.existsSync(pagesPath)) {
      const files = fs.readdirSync(pagesPath);
      const matchingFile = files.find(f => 
        f.toLowerCase().includes(tourId.toLowerCase()) || 
        f.toLowerCase().includes(tourId.replace(/-/g, '').toLowerCase())
      );
      if (matchingFile) {
        possiblePaths.push(path.join(pagesPath, matchingFile));
      }
    }
    
    // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    for (const filePath of possiblePaths) {
      if (fs.existsSync(filePath)) {
        const content = fs.readFileSync(filePath, 'utf8');
        return parseTourContent(content, tourId, filePath);
      }
    }
    
    return null;
  } catch (error) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${tourId}:`, error.message);
    return null;
  }
}

function parseTourContent(content, tourId, filePath) {
  // –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—É—Ä–∞
  const tour = {
    id: tourId,
    title: '',
    description: '',
    priceAdult: 0,
    priceChild: 0,
    duration: '',
    images: [],
    schedule: [],
    included: [],
    notIncluded: [],
    tags: ['tour'],
  };
  
  // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è title
  const titlePatterns = [
    // –ò–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã: const tourData = { title: "..." }
    /(?:const|export\s+const)\s+\w+TourData?\s*[=:]\s*\{[^}]*title:\s*['"]([^'"]+)['"]/i,
    // –ò–∑ JSX: <h1>...</h1>
    /<h1[^>]*>([^<]+)<\/h1>/i,
    // –ü—Ä–æ—Å—Ç–æ–π title: title: "..."
    /title:\s*['"]([^'"]+)['"]/i,
    // –ò–∑ useMetaTags
    /useMetaTags\([^)]*title:\s*['"]([^'"]+)['"]/i,
  ];
  
  for (const pattern of titlePatterns) {
    const match = content.match(pattern);
    if (match && match[1] && match[1].length > 3 && !match[1].includes('{')) {
      tour.title = match[1].trim();
      break;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ title, —Å–æ–∑–¥–∞–µ–º –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  if (!tour.title || tour.title.length < 3) {
    const fileNameBase = path.basename(filePath, path.extname(filePath))
      .replace(/New$/, '')
      .replace(/Tour$/, '');
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º CamelCase –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç
    tour.title = fileNameBase
      .replace(/([A-Z])/g, ' $1')
      .replace(/^./, str => str.toUpperCase())
      .trim();
  }
  
  // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—ã - —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  const pricePatterns = [
    /priceAdult:\s*(\d+)/i,
    /adultPrice:\s*(\d+)/i,
    /price_adult:\s*(\d+)/i,
    /–≤–∑—Ä–æ—Å–ª—ã–π[:\s]+(\d+)/i,
    /–≤–∑—Ä–æ—Å–ª—ã–π[^<]*<[^>]*>(\d+)/i,
  ];
  
  for (const pattern of pricePatterns) {
    const match = content.match(pattern);
    if (match && parseInt(match[1]) > 500) {
      tour.priceAdult = parseInt(match[1]);
      break;
    }
  }
  
  const childPricePatterns = [
    /priceChild:\s*(\d+)/i,
    /childPrice:\s*(\d+)/i,
    /price_child:\s*(\d+)/i,
    /–¥–µ—Ç—Å–∫–∏–π[:\s]+(\d+)/i,
    /—Ä–µ–±—ë–Ω–æ–∫[:\s]+(\d+)/i,
  ];
  
  for (const pattern of childPricePatterns) {
    const match = content.match(pattern);
    if (match && parseInt(match[1]) > 300) {
      tour.priceChild = parseInt(match[1]);
      break;
    }
  }
  
  // –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  const durationMatch = content.match(/(?:duration|length):\s*['"]([^'"]+)['"]/i);
  if (durationMatch) {
    tour.duration = durationMatch[1];
  }
  
  // –ü–∞—Ä—Å–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ
  const descPatterns = [
    /description:\s*['"`]([^'"`]+)['"`]/i,
    /<p[^>]*class="[^"]*description[^"]*"[^>]*>([^<]+)<\/p>/i,
  ];
  
  for (const pattern of descPatterns) {
    const match = content.match(pattern);
    if (match && match[1].length > 20) {
      tour.description = match[1].trim();
      break;
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –ø–æ tourId - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
  const tourIdLower = tourId.toLowerCase();
  
  if (tourIdLower.includes('phiphi') || tourIdLower.includes('phi-phi')) {
    if (tourIdLower.includes('2') || tourIdLower.includes('night')) {
      tour.tags.push('islands', 'phi-phi', '2-days', 'popular');
      if (!tour.duration) tour.duration = '2 –¥–Ω—è / 1 –Ω–æ—á—å';
      if (!tour.priceAdult) tour.priceAdult = 4500;
    } else {
      tour.tags.push('islands', 'phi-phi', '1-day');
      if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
      if (!tour.priceAdult) tour.priceAdult = 1800;
    }
  } else if (tourIdLower.includes('james') && tourIdLower.includes('bond')) {
    tour.tags.push('islands', 'james-bond', 'phang-nga', '1-day', 'popular');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1400;
  } else if (tourIdLower.includes('similan')) {
    tour.tags.push('islands', 'similan', '1-day', 'snorkeling', 'diving', 'popular');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2500;
  } else if (tourIdLower.includes('racha') && tourIdLower.includes('coral')) {
    tour.tags.push('islands', 'racha', 'coral', '1-day', 'snorkeling');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1800;
  } else if (tourIdLower.includes('pearl') && tourIdLower.includes('andaman')) {
    tour.tags.push('islands', '4-pearls', 'andaman', '1-day', 'snorkeling', 'popular');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2000;
  } else if (tourIdLower.includes('eleven') || tourIdLower.includes('11')) {
    tour.tags.push('islands', '11-islands', 'phang-nga', '1-day', 'popular');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 4200;
  } else if (tourIdLower.includes('rafting') && (tourIdLower.includes('atv') || tourIdLower.includes('spa'))) {
    tour.tags.push('adventures', 'rafting', 'atv', 'spa', 'elephants', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1700;
  } else if (tourIdLower.includes('kaolak') || tourIdLower.includes('kao-lak')) {
    tour.tags.push('elephants', 'safari', 'jungle', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1300;
  } else if (tourIdLower.includes('avatar')) {
    tour.tags.push('adventure', 'zipline', 'elephants', 'jungle', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1800;
  } else if (tourIdLower.includes('cheolan') || tourIdLower.includes('cheo-lan')) {
    tour.tags.push('lake', 'nature', 'khao-sok', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2200;
  } else if (tourIdLower.includes('phangnga') || tourIdLower.includes('phang-nga')) {
    if (tourIdLower.includes('skywalk')) {
      tour.tags.push('phang-nga', 'skywalk', 'viewpoint', '1-day');
      if (!tour.priceAdult) tour.priceAdult = 1500;
    } else {
      tour.tags.push('islands', 'phang-nga', '1-day');
      if (!tour.priceAdult) tour.priceAdult = 1800;
    }
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
  } else if (tourIdLower.includes('krabi')) {
    tour.tags.push('islands', 'krabi', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2000;
  } else if (tourIdLower.includes('fishing')) {
    tour.tags.push('fishing', 'sunrise', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2500;
  } else if (tourIdLower.includes('dostoprimechatelnosti')) {
    tour.tags.push('attractions', 'culture', 'temples', '1-day');
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 1500;
  } else {
    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (!tour.duration) tour.duration = '1 –¥–µ–Ω—å';
    if (!tour.priceAdult) tour.priceAdult = 2000;
    if (tour.duration.includes('1') && !tour.duration.includes('2')) {
      tour.tags.push('1-day');
    } else if (tour.duration.includes('2')) {
      tour.tags.push('2-days');
    }
  }
  
  return tour;
}

// ============================================================================
// 3. –ü–û–ò–°–ö –¢–£–†–û–í –í –†–ï–ü–û–ó–ò–¢–û–†–ò–ò
// ============================================================================

function findToursInRepo(repoPath) {
  console.log('üîç –ò—â–µ–º —Ç—É—Ä—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏...');
  
  const tours = [];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  const dataPath = path.join(repoPath, 'src', 'data');
  const pagesPath = path.join(repoPath, 'src', 'pages');
  
  // –ò—â–µ–º –≤ src/data/tours.ts –∏–ª–∏ src/data/tours/
  if (fs.existsSync(dataPath)) {
    const toursFile = path.join(dataPath, 'tours.ts');
    if (fs.existsSync(toursFile)) {
      const content = fs.readFileSync(toursFile, 'utf8');
      // –ü–∞—Ä—Å–∏–º —ç–∫—Å–ø–æ—Ä—Ç—ã —Ç—É—Ä–æ–≤
      const tourExports = content.match(/export\s+(?:const|interface|type)\s+(\w+Tour\w*)/gi) || [];
      console.log(`   –ù–∞–π–¥–µ–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ —Ç—É—Ä–æ–≤: ${tourExports.length}`);
    }
    
    // –ò—â–µ–º –ø–∞–ø–∫–∏ —Å —Ç—É—Ä–∞–º–∏
    const toursDir = path.join(dataPath, 'tours');
    if (fs.existsSync(toursDir) && fs.statSync(toursDir).isDirectory()) {
      const tourDirs = fs.readdirSync(toursDir);
      tourDirs.forEach(dir => {
        const tourPath = path.join(toursDir, dir);
        if (fs.statSync(tourPath).isDirectory()) {
          tours.push({
            id: dir,
            path: tourPath,
          });
        }
      });
    }
  }
  
  // –ò—â–µ–º –≤ src/pages/ (TSX –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—É—Ä–æ–≤)
  if (fs.existsSync(pagesPath)) {
    const pageFiles = fs.readdirSync(pagesPath).filter(f => 
      f.endsWith('.tsx') && 
      !f.includes('Index') && 
      !f.includes('NotFound') &&
      !f.includes('Cart')
    );
    
    pageFiles.forEach(file => {
      const tourId = file.replace('.tsx', '').toLowerCase().replace(/([A-Z])/g, '-$1').toLowerCase();
      tours.push({
        id: tourId,
        path: path.join(pagesPath, file),
        isPage: true,
      });
    });
  }
  
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: ${tours.length}\n`);
  return tours;
}

// ============================================================================
// 4. –°–û–ó–î–ê–ù–ò–ï –¢–û–í–ê–†–ê –í SHOPIFY
// ============================================================================

function generateHandle(title) {
  return title
    .toLowerCase()
    .replace(/[^\w\s-]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –∏ —ç–º–æ–¥–∑–∏
    .replace(/\s+/g, '-')      // –ü—Ä–æ–±–µ–ª—ã –≤ –¥–µ—Ñ–∏—Å—ã
    .replace(/-+/g, '-')       // –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã –≤ –æ–¥–∏–Ω
    .trim();
}

function generatePremiumDescription(tour) {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —à–∞–±–ª–æ–Ω –ø—Ä–µ–º–∏—É–º –æ–ø–∏—Å–∞–Ω–∏—è
  return `
<h1>${tour.title}</h1>

<p><strong>üéØ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</strong><br>
${tour.description || '–ù–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –ª—É—á—à–∏–º –º–µ—Å—Ç–∞–º –ü—Ö—É–∫–µ—Ç–∞!'}</p>

${tour.duration ? `<p><strong>‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</strong> ${tour.duration}</p>` : ''}

<h2>‚ú® –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Ç—É—Ä</h2>
<ul>
${tour.included.map(item => `<li>‚úì ${item}</li>`).join('\n') || '<li>‚úì –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥</li>'}
</ul>

${tour.notIncluded.length > 0 ? `
<h2>‚ö†Ô∏è –ù–µ –≤–∫–ª—é—á–µ–Ω–æ</h2>
<ul>
${tour.notIncluded.map(item => `<li>‚úó ${item}</li>`).join('\n')}
</ul>
` : ''}

${tour.schedule.length > 0 ? `
<h2>üìÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—É—Ä–∞</h2>
${tour.schedule.map((day, idx) => `
<h3>–î–µ–Ω—å ${idx + 1}</h3>
<ul>
${day.activities ? day.activities.map(a => `<li>${a}</li>`).join('\n') : ''}
</ul>
`).join('\n')}
` : ''}

<h2>üéØ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—É—Ä</h2>
<p>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ <a href="https://t.me/PHUKETDABOT">Telegram</a> –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!</p>
  `.trim();
}

async function createTourInShopify(tour) {
  const handle = generateHandle(tour.title || tour.id);
  
  const mutation = `
    mutation CreateProduct($input: ProductInput!) {
      productCreate(input: $input) {
        product {
          id
          title
          handle
        }
        userErrors {
          field
          message
        }
      }
    }
  `;
  
  const descriptionHtml = generatePremiumDescription(tour);
  
  const input = {
    title: tour.title || tour.id,
    handle: handle,
    productType: 'Excursions',
    tags: tour.tags,
    descriptionHtml: descriptionHtml.replace(/"/g, '\\"'),
    variants: [
      {
        title: '–í–∑—Ä–æ—Å–ª—ã–π',
        price: String(tour.priceAdult || 1500),
      },
      ...(tour.priceChild > 0 ? [{
        title: '–î–µ—Ç—Å–∫–∏–π (4-11 –ª–µ—Ç)',
        price: String(tour.priceChild),
      }] : []),
    ],
  };
  
  if (!APPLY) {
    console.log(`üß™ DRY-RUN —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–∞:`, JSON.stringify(input, null, 2));
    return null;
  }
  
  const data = await makeGraphQLRequest(mutation, { input });
  
  if (data.productCreate.userErrors?.length > 0) {
    console.error(`   ‚ùå –û—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è:`, data.productCreate.userErrors);
    return null;
  }
  
  const product = data.productCreate.product;
  console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω: ${product.title} (${product.handle})`);
  
  // –ü—É–±–ª–∏–∫—É–µ–º –ø—Ä–æ–¥—É–∫—Ç
  await publishProduct(product.id);
  
  return product;
}

async function publishProduct(productId) {
  const mutation = `
    mutation PublishProduct($id: ID!) {
      publishablePublish(id: $id, input: { publicationId: "gid://shopify/Publication/online-store" }) {
        userErrors {
          field
          message
        }
      }
    }
  `;
  
  if (!APPLY) {
    return;
  }
  
  await makeGraphQLRequest(mutation, { id: productId });
  console.log(`   üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω`);
}

// ============================================================================
// 5. –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
// ============================================================================

async function main() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  if (!fs.existsSync(repoPath)) {
    console.error(`‚ùå –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: ${repoPath}`);
    console.error(`\nüí° –†–µ—à–µ–Ω–∏–µ:`);
    console.error(`   1. –ö–ª–æ–Ω–∏—Ä—É–π—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: git clone https://github.com/johnda7/island-travel-echo-clone.git`);
    console.error(`   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/parse-tours-from-island-repo.cjs --repo-path=/path/to/clone`);
    process.exit(1);
  }
  
  // 1. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—É—Ä—ã –∏–∑ Shopify
  const existingHandles = await getExistingTours();
  
  // 2. –ò—â–µ–º —Ç—É—Ä—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  const repoTours = findToursInRepo(repoPath);
  
  // 3. –§–∏–ª—å—Ç—Ä—É–µ–º - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ Shopify
  const missingTours = [];
  
  for (const repoTour of repoTours) {
    const parsedTour = parseTourFromRepo(repoPath, repoTour.id);
    if (!parsedTour) continue;
    
    const handle = generateHandle(parsedTour.title || repoTour.id);
    if (!existingHandles.includes(handle.toLowerCase())) {
      missingTours.push(parsedTour);
      console.log(`üìù –ù–∞–π–¥–µ–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π —Ç—É—Ä: ${parsedTour.title || repoTour.id}`);
      console.log(`   Handle: ${handle}`);
      console.log(`   –¶–µ–Ω–∞ –≤–∑—Ä–æ—Å–ª—ã–π: ${parsedTour.priceAdult || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   –¢–µ–≥–∏: ${parsedTour.tags.join(', ')}\n`);
    }
  }
  
  if (missingTours.length === 0) {
    console.log('‚úÖ –í—Å–µ —Ç—É—Ä—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —É–∂–µ –µ—Å—Ç—å –≤ Shopify!');
    return;
  }
  
  console.log(`\nüéØ –ù–∞–π–¥–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç—É—Ä–æ–≤: ${missingTours.length}\n`);
  
  // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç—É—Ä—ã
  for (let i = 0; i < missingTours.length; i++) {
    const tour = missingTours[i];
    console.log(`\nüì¶ [${i + 1}/${missingTours.length}] –ó–∞–≥—Ä—É–∂–∞–µ–º: ${tour.title || tour.id}`);
    
    try {
      await createTourInShopify(tour);
      await new Promise(resolve => setTimeout(resolve, 1500)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞:`, error.message);
    }
  }
  
  console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!');
  console.log(`üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—É—Ä—ã: http://localhost:8080/phuket`);
}

main().catch(console.error);

