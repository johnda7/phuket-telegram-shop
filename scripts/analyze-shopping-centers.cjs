#!/usr/bin/env node

/**
 * üîç –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –¶–ï–ù–¢–†–û–í
 * –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Å–µ –¢–¶ —Å —ç—Ç–∞–ª–æ–Ω–æ–º Central Phuket
 */

const ADMIN_API_TOKEN = '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';
const SHOP_DOMAIN = 'phuket-telegram-shop-117ck.myshopify.com';

// –¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
const SHOPPING_CENTERS = [
  'central-phuket-floresta',
  'jungceylon-shopping-center', 
  'premium-outlet-phuket',
  'big-c-supercenter-phuket',
  'tesco-lotus-phuket',
  'robinson-lifestyle-phuket',
  'patong-night-market'
];

async function analyzeShoppingCenters() {
  console.log('üîç –ê–ù–ê–õ–ò–ó –¢–û–†–ì–û–í–´–• –¶–ï–ù–¢–†–û–í');
  console.log('============================\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã
    const centers = await fetchShoppingCenters();
    
    console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤: ${centers.length}\n`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ü–µ–Ω—Ç—Ä
    for (const center of centers) {
      await analyzeCenter(center);
    }
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error);
  }
}

async function fetchShoppingCenters() {
  const query = `
    query {
      products(first: 20, query: "tag:shopping") {
        edges {
          node {
            id
            title
            handle
            description
            descriptionHtml
            tags
            images(first: 10) {
              edges {
                node {
                  id
                  url
                  altText
                }
              }
            }
            metafields(first: 20) {
              edges {
                node {
                  key
                  value
                  type
                  namespace
                }
              }
            }
          }
        }
      }
    }
  `;

  const response = await fetch(`https://${SHOP_DOMAIN}/admin/api/2025-07/graphql.json`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Shopify-Access-Token': ADMIN_API_TOKEN
    },
    body: JSON.stringify({ query })
  });

  const data = await response.json();
  
  if (data.errors) {
    throw new Error(`GraphQL –æ—à–∏–±–∫–∏: ${JSON.stringify(data.errors)}`);
  }
  
  return data.data.products.edges.map(edge => edge.node);
}

async function analyzeCenter(center) {
  console.log(`üè¢ ${center.title}`);
  console.log(`   Handle: ${center.handle}`);
  console.log(`   ID: ${center.id}`);
  
  // –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  const photoCount = center.images.edges.length;
  console.log(`   üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: ${photoCount} —à—Ç`);
  
  // –ê–Ω–∞–ª–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
  const hasDescription = center.description && center.description.length > 100;
  const hasHtmlDescription = center.descriptionHtml && center.descriptionHtml.length > 100;
  console.log(`   üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${hasDescription ? '‚úÖ' : '‚ùå'} (${center.description?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
  console.log(`   üìù HTML –æ–ø–∏—Å–∞–Ω–∏–µ: ${hasHtmlDescription ? '‚úÖ' : '‚ùå'} (${center.descriptionHtml?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
  
  // –ê–Ω–∞–ª–∏–∑ metafields
  const metafields = center.metafields?.edges?.map(edge => edge.node) || [];
  const hasRating = metafields.some(m => m.key === 'rating');
  const hasCoordinates = metafields.some(m => m.key === 'coordinates');
  const hasDistrict = metafields.some(m => m.key === 'district');
  const hasWorkingHours = metafields.some(m => m.key === 'workingHours');
  const hasPriceLevel = metafields.some(m => m.key === 'priceLevel');
  
  console.log(`   üìä Metafields:`);
  console.log(`      –†–µ–π—Ç–∏–Ω–≥: ${hasRating ? '‚úÖ' : '‚ùå'}`);
  console.log(`      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${hasCoordinates ? '‚úÖ' : '‚ùå'}`);
  console.log(`      –†–∞–π–æ–Ω: ${hasDistrict ? '‚úÖ' : '‚ùå'}`);
  console.log(`      –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: ${hasWorkingHours ? '‚úÖ' : '‚ùå'}`);
  console.log(`      –¶–µ–Ω–æ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: ${hasPriceLevel ? '‚úÖ' : '‚ùå'}`);
  
  // –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–ø–∏—Å–∞–Ω–∏—è
  if (center.descriptionHtml) {
    const hasH1 = center.descriptionHtml.includes('<h1>');
    const hasH2 = center.descriptionHtml.includes('<h2>');
    const hasH3 = center.descriptionHtml.includes('<h3>');
    const hasConversionBlock = center.descriptionHtml.includes('üéØ –•–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å');
    const hasServicesBlock = center.descriptionHtml.includes('–ù–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã');
    
    console.log(`   üé® –ö–∞—á–µ—Å—Ç–≤–æ HTML:`);
    console.log(`      H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫: ${hasH1 ? '‚úÖ' : '‚ùå'}`);
    console.log(`      H2 –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏: ${hasH2 ? '‚úÖ' : '‚ùå'}`);
    console.log(`      H3 –ø–æ–¥–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏: ${hasH3 ? '‚úÖ' : '‚ùå'}`);
    console.log(`      –ö–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫: ${hasConversionBlock ? '‚úÖ' : '‚ùå'}`);
    console.log(`      –ë–ª–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: ${hasServicesBlock ? '‚úÖ' : '‚ùå'}`);
  }
  
  // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
  const score = calculateScore(center, photoCount, hasDescription, hasHtmlDescription, metafields.length);
  console.log(`   üèÜ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: ${score}/10`);
  
  if (score < 8) {
    console.log(`   ‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø!`);
  } else {
    console.log(`   ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É`);
  }
  
  console.log('');
}

function calculateScore(center, photoCount, hasDescription, hasHtmlDescription, metafieldsCount) {
  let score = 0;
  
  // –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (–º–∞–∫—Å–∏–º—É–º 2 –±–∞–ª–ª–∞)
  if (photoCount >= 6) score += 2;
  else if (photoCount >= 3) score += 1;
  
  // –û–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 3 –±–∞–ª–ª–∞)
  if (hasHtmlDescription) score += 3;
  else if (hasDescription) score += 1;
  
  // Metafields (–º–∞–∫—Å–∏–º—É–º 3 –±–∞–ª–ª–∞)
  if (metafieldsCount >= 5) score += 3;
  else if (metafieldsCount >= 3) score += 2;
  else if (metafieldsCount >= 1) score += 1;
  
  // –ö–∞—á–µ—Å—Ç–≤–æ HTML (–º–∞–∫—Å–∏–º—É–º 2 –±–∞–ª–ª–∞)
  if (center.descriptionHtml) {
    const hasH1 = center.descriptionHtml.includes('<h1>');
    const hasH2 = center.descriptionHtml.includes('<h2>');
    const hasConversionBlock = center.descriptionHtml.includes('üéØ –•–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å');
    
    if (hasH1 && hasH2 && hasConversionBlock) score += 2;
    else if (hasH1 || hasH2) score += 1;
  }
  
  return score;
}

// –ó–∞–ø—É—Å–∫
analyzeShoppingCenters();
