const https = require('https');

const SHOPIFY_STORE = 'phuket-telegram-shop-117ck.myshopify.com';
const SHOPIFY_ACCESS_TOKEN = '89e6c827e100c3d0b35e5957424b3cc7';
const SHOPIFY_API_VERSION = '2025-07';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GraphQL –∑–∞–ø—Ä–æ—Å–æ–≤
function makeGraphQLRequest(query, variables = {}) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify({ query, variables });
    
    const options = {
      hostname: SHOPIFY_STORE,
      port: 443,
      path: `/api/${SHOPIFY_API_VERSION}/graphql.json`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Shopify-Storefront-Access-Token': SHOPIFY_ACCESS_TOKEN,
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = https.request(options, (res) => {
      let data = '';
      res.on('data', (chunk) => { data += chunk; });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          if (jsonData.errors) {
            reject(new Error(`GraphQL Errors: ${JSON.stringify(jsonData.errors)}`));
          } else {
            resolve(jsonData);
          }
        } catch (error) {
          reject(error);
        }
      });
    });

    req.on('error', reject);
    req.write(postData);
    req.end();
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîç –û–¢–õ–ê–î–ö–ê –ö–ê–¢–ï–ì–û–†–ò–ò SHOPPING');
  console.log('='.repeat(40));

  try {
    // 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    const query = `
      query GetProducts($first: Int!) {
        products(first: $first) {
          edges {
            node {
              id
              title
              handle
              productType
              tags
            }
          }
        }
      }
    `;
    
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã...');
    const data = await makeGraphQLRequest(query, { first: 50 });
    const products = data.data.products.edges;
    
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${products.length}`);
    
    // 2. –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ shopping
    const categoryTag = 'category:shopping';
    const shoppingProducts = products.filter(product => 
      product.node.tags.includes(categoryTag)
    );
    
    console.log(`üõçÔ∏è –ü—Ä–æ–¥—É–∫—Ç–æ–≤ —Å —Ç–µ–≥–æ–º "${categoryTag}": ${shoppingProducts.length}`);
    
    // 3. –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏
    shoppingProducts.forEach((product, index) => {
      console.log(`\nüìù [${index + 1}] ${product.node.title}`);
      console.log(`   Handle: ${product.node.handle}`);
      console.log(`   Product Type: ${product.node.productType}`);
      console.log(`   Tags: ${product.node.tags.join(', ')}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω—ã–µ —Ç–µ–≥–∏
      const hasInfo = product.node.tags.includes('info');
      const hasInsider = product.node.tags.includes('insider');
      const hasShopping = product.node.tags.includes('shopping');
      
      console.log(`   ‚úÖ info: ${hasInfo ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚úÖ insider: ${hasInsider ? '‚úÖ' : '‚ùå'}`);
      console.log(`   ‚úÖ shopping: ${hasShopping ? '‚úÖ' : '‚ùå'}`);
    });
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
    const missingInfo = shoppingProducts.filter(p => !p.node.tags.includes('info'));
    const missingInsider = shoppingProducts.filter(p => !p.node.tags.includes('insider'));
    
    if (missingInfo.length > 0) {
      console.log(`\n‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ —Ç–µ–≥–∞ "info": ${missingInfo.length}`);
      missingInfo.forEach(p => console.log(`   - ${p.node.title}`));
    }
    
    if (missingInsider.length > 0) {
      console.log(`\n‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç—ã –±–µ–∑ —Ç–µ–≥–∞ "insider": ${missingInsider.length}`);
      missingInsider.forEach(p => console.log(`   - ${p.node.title}`));
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

main().catch(console.error);
